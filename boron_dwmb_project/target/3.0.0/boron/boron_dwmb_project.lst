
c:/Users/Anjali/Documents/Makers/DudeWheresMyBike/boron_dwmb_project/target/3.0.0/boron/boron_dwmb_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000034c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d74e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e490  000d74e4  0001e490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002ec  2003e504  2003e504  0002e504  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7558  000d7558  00027558  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7580  000d7580  00027580  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00171838  00000000  00000000  00027584  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015e86  00000000  00000000  00198dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00035644  00000000  00000000  001aec42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029e0  00000000  00000000  001e4286  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009180  00000000  00000000  001e6c66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036f02  00000000  00000000  001efde6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003a2c1  00000000  00000000  00226ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001290ff  00000000  00000000  00260fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007800  00000000  00000000  0038a0a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 ff41 	bl	d6eb8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 ff49 	bl	d6ed4 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e490 	.word	0x2003e490
   d404c:	000d74e4 	.word	0x000d74e4
   d4050:	2003e504 	.word	0x2003e504
   d4054:	2003e504 	.word	0x2003e504
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 fb7b 	bl	d575c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d74bc 	.word	0x000d74bc
   d4080:	000d74e0 	.word	0x000d74e0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba5a 	b.w	d453c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa89 	bl	d45a0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bb25 	b.w	d56e0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bff1 	b.w	d507c <malloc>

000d409a <_Znaj>:
   d409a:	f000 bfef 	b.w	d507c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f000 bff5 	b.w	d508c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z8callbackPKcS0_>:
    Particle.subscribe("hook-response/update", callback, MY_DEVICES);



}
void callback(const char* event, const char* data) {
   d40b4:	b508      	push	{r3, lr}

    // modulate state machine from callback
    Serial.print("Message arrived [");
   d40b6:	f001 fef3 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d40ba:	490a      	ldr	r1, [pc, #40]	; (d40e4 <_Z8callbackPKcS0_+0x30>)
   d40bc:	f001 f996 	bl	d53ec <_ZN5Print5printEPKc>
    Serial.print("hook-response/update");
   d40c0:	f001 feee 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d40c4:	4908      	ldr	r1, [pc, #32]	; (d40e8 <_Z8callbackPKcS0_+0x34>)
   d40c6:	f001 f991 	bl	d53ec <_ZN5Print5printEPKc>
    Serial.print("] ");
   d40ca:	f001 fee9 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d40ce:	4907      	ldr	r1, [pc, #28]	; (d40ec <_Z8callbackPKcS0_+0x38>)
   d40d0:	f001 f98c 	bl	d53ec <_ZN5Print5printEPKc>
    Serial.println("payload obtained from server:");
   d40d4:	f001 fee4 	bl	d5ea0 <_Z16_fetch_usbserialv>

    // Some stuff to make with the payload obtained
        //
   //
}
   d40d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("payload obtained from server:");
   d40dc:	4904      	ldr	r1, [pc, #16]	; (d40f0 <_Z8callbackPKcS0_+0x3c>)
   d40de:	f001 b998 	b.w	d5412 <_ZN5Print7printlnEPKc>
   d40e2:	bf00      	nop
   d40e4:	000d70dc 	.word	0x000d70dc
   d40e8:	000d70ee 	.word	0x000d70ee
   d40ec:	000d7103 	.word	0x000d7103
   d40f0:	000d7106 	.word	0x000d7106

000d40f4 <_Z7I2CreadhhhPh>:
{
   d40f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d40f6:	4604      	mov	r4, r0
   d40f8:	9201      	str	r2, [sp, #4]
   d40fa:	461d      	mov	r5, r3
   d40fc:	460e      	mov	r6, r1
Wire.beginTransmission(Address);
   d40fe:	f002 f991 	bl	d6424 <_Z19__fetch_global_Wirev>
   d4102:	4621      	mov	r1, r4
   d4104:	f002 f84c 	bl	d61a0 <_ZN7TwoWire17beginTransmissionEh>
Wire.write(Register);
   d4108:	f002 f98c 	bl	d6424 <_Z19__fetch_global_Wirev>
   d410c:	6803      	ldr	r3, [r0, #0]
   d410e:	4631      	mov	r1, r6
   d4110:	689b      	ldr	r3, [r3, #8]
   d4112:	4798      	blx	r3
Wire.endTransmission();
   d4114:	f002 f986 	bl	d6424 <_Z19__fetch_global_Wirev>
   d4118:	f002 f84a 	bl	d61b0 <_ZN7TwoWire15endTransmissionEv>
Wire.requestFrom(Address, Nbytes); 
   d411c:	f002 f982 	bl	d6424 <_Z19__fetch_global_Wirev>
   d4120:	4621      	mov	r1, r4
   d4122:	9a01      	ldr	r2, [sp, #4]
   d4124:	f002 f839 	bl	d619a <_ZN7TwoWire11requestFromEhj>
   d4128:	2400      	movs	r4, #0
while (Wire.available())
   d412a:	f002 f97b 	bl	d6424 <_Z19__fetch_global_Wirev>
   d412e:	6803      	ldr	r3, [r0, #0]
   d4130:	691b      	ldr	r3, [r3, #16]
   d4132:	4798      	blx	r3
   d4134:	1c66      	adds	r6, r4, #1
   d4136:	b140      	cbz	r0, d414a <_Z7I2CreadhhhPh+0x56>
Data[index++]=Wire.read();
   d4138:	f002 f974 	bl	d6424 <_Z19__fetch_global_Wirev>
   d413c:	6803      	ldr	r3, [r0, #0]
   d413e:	695b      	ldr	r3, [r3, #20]
   d4140:	4798      	blx	r3
   d4142:	b2e4      	uxtb	r4, r4
   d4144:	5528      	strb	r0, [r5, r4]
while (Wire.available())
   d4146:	4634      	mov	r4, r6
   d4148:	e7ef      	b.n	d412a <_Z7I2CreadhhhPh+0x36>
}
   d414a:	b002      	add	sp, #8
   d414c:	bd70      	pop	{r4, r5, r6, pc}

000d414e <_Z12I2CwriteBytehhh>:
{
   d414e:	b570      	push	{r4, r5, r6, lr}
   d4150:	4606      	mov	r6, r0
   d4152:	4614      	mov	r4, r2
   d4154:	460d      	mov	r5, r1
Wire.beginTransmission(Address);
   d4156:	f002 f965 	bl	d6424 <_Z19__fetch_global_Wirev>
   d415a:	4631      	mov	r1, r6
   d415c:	f002 f820 	bl	d61a0 <_ZN7TwoWire17beginTransmissionEh>
Wire.write(Register);
   d4160:	f002 f960 	bl	d6424 <_Z19__fetch_global_Wirev>
   d4164:	6803      	ldr	r3, [r0, #0]
   d4166:	4629      	mov	r1, r5
   d4168:	689b      	ldr	r3, [r3, #8]
   d416a:	4798      	blx	r3
Wire.write(Data);
   d416c:	f002 f95a 	bl	d6424 <_Z19__fetch_global_Wirev>
   d4170:	6803      	ldr	r3, [r0, #0]
   d4172:	4621      	mov	r1, r4
   d4174:	689b      	ldr	r3, [r3, #8]
   d4176:	4798      	blx	r3
Wire.endTransmission();
   d4178:	f002 f954 	bl	d6424 <_Z19__fetch_global_Wirev>
}
   d417c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Wire.endTransmission();
   d4180:	f002 b816 	b.w	d61b0 <_ZN7TwoWire15endTransmissionEv>
   d4184:	0000      	movs	r0, r0
	...

000d4188 <_Z14gps_feed_checkv>:
{
   d4188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d418c:	ed2d 8b02 	vpush	{d8}
    gps.encode(Serial1.read());
   d4190:	4c97      	ldr	r4, [pc, #604]	; (d43f0 <_Z14gps_feed_checkv+0x268>)
{
   d4192:	b08a      	sub	sp, #40	; 0x28
  while (Serial1.available()) {
   d4194:	f001 ff56 	bl	d6044 <_Z22__fetch_global_Serial1v>
   d4198:	6803      	ldr	r3, [r0, #0]
   d419a:	691b      	ldr	r3, [r3, #16]
   d419c:	4798      	blx	r3
   d419e:	b148      	cbz	r0, d41b4 <_Z14gps_feed_checkv+0x2c>
    gps.encode(Serial1.read());
   d41a0:	f001 ff50 	bl	d6044 <_Z22__fetch_global_Serial1v>
   d41a4:	6803      	ldr	r3, [r0, #0]
   d41a6:	695b      	ldr	r3, [r3, #20]
   d41a8:	4798      	blx	r3
   d41aa:	b2c1      	uxtb	r1, r0
   d41ac:	4620      	mov	r0, r4
   d41ae:	f000 fd15 	bl	d4bdc <_ZN11TinyGPSPlus6encodeEc>
  while (Serial1.available()) {
   d41b2:	e7ef      	b.n	d4194 <_Z14gps_feed_checkv+0xc>
 if (gps.location.isUpdated() && gps.location.isValid()) {
   d41b4:	4f8e      	ldr	r7, [pc, #568]	; (d43f0 <_Z14gps_feed_checkv+0x268>)
  Serial.println("Entered gps_feed_check()");
   d41b6:	f001 fe73 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d41ba:	498e      	ldr	r1, [pc, #568]	; (d43f4 <_Z14gps_feed_checkv+0x26c>)
   d41bc:	f001 f929 	bl	d5412 <_ZN5Print7printlnEPKc>
 if (gps.location.isUpdated() && gps.location.isValid()) {
   d41c0:	787b      	ldrb	r3, [r7, #1]
   d41c2:	b913      	cbnz	r3, d41ca <_Z14gps_feed_checkv+0x42>
  return false;
   d41c4:	f04f 0800 	mov.w	r8, #0
   d41c8:	e0c5      	b.n	d4356 <_Z14gps_feed_checkv+0x1ce>
 if (gps.location.isUpdated() && gps.location.isValid()) {
   d41ca:	f897 8000 	ldrb.w	r8, [r7]
   d41ce:	f1b8 0f00 	cmp.w	r8, #0
   d41d2:	d0f7      	beq.n	d41c4 <_Z14gps_feed_checkv+0x3c>
   latitude = gps.location.lat();
   d41d4:	4638      	mov	r0, r7
   d41d6:	f000 fb3f 	bl	d4858 <_ZN15TinyGPSLocation3latEv>
   d41da:	ec51 0b10 	vmov	r0, r1, d0
   d41de:	f002 fe09 	bl	d6df4 <__aeabi_d2f>
   d41e2:	4c85      	ldr	r4, [pc, #532]	; (d43f8 <_Z14gps_feed_checkv+0x270>)
   longitude = gps.location.lng();
   d41e4:	4e85      	ldr	r6, [pc, #532]	; (d43fc <_Z14gps_feed_checkv+0x274>)
   latitude = gps.location.lat();
   d41e6:	6020      	str	r0, [r4, #0]
   longitude = gps.location.lng();
   d41e8:	4638      	mov	r0, r7
   d41ea:	f000 fb59 	bl	d48a0 <_ZN15TinyGPSLocation3lngEv>
   d41ee:	ec51 0b10 	vmov	r0, r1, d0
   d41f2:	f002 fdff 	bl	d6df4 <__aeabi_d2f>
   d41f6:	6030      	str	r0, [r6, #0]
   Serial.print("Latitude: ");
   d41f8:	f001 fe52 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d41fc:	4980      	ldr	r1, [pc, #512]	; (d4400 <_Z14gps_feed_checkv+0x278>)
   d41fe:	f001 f8f5 	bl	d53ec <_ZN5Print5printEPKc>
   Serial.print(latitude);
   d4202:	f001 fe4d 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d4206:	ed94 0a00 	vldr	s0, [r4]
   d420a:	2102      	movs	r1, #2
   d420c:	f001 f9f2 	bl	d55f4 <_ZN5Print5printEfi>
   Serial.print(", Longitude: ");
   d4210:	f001 fe46 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d4214:	497b      	ldr	r1, [pc, #492]	; (d4404 <_Z14gps_feed_checkv+0x27c>)
   d4216:	f001 f8e9 	bl	d53ec <_ZN5Print5printEPKc>
   Serial.println(longitude);
   d421a:	f001 fe41 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d421e:	ed96 0a00 	vldr	s0, [r6]
   d4222:	2102      	movs	r1, #2
   d4224:	f001 fa00 	bl	d5628 <_ZN5Print7printlnEfi>
  Particle.publish("update", String::format("{\"latitude\":%d,\"longitude\":%d}", latitude, longitude), PRIVATE);
   d4228:	6820      	ldr	r0, [r4, #0]
   d422a:	f002 fa93 	bl	d6754 <__aeabi_f2d>
   d422e:	4602      	mov	r2, r0
   d4230:	460b      	mov	r3, r1
   d4232:	6830      	ldr	r0, [r6, #0]
   d4234:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d4238:	f002 fa8c 	bl	d6754 <__aeabi_f2d>
   d423c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d4240:	e9cd 0100 	strd	r0, r1, [sp]
   d4244:	4970      	ldr	r1, [pc, #448]	; (d4408 <_Z14gps_feed_checkv+0x280>)
   d4246:	a806      	add	r0, sp, #24
   d4248:	f001 f826 	bl	d5298 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d424c:	4b6f      	ldr	r3, [pc, #444]	; (d440c <_Z14gps_feed_checkv+0x284>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d424e:	9a06      	ldr	r2, [sp, #24]
   d4250:	781b      	ldrb	r3, [r3, #0]
   d4252:	f88d 3000 	strb.w	r3, [sp]
   d4256:	496e      	ldr	r1, [pc, #440]	; (d4410 <_Z14gps_feed_checkv+0x288>)
   d4258:	233c      	movs	r3, #60	; 0x3c
   d425a:	a804      	add	r0, sp, #16
   d425c:	f001 fbd6 	bl	d5a0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4260:	9d05      	ldr	r5, [sp, #20]
   d4262:	b17d      	cbz	r5, d4284 <_Z14gps_feed_checkv+0xfc>
      if (--_M_use_count == 0)
   d4264:	686b      	ldr	r3, [r5, #4]
   d4266:	3b01      	subs	r3, #1
   d4268:	606b      	str	r3, [r5, #4]
   d426a:	b95b      	cbnz	r3, d4284 <_Z14gps_feed_checkv+0xfc>
          _M_dispose();
   d426c:	682b      	ldr	r3, [r5, #0]
   d426e:	4628      	mov	r0, r5
   d4270:	689b      	ldr	r3, [r3, #8]
   d4272:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4274:	68ab      	ldr	r3, [r5, #8]
   d4276:	3b01      	subs	r3, #1
   d4278:	60ab      	str	r3, [r5, #8]
   d427a:	b91b      	cbnz	r3, d4284 <_Z14gps_feed_checkv+0xfc>
            _M_destroy();
   d427c:	682b      	ldr	r3, [r5, #0]
   d427e:	4628      	mov	r0, r5
   d4280:	68db      	ldr	r3, [r3, #12]
   d4282:	4798      	blx	r3
   d4284:	a806      	add	r0, sp, #24
   d4286:	f000 ffa7 	bl	d51d8 <_ZN6StringD1Ev>
   if (counter % 2 == 1) {
   d428a:	4962      	ldr	r1, [pc, #392]	; (d4414 <_Z14gps_feed_checkv+0x28c>)
   d428c:	f8df a19c 	ldr.w	sl, [pc, #412]	; d442c <_Z14gps_feed_checkv+0x2a4>
   d4290:	680b      	ldr	r3, [r1, #0]
   d4292:	f8df 919c 	ldr.w	r9, [pc, #412]	; d4430 <_Z14gps_feed_checkv+0x2a8>
   d4296:	2b00      	cmp	r3, #0
   d4298:	f003 0201 	and.w	r2, r3, #1
   d429c:	bfb8      	it	lt
   d429e:	4252      	neglt	r2, r2
   d42a0:	2a01      	cmp	r2, #1
   d42a2:	460d      	mov	r5, r1
   d42a4:	f103 0301 	add.w	r3, r3, #1
   d42a8:	d138      	bne.n	d431c <_Z14gps_feed_checkv+0x194>
     avglat = latitude;
   d42aa:	6822      	ldr	r2, [r4, #0]
     counter ++;
   d42ac:	600b      	str	r3, [r1, #0]
  if (gps.location.isUpdated() && gps.location.isValid()){
   d42ae:	787b      	ldrb	r3, [r7, #1]
     avglat = latitude;
   d42b0:	f8ca 2000 	str.w	r2, [sl]
     avglong = longitude;
   d42b4:	6832      	ldr	r2, [r6, #0]
   d42b6:	f8c9 2000 	str.w	r2, [r9]
  if (gps.location.isUpdated() && gps.location.isValid()){
   d42ba:	2b00      	cmp	r3, #0
   d42bc:	d082      	beq.n	d41c4 <_Z14gps_feed_checkv+0x3c>
   d42be:	f897 8000 	ldrb.w	r8, [r7]
   d42c2:	f1b8 0f00 	cmp.w	r8, #0
   d42c6:	f43f af7d 	beq.w	d41c4 <_Z14gps_feed_checkv+0x3c>
    latitude = gps.location.lat();
   d42ca:	4849      	ldr	r0, [pc, #292]	; (d43f0 <_Z14gps_feed_checkv+0x268>)
   d42cc:	f000 fac4 	bl	d4858 <_ZN15TinyGPSLocation3latEv>
   d42d0:	ec51 0b10 	vmov	r0, r1, d0
   d42d4:	f002 fd8e 	bl	d6df4 <__aeabi_d2f>
   d42d8:	6020      	str	r0, [r4, #0]
    longitude = gps.location.lng();
   d42da:	4845      	ldr	r0, [pc, #276]	; (d43f0 <_Z14gps_feed_checkv+0x268>)
   d42dc:	f000 fae0 	bl	d48a0 <_ZN15TinyGPSLocation3lngEv>
   d42e0:	ec51 0b10 	vmov	r0, r1, d0
   d42e4:	f002 fd86 	bl	d6df4 <__aeabi_d2f>
   d42e8:	6030      	str	r0, [r6, #0]
    if (counter == 0){
   d42ea:	682e      	ldr	r6, [r5, #0]
    longitude = gps.location.lng();
   d42ec:	ee07 0a10 	vmov	s14, r0
    if (counter == 0){
   d42f0:	b926      	cbnz	r6, d42fc <_Z14gps_feed_checkv+0x174>
      firstlat = latitude;
   d42f2:	4b49      	ldr	r3, [pc, #292]	; (d4418 <_Z14gps_feed_checkv+0x290>)
   d42f4:	6822      	ldr	r2, [r4, #0]
   d42f6:	601a      	str	r2, [r3, #0]
      firstlong = longitude;
   d42f8:	4b48      	ldr	r3, [pc, #288]	; (d441c <_Z14gps_feed_checkv+0x294>)
   d42fa:	6018      	str	r0, [r3, #0]
    if (counter % filterNum == 0){
   d42fc:	4b48      	ldr	r3, [pc, #288]	; (d4420 <_Z14gps_feed_checkv+0x298>)
   d42fe:	edd4 7a00 	vldr	s15, [r4]
   d4302:	681a      	ldr	r2, [r3, #0]
   d4304:	fb96 f3f2 	sdiv	r3, r6, r2
   d4308:	fb02 6313 	mls	r3, r2, r3, r6
   d430c:	bb4b      	cbnz	r3, d4362 <_Z14gps_feed_checkv+0x1da>
      avglat = latitude;
   d430e:	edca 7a00 	vstr	s15, [sl]
      avglong = longitude;
   d4312:	ed89 7a00 	vstr	s14, [r9]
    counter ++;
   d4316:	3601      	adds	r6, #1
   d4318:	602e      	str	r6, [r5, #0]
   d431a:	e753      	b.n	d41c4 <_Z14gps_feed_checkv+0x3c>
     avglat += latitude;
   d431c:	ed9a 7a00 	vldr	s14, [sl]
   d4320:	edd4 7a00 	vldr	s15, [r4]
     avglong += longitude;
   d4324:	ed96 6a00 	vldr	s12, [r6]
     counter ++;
   d4328:	600b      	str	r3, [r1, #0]
     avglat += latitude;
   d432a:	ee37 7a27 	vadd.f32	s14, s14, s15
     avglong += longitude;
   d432e:	edd9 7a00 	vldr	s15, [r9]
    GLOBAL_LAT = avglat;
   d4332:	4b3c      	ldr	r3, [pc, #240]	; (d4424 <_Z14gps_feed_checkv+0x29c>)
     avglat /= 2;
   d4334:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   d4338:	ee27 7a26 	vmul.f32	s14, s14, s13
     avglong += longitude;
   d433c:	ee77 7a86 	vadd.f32	s15, s15, s12
    GLOBAL_LAT = avglat;
   d4340:	ed83 7a00 	vstr	s14, [r3]
     avglong /= 2;
   d4344:	ee67 7aa6 	vmul.f32	s15, s15, s13
    GLOBAL_LON = avglong;
   d4348:	4b37      	ldr	r3, [pc, #220]	; (d4428 <_Z14gps_feed_checkv+0x2a0>)
     avglat /= 2;
   d434a:	ed8a 7a00 	vstr	s14, [sl]
     avglong /= 2;
   d434e:	edc9 7a00 	vstr	s15, [r9]
    GLOBAL_LON = avglong;
   d4352:	edc3 7a00 	vstr	s15, [r3]
}
   d4356:	4640      	mov	r0, r8
   d4358:	b00a      	add	sp, #40	; 0x28
   d435a:	ecbd 8b02 	vpop	{d8}
   d435e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      avglat *= (counter%filterNum-1);
   d4362:	1e5a      	subs	r2, r3, #1
   d4364:	ee06 2a90 	vmov	s13, r2
      avglat += latitude;
   d4368:	ed9a 6a00 	vldr	s12, [sl]
        if (abs(avglat - firstlat) > 0.00001 || abs(avglong-firstlong) > 0.00001){
   d436c:	4c2a      	ldr	r4, [pc, #168]	; (d4418 <_Z14gps_feed_checkv+0x290>)
   d436e:	4f2b      	ldr	r7, [pc, #172]	; (d441c <_Z14gps_feed_checkv+0x294>)
      avglat *= (counter%filterNum-1);
   d4370:	eef8 6ae6 	vcvt.f32.s32	s13, s13
      avglat += latitude;
   d4374:	eee6 7a86 	vfma.f32	s15, s13, s12
   d4378:	eeb0 6a67 	vmov.f32	s12, s15
      avglat /= counter%filterNum;
   d437c:	ee07 3a90 	vmov	s15, r3
   d4380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4384:	eec6 8a27 	vdiv.f32	s17, s12, s15
      avglong += longitude;
   d4388:	ed99 6a00 	vldr	s12, [r9]
      avglat /= counter%filterNum;
   d438c:	edca 8a00 	vstr	s17, [sl]
      avglong += longitude;
   d4390:	eea6 7a86 	vfma.f32	s14, s13, s12
      avglong /= counter%filterNum;
   d4394:	ee87 8a27 	vdiv.f32	s16, s14, s15
        if (abs(avglat - firstlat) > 0.00001 || abs(avglong-firstlong) > 0.00001){
   d4398:	edd4 7a00 	vldr	s15, [r4]
      avglong /= counter%filterNum;
   d439c:	ed89 8a00 	vstr	s16, [r9]
        if (abs(avglat - firstlat) > 0.00001 || abs(avglong-firstlong) > 0.00001){
   d43a0:	ee78 7ae7 	vsub.f32	s15, s17, s15
   d43a4:	eef0 7ae7 	vabs.f32	s15, s15
   d43a8:	ee17 0a90 	vmov	r0, s15
   d43ac:	f002 f9d2 	bl	d6754 <__aeabi_f2d>
   d43b0:	a30d      	add	r3, pc, #52	; (adr r3, d43e8 <_Z14gps_feed_checkv+0x260>)
   d43b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43b6:	f002 fcb5 	bl	d6d24 <__aeabi_dcmpgt>
   d43ba:	b980      	cbnz	r0, d43de <_Z14gps_feed_checkv+0x256>
   d43bc:	edd7 7a00 	vldr	s15, [r7]
   d43c0:	ee78 7a67 	vsub.f32	s15, s16, s15
   d43c4:	eef0 7ae7 	vabs.f32	s15, s15
   d43c8:	ee17 0a90 	vmov	r0, s15
   d43cc:	f002 f9c2 	bl	d6754 <__aeabi_f2d>
   d43d0:	a305      	add	r3, pc, #20	; (adr r3, d43e8 <_Z14gps_feed_checkv+0x260>)
   d43d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43d6:	f002 fca5 	bl	d6d24 <__aeabi_dcmpgt>
   d43da:	2800      	cmp	r0, #0
   d43dc:	d09b      	beq.n	d4316 <_Z14gps_feed_checkv+0x18e>
          firstlat = avglat;
   d43de:	edc4 8a00 	vstr	s17, [r4]
          firstlong = avglong;
   d43e2:	ed87 8a00 	vstr	s16, [r7]
          return true;
   d43e6:	e7b6      	b.n	d4356 <_Z14gps_feed_checkv+0x1ce>
   d43e8:	88e368f1 	.word	0x88e368f1
   d43ec:	3ee4f8b5 	.word	0x3ee4f8b5
   d43f0:	2003e52c 	.word	0x2003e52c
   d43f4:	000d7124 	.word	0x000d7124
   d43f8:	2003e604 	.word	0x2003e604
   d43fc:	2003e608 	.word	0x2003e608
   d4400:	000d713d 	.word	0x000d713d
   d4404:	000d7148 	.word	0x000d7148
   d4408:	000d7156 	.word	0x000d7156
   d440c:	2003e510 	.word	0x2003e510
   d4410:	000d70fc 	.word	0x000d70fc
   d4414:	2003e51c 	.word	0x2003e51c
   d4418:	2003e524 	.word	0x2003e524
   d441c:	2003e528 	.word	0x2003e528
   d4420:	2003e490 	.word	0x2003e490
   d4424:	2003e508 	.word	0x2003e508
   d4428:	2003e50c 	.word	0x2003e50c
   d442c:	2003e514 	.word	0x2003e514
   d4430:	2003e518 	.word	0x2003e518

000d4434 <_Z7gpsLoopv>:
bool gpsLoop(){
   d4434:	b510      	push	{r4, lr}
   d4436:	2414      	movs	r4, #20
    if (gps_feed_check()){
   d4438:	f7ff fea6 	bl	d4188 <_Z14gps_feed_checkv>
   d443c:	b908      	cbnz	r0, d4442 <_Z7gpsLoopv+0xe>
  for (int i=0; i<20; i++){
   d443e:	3c01      	subs	r4, #1
   d4440:	d1fa      	bne.n	d4438 <_Z7gpsLoopv+0x4>
}
   d4442:	bd10      	pop	{r4, pc}

000d4444 <_Z9check_accv>:
bool check_acc(){
   d4444:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4446:	b085      	sub	sp, #20
  I2Cread(MPU9250_ADDRESS,0x3B,14,Buf);
   d4448:	466b      	mov	r3, sp
   d444a:	220e      	movs	r2, #14
   d444c:	213b      	movs	r1, #59	; 0x3b
   d444e:	2068      	movs	r0, #104	; 0x68
   d4450:	f7ff fe50 	bl	d40f4 <_Z7I2CreadhhhPh>
  int16_t ax=-(Buf[0]<<8 | Buf[1]);
   d4454:	f89d 3000 	ldrb.w	r3, [sp]
   d4458:	f89d 2001 	ldrb.w	r2, [sp, #1]
  int16_t ay=-(Buf[2]<<8 | Buf[3]);
   d445c:	f89d 1002 	ldrb.w	r1, [sp, #2]
  int16_t az=Buf[4]<<8 | Buf[5];
   d4460:	f89d 0004 	ldrb.w	r0, [sp, #4]
  if (cpt == 0){
   d4464:	4e1f      	ldr	r6, [pc, #124]	; (d44e4 <_Z9check_accv+0xa0>)
   d4466:	4c20      	ldr	r4, [pc, #128]	; (d44e8 <_Z9check_accv+0xa4>)
  int16_t ax=-(Buf[0]<<8 | Buf[1]);
   d4468:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  int16_t ay=-(Buf[2]<<8 | Buf[3]);
   d446c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d4470:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  int16_t az=Buf[4]<<8 | Buf[5];
   d4474:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d4478:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  if (cpt == 0){
   d447c:	6830      	ldr	r0, [r6, #0]
  int16_t ax=-(Buf[0]<<8 | Buf[1]);
   d447e:	4252      	negs	r2, r2
  int16_t ay=-(Buf[2]<<8 | Buf[3]);
   d4480:	425b      	negs	r3, r3
  int16_t ax=-(Buf[0]<<8 | Buf[1]);
   d4482:	b212      	sxth	r2, r2
  int16_t ay=-(Buf[2]<<8 | Buf[3]);
   d4484:	b21b      	sxth	r3, r3
  int16_t az=Buf[4]<<8 | Buf[5];
   d4486:	b209      	sxth	r1, r1
  if (cpt == 0){
   d4488:	4635      	mov	r5, r6
   d448a:	b940      	cbnz	r0, d449e <_Z9check_accv+0x5a>
    pax = ax;
   d448c:	8022      	strh	r2, [r4, #0]
    pay = ay;
   d448e:	4a17      	ldr	r2, [pc, #92]	; (d44ec <_Z9check_accv+0xa8>)
   d4490:	8013      	strh	r3, [r2, #0]
    paz = az;
   d4492:	4b17      	ldr	r3, [pc, #92]	; (d44f0 <_Z9check_accv+0xac>)
   d4494:	8019      	strh	r1, [r3, #0]
    cpt++;
   d4496:	2301      	movs	r3, #1
   d4498:	6033      	str	r3, [r6, #0]
}
   d449a:	b005      	add	sp, #20
   d449c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (abs(ax-pax) > 10 || abs(ay-pay) > 10 || abs(az-paz) > 10){
   d449e:	f9b4 0000 	ldrsh.w	r0, [r4]
   d44a2:	1a10      	subs	r0, r2, r0
   d44a4:	2800      	cmp	r0, #0
   d44a6:	bfb8      	it	lt
   d44a8:	4240      	neglt	r0, r0
   d44aa:	280a      	cmp	r0, #10
   d44ac:	dc11      	bgt.n	d44d2 <_Z9check_accv+0x8e>
   d44ae:	4f0f      	ldr	r7, [pc, #60]	; (d44ec <_Z9check_accv+0xa8>)
   d44b0:	f9b7 0000 	ldrsh.w	r0, [r7]
   d44b4:	1a18      	subs	r0, r3, r0
   d44b6:	2800      	cmp	r0, #0
   d44b8:	bfb8      	it	lt
   d44ba:	4240      	neglt	r0, r0
   d44bc:	280a      	cmp	r0, #10
   d44be:	dc08      	bgt.n	d44d2 <_Z9check_accv+0x8e>
   d44c0:	4e0b      	ldr	r6, [pc, #44]	; (d44f0 <_Z9check_accv+0xac>)
   d44c2:	f9b6 0000 	ldrsh.w	r0, [r6]
   d44c6:	1a08      	subs	r0, r1, r0
   d44c8:	2800      	cmp	r0, #0
   d44ca:	bfb8      	it	lt
   d44cc:	4240      	neglt	r0, r0
   d44ce:	280a      	cmp	r0, #10
   d44d0:	dd03      	ble.n	d44da <_Z9check_accv+0x96>
      cpt = 0;
   d44d2:	2300      	movs	r3, #0
   d44d4:	602b      	str	r3, [r5, #0]
      return true;
   d44d6:	2001      	movs	r0, #1
   d44d8:	e7df      	b.n	d449a <_Z9check_accv+0x56>
    pax = ax;
   d44da:	8022      	strh	r2, [r4, #0]
    pay = ay;
   d44dc:	803b      	strh	r3, [r7, #0]
    paz = az;
   d44de:	8031      	strh	r1, [r6, #0]
    return false;
   d44e0:	2000      	movs	r0, #0
   d44e2:	e7da      	b.n	d449a <_Z9check_accv+0x56>
   d44e4:	2003e520 	.word	0x2003e520
   d44e8:	2003e60c 	.word	0x2003e60c
   d44ec:	2003e60e 	.word	0x2003e60e
   d44f0:	2003e610 	.word	0x2003e610

000d44f4 <_Z11check_ultrav>:
bool check_ultra(){
   d44f4:	b508      	push	{r3, lr}
  digitalWrite(TRIG, LOW);
   d44f6:	2100      	movs	r1, #0
   d44f8:	2004      	movs	r0, #4
   d44fa:	f001 ff60 	bl	d63be <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d44fe:	2002      	movs	r0, #2
   d4500:	f000 fbf8 	bl	d4cf4 <HAL_Delay_Microseconds>
  digitalWrite(TRIG, HIGH);
   d4504:	2101      	movs	r1, #1
   d4506:	2004      	movs	r0, #4
   d4508:	f001 ff59 	bl	d63be <digitalWrite>
   d450c:	2014      	movs	r0, #20
   d450e:	f000 fbf1 	bl	d4cf4 <HAL_Delay_Microseconds>
  digitalWrite(TRIG, LOW);
   d4512:	2100      	movs	r1, #0
   d4514:	2004      	movs	r0, #4
   d4516:	f001 ff52 	bl	d63be <digitalWrite>
  int distance = pulseIn(ECHO, HIGH);   //26000?
   d451a:	2101      	movs	r1, #1
   d451c:	2005      	movs	r0, #5
   d451e:	f001 ff67 	bl	d63f0 <pulseIn>
  distance = distance/58;
   d4522:	233a      	movs	r3, #58	; 0x3a
   d4524:	fb90 f0f3 	sdiv	r0, r0, r3
  if (distance - ultraBV > 5){
   d4528:	4b03      	ldr	r3, [pc, #12]	; (d4538 <_Z11check_ultrav+0x44>)
   d452a:	681b      	ldr	r3, [r3, #0]
   d452c:	1ac0      	subs	r0, r0, r3
}
   d452e:	2805      	cmp	r0, #5
   d4530:	bfd4      	ite	le
   d4532:	2000      	movle	r0, #0
   d4534:	2001      	movgt	r0, #1
   d4536:	bd08      	pop	{r3, pc}
   d4538:	2003e498 	.word	0x2003e498

000d453c <setup>:
void setup() {
   d453c:	b507      	push	{r0, r1, r2, lr}
  Serial.begin(9600);
   d453e:	f001 fcaf 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d4542:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4546:	f001 fc9f 	bl	d5e88 <_ZN9USBSerial5beginEl>
  Serial1.begin(9600);
   d454a:	f001 fd7b 	bl	d6044 <_Z22__fetch_global_Serial1v>
   d454e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4552:	f001 fd73 	bl	d603c <_ZN11USARTSerial5beginEm>
  Wire.begin();
   d4556:	f001 ff65 	bl	d6424 <_Z19__fetch_global_Wirev>
   d455a:	f001 fdef 	bl	d613c <_ZN7TwoWire5beginEv>
  I2CwriteByte(MPU9250_ADDRESS,29,0x06);
   d455e:	2206      	movs	r2, #6
   d4560:	211d      	movs	r1, #29
   d4562:	2068      	movs	r0, #104	; 0x68
   d4564:	f7ff fdf3 	bl	d414e <_Z12I2CwriteBytehhh>
  I2CwriteByte(MPU9250_ADDRESS,28,ACC_FULL_SCALE_16_G);
   d4568:	2218      	movs	r2, #24
   d456a:	211c      	movs	r1, #28
   d456c:	2068      	movs	r0, #104	; 0x68
   d456e:	f7ff fdee 	bl	d414e <_Z12I2CwriteBytehhh>
   pinMode(TRIG, OUTPUT);
   d4572:	2101      	movs	r1, #1
   d4574:	2004      	movs	r0, #4
   d4576:	f001 ff11 	bl	d639c <pinMode>
   pinMode(ECHO, INPUT_PULLUP);
   d457a:	2102      	movs	r1, #2
   d457c:	2005      	movs	r0, #5
   d457e:	f001 ff0d 	bl	d639c <pinMode>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4582:	2300      	movs	r3, #0
   d4584:	e9cd 3300 	strd	r3, r3, [sp]
   d4588:	4903      	ldr	r1, [pc, #12]	; (d4598 <setup+0x5c>)
   d458a:	4804      	ldr	r0, [pc, #16]	; (d459c <setup+0x60>)
   d458c:	461a      	mov	r2, r3
   d458e:	f000 fd65 	bl	d505c <spark_subscribe>
}
   d4592:	b003      	add	sp, #12
   d4594:	f85d fb04 	ldr.w	pc, [sp], #4
   d4598:	000d40b5 	.word	0x000d40b5
   d459c:	000d70ee 	.word	0x000d70ee

000d45a0 <loop>:
void loop() {
   d45a0:	b538      	push	{r3, r4, r5, lr}
  // put your main code here, to run repeatedly:
  //Serial.println(gps_feed_check());

   switch (state) {
   d45a2:	4c3f      	ldr	r4, [pc, #252]	; (d46a0 <loop+0x100>)
   d45a4:	6823      	ldr	r3, [r4, #0]
   d45a6:	2b05      	cmp	r3, #5
   d45a8:	d813      	bhi.n	d45d2 <loop+0x32>
   d45aa:	e8df f003 	tbb	[pc, r3]
   d45ae:	1303      	.short	0x1303
   d45b0:	67583b22 	.word	0x67583b22
    Serial.print(state);
      case 0: //init state
      Serial.println("init state");
   d45b4:	f001 fc74 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d45b8:	493a      	ldr	r1, [pc, #232]	; (d46a4 <loop+0x104>)
   d45ba:	f000 ff2a 	bl	d5412 <_ZN5Print7printlnEPKc>
      delay(200);
   d45be:	20c8      	movs	r0, #200	; 0xc8
   d45c0:	f001 f854 	bl	d566c <delay>
        if (start){
   d45c4:	4b38      	ldr	r3, [pc, #224]	; (d46a8 <loop+0x108>)
   d45c6:	681a      	ldr	r2, [r3, #0]
   d45c8:	b11a      	cbz	r2, d45d2 <loop+0x32>
          state =1;
   d45ca:	2201      	movs	r2, #1
   d45cc:	6022      	str	r2, [r4, #0]
          start = 0;
   d45ce:	2200      	movs	r2, #0
   d45d0:	601a      	str	r2, [r3, #0]
      delay(200);
      break;
    
   }
   
   d45d2:	bd38      	pop	{r3, r4, r5, pc}
      Serial.println("security state");
   d45d4:	f001 fc64 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d45d8:	4934      	ldr	r1, [pc, #208]	; (d46ac <loop+0x10c>)
   d45da:	f000 ff1a 	bl	d5412 <_ZN5Print7printlnEPKc>
      delay(200);
   d45de:	20c8      	movs	r0, #200	; 0xc8
   d45e0:	f001 f844 	bl	d566c <delay>
        if (check_acc()) {
   d45e4:	f7ff ff2e 	bl	d4444 <_Z9check_accv>
   d45e8:	2800      	cmp	r0, #0
   d45ea:	d0f2      	beq.n	d45d2 <loop+0x32>
          state = 2;
   d45ec:	2302      	movs	r3, #2
          state = 5;
   d45ee:	6023      	str	r3, [r4, #0]
          break;
   d45f0:	e7ef      	b.n	d45d2 <loop+0x32>
      Serial.println("check_gps state");
   d45f2:	f001 fc55 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d45f6:	492e      	ldr	r1, [pc, #184]	; (d46b0 <loop+0x110>)
   d45f8:	f000 ff0b 	bl	d5412 <_ZN5Print7printlnEPKc>
      delay(200);
   d45fc:	20c8      	movs	r0, #200	; 0xc8
   d45fe:	f001 f835 	bl	d566c <delay>
        if (gpsLoop()) { //or mag lock opened
   d4602:	f7ff ff17 	bl	d4434 <_Z7gpsLoopv>
   d4606:	b138      	cbz	r0, d4618 <loop+0x78>
          state = 3; 
   d4608:	2303      	movs	r3, #3
   d460a:	6023      	str	r3, [r4, #0]
          delay(300);
   d460c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      delay(200);
   d4614:	f001 b82a 	b.w	d566c <delay>
        else if(check_ultra()) { //random limits for two ultrasonics waiting on parts 
   d4618:	f7ff ff6c 	bl	d44f4 <_Z11check_ultrav>
   d461c:	2800      	cmp	r0, #0
   d461e:	d0d8      	beq.n	d45d2 <loop+0x32>
          state = 5;
   d4620:	2305      	movs	r3, #5
   d4622:	e7e4      	b.n	d45ee <loop+0x4e>
      Serial.println("send_signal state");
   d4624:	f001 fc3c 	bl	d5ea0 <_Z16_fetch_usbserialv>
      if(ws==1) {
   d4628:	4d22      	ldr	r5, [pc, #136]	; (d46b4 <loop+0x114>)
      Serial.println("send_signal state");
   d462a:	4923      	ldr	r1, [pc, #140]	; (d46b8 <loop+0x118>)
   d462c:	f000 fef1 	bl	d5412 <_ZN5Print7printlnEPKc>
      delay(200);
   d4630:	20c8      	movs	r0, #200	; 0xc8
   d4632:	f001 f81b 	bl	d566c <delay>
      if(ws==1) {
   d4636:	682b      	ldr	r3, [r5, #0]
   d4638:	2b01      	cmp	r3, #1
   d463a:	d10a      	bne.n	d4652 <loop+0xb2>
        Serial.println("wheel stolen");
   d463c:	f001 fc30 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d4640:	491e      	ldr	r1, [pc, #120]	; (d46bc <loop+0x11c>)
   d4642:	f000 fee6 	bl	d5412 <_ZN5Print7printlnEPKc>
        ws=0;
   d4646:	2300      	movs	r3, #0
   d4648:	602b      	str	r3, [r5, #0]
      state = 4;
   d464a:	2304      	movs	r3, #4
   d464c:	6023      	str	r3, [r4, #0]
      delay(200);
   d464e:	20c8      	movs	r0, #200	; 0xc8
   d4650:	e7de      	b.n	d4610 <loop+0x70>
       Serial.println("bike stolen");
   d4652:	f001 fc25 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d4656:	491a      	ldr	r1, [pc, #104]	; (d46c0 <loop+0x120>)
   d4658:	f000 fedb 	bl	d5412 <_ZN5Print7printlnEPKc>
       state = 4;
   d465c:	e7f5      	b.n	d464a <loop+0xaa>
      Serial.println("sound_alarm state");
   d465e:	f001 fc1f 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d4662:	4918      	ldr	r1, [pc, #96]	; (d46c4 <loop+0x124>)
   d4664:	f000 fed5 	bl	d5412 <_ZN5Print7printlnEPKc>
      delay(200);
   d4668:	20c8      	movs	r0, #200	; 0xc8
   d466a:	f000 ffff 	bl	d566c <delay>
      Serial.println("wee woo alarm boop");
   d466e:	f001 fc17 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d4672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      Serial.println("wee woo alarm boop");
   d4676:	4914      	ldr	r1, [pc, #80]	; (d46c8 <loop+0x128>)
   d4678:	f000 becb 	b.w	d5412 <_ZN5Print7printlnEPKc>
      Serial.println("wheel_stolen state");
   d467c:	f001 fc10 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d4680:	4912      	ldr	r1, [pc, #72]	; (d46cc <loop+0x12c>)
   d4682:	f000 fec6 	bl	d5412 <_ZN5Print7printlnEPKc>
      delay(200); 
   d4686:	20c8      	movs	r0, #200	; 0xc8
   d4688:	f000 fff0 	bl	d566c <delay>
      Serial.println("Wheel stolen");
   d468c:	f001 fc08 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d4690:	490f      	ldr	r1, [pc, #60]	; (d46d0 <loop+0x130>)
   d4692:	f000 febe 	bl	d5412 <_ZN5Print7printlnEPKc>
      ws =1;
   d4696:	4b07      	ldr	r3, [pc, #28]	; (d46b4 <loop+0x114>)
   d4698:	2201      	movs	r2, #1
   d469a:	601a      	str	r2, [r3, #0]
   d469c:	e7d5      	b.n	d464a <loop+0xaa>
   d469e:	bf00      	nop
   d46a0:	2003e614 	.word	0x2003e614
   d46a4:	000d7175 	.word	0x000d7175
   d46a8:	2003e494 	.word	0x2003e494
   d46ac:	000d7180 	.word	0x000d7180
   d46b0:	000d718f 	.word	0x000d718f
   d46b4:	2003e618 	.word	0x2003e618
   d46b8:	000d719f 	.word	0x000d719f
   d46bc:	000d71b1 	.word	0x000d71b1
   d46c0:	000d71be 	.word	0x000d71be
   d46c4:	000d71ca 	.word	0x000d71ca
   d46c8:	000d71dc 	.word	0x000d71dc
   d46cc:	000d71ef 	.word	0x000d71ef
   d46d0:	000d7202 	.word	0x000d7202

000d46d4 <_GLOBAL__sub_I__Z7I2CreadhhhPh>:
        val_(val) {
   d46d4:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <_GLOBAL__sub_I__Z7I2CreadhhhPh+0xc>)
TinyGPSPlus gps;
   d46d6:	4803      	ldr	r0, [pc, #12]	; (d46e4 <_GLOBAL__sub_I__Z7I2CreadhhhPh+0x10>)
   d46d8:	2201      	movs	r2, #1
   d46da:	701a      	strb	r2, [r3, #0]
   d46dc:	f000 b804 	b.w	d46e8 <_ZN11TinyGPSPlusC1Ev>
   d46e0:	2003e510 	.word	0x2003e510
   d46e4:	2003e52c 	.word	0x2003e52c

000d46e8 <_ZN11TinyGPSPlusC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
   d46e8:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d46ea:	2102      	movs	r1, #2
   d46ec:	e9c0 2230 	strd	r2, r2, [r0, #192]	; 0xc0
   d46f0:	8002      	strh	r2, [r0, #0]
   RawDegrees() : deg(0), billionths(0), negative(false)
   d46f2:	8082      	strh	r2, [r0, #4]
   d46f4:	6082      	str	r2, [r0, #8]
   d46f6:	7302      	strb	r2, [r0, #12]
   d46f8:	8202      	strh	r2, [r0, #16]
   d46fa:	6142      	str	r2, [r0, #20]
   d46fc:	7602      	strb	r2, [r0, #24]
   d46fe:	8382      	strh	r2, [r0, #28]
   d4700:	6202      	str	r2, [r0, #32]
   d4702:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d4706:	8502      	strh	r2, [r0, #40]	; 0x28
   d4708:	62c2      	str	r2, [r0, #44]	; 0x2c
   d470a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
   d470e:	8702      	strh	r2, [r0, #56]	; 0x38
   d4710:	63c2      	str	r2, [r0, #60]	; 0x3c
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
   d4712:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d4716:	64c2      	str	r2, [r0, #76]	; 0x4c
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d4718:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d471c:	6602      	str	r2, [r0, #96]	; 0x60
   d471e:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d4722:	6702      	str	r2, [r0, #112]	; 0x70
   d4724:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d4728:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
   d472c:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d4730:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d4734:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d4738:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d473c:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d4740:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
   d4744:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d4748:	e9c0 2232 	strd	r2, r2, [r0, #200]	; 0xc8
   d474c:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
   d4750:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
{
  term[0] = '\0';
   d4754:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d4758:	4770      	bx	lr

000d475a <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d475a:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d475e:	2b05      	cmp	r3, #5
   d4760:	d802      	bhi.n	d4768 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d4762:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d4766:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d4768:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d476c:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d476e:	bf94      	ite	ls
   d4770:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d4774:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d4778:	4770      	bx	lr

000d477a <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d477a:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d477c:	7805      	ldrb	r5, [r0, #0]
{
   d477e:	4604      	mov	r4, r0
  if (negative) ++term;
   d4780:	2d2d      	cmp	r5, #45	; 0x2d
   d4782:	bf08      	it	eq
   d4784:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d4786:	4620      	mov	r0, r4
   d4788:	f002 fb84 	bl	d6e94 <atol>
   d478c:	2364      	movs	r3, #100	; 0x64
   d478e:	4358      	muls	r0, r3
   d4790:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d4792:	f814 3b01 	ldrb.w	r3, [r4], #1
   d4796:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d479a:	2909      	cmp	r1, #9
   d479c:	d9f8      	bls.n	d4790 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d479e:	2b2e      	cmp	r3, #46	; 0x2e
   d47a0:	d10b      	bne.n	d47ba <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d47a2:	7853      	ldrb	r3, [r2, #1]
   d47a4:	3b30      	subs	r3, #48	; 0x30
   d47a6:	2b09      	cmp	r3, #9
   d47a8:	d807      	bhi.n	d47ba <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d47aa:	210a      	movs	r1, #10
   d47ac:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d47b0:	7893      	ldrb	r3, [r2, #2]
   d47b2:	3b30      	subs	r3, #48	; 0x30
   d47b4:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d47b6:	bf98      	it	ls
   d47b8:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d47ba:	2d2d      	cmp	r5, #45	; 0x2d
   d47bc:	bf08      	it	eq
   d47be:	4240      	negeq	r0, r0
}
   d47c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d47c4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d47c4:	b538      	push	{r3, r4, r5, lr}
   d47c6:	460d      	mov	r5, r1
   d47c8:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d47ca:	f002 fb63 	bl	d6e94 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d47ce:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d47d0:	4b13      	ldr	r3, [pc, #76]	; (d4820 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d47d2:	fbb0 f1f2 	udiv	r1, r0, r2
   d47d6:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d47da:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d47dc:	8029      	strh	r1, [r5, #0]
   d47de:	4620      	mov	r0, r4

  while (isdigit(*term))
   d47e0:	7802      	ldrb	r2, [r0, #0]
   d47e2:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d47e6:	2c09      	cmp	r4, #9
   d47e8:	4601      	mov	r1, r0
   d47ea:	f100 0001 	add.w	r0, r0, #1
   d47ee:	d9f7      	bls.n	d47e0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d47f0:	2a2e      	cmp	r2, #46	; 0x2e
   d47f2:	d10b      	bne.n	d480c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d47f4:	480a      	ldr	r0, [pc, #40]	; (d4820 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d47f6:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d47f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d47fc:	3a30      	subs	r2, #48	; 0x30
   d47fe:	2a09      	cmp	r2, #9
   d4800:	d804      	bhi.n	d480c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d4802:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d4806:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d480a:	e7f5      	b.n	d47f8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d480c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4810:	3301      	adds	r3, #1
   d4812:	2203      	movs	r2, #3
   d4814:	fbb3 f3f2 	udiv	r3, r3, r2
   d4818:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d481a:	2300      	movs	r3, #0
   d481c:	722b      	strb	r3, [r5, #8]
}
   d481e:	bd38      	pop	{r3, r4, r5, pc}
   d4820:	00989680 	.word	0x00989680

000d4824 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d4824:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d4826:	4603      	mov	r3, r0
{
   d4828:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d482a:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d482e:	6042      	str	r2, [r0, #4]
   d4830:	685a      	ldr	r2, [r3, #4]
   d4832:	6082      	str	r2, [r0, #8]
   d4834:	7a1b      	ldrb	r3, [r3, #8]
   d4836:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d4838:	4603      	mov	r3, r0
   d483a:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d483e:	6102      	str	r2, [r0, #16]
   d4840:	685a      	ldr	r2, [r3, #4]
   d4842:	6142      	str	r2, [r0, #20]
   d4844:	7a1b      	ldrb	r3, [r3, #8]
   d4846:	7603      	strb	r3, [r0, #24]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4848:	f000 fa5c 	bl	d4d04 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d484c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4850:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d4852:	8023      	strh	r3, [r4, #0]
}
   d4854:	bd10      	pop	{r4, pc}
	...

000d4858 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d4858:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d485a:	2300      	movs	r3, #0
{
   d485c:	4604      	mov	r4, r0
   updated = false;
   d485e:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d4860:	6880      	ldr	r0, [r0, #8]
   d4862:	f001 ff55 	bl	d6710 <__aeabi_ui2d>
   d4866:	a30c      	add	r3, pc, #48	; (adr r3, d4898 <_ZN15TinyGPSLocation3latEv+0x40>)
   d4868:	e9d3 2300 	ldrd	r2, r3, [r3]
   d486c:	f002 f8f4 	bl	d6a58 <__aeabi_ddiv>
   d4870:	4606      	mov	r6, r0
   d4872:	88a0      	ldrh	r0, [r4, #4]
   d4874:	460f      	mov	r7, r1
   d4876:	f001 ff5b 	bl	d6730 <__aeabi_i2d>
   d487a:	460b      	mov	r3, r1
   d487c:	4602      	mov	r2, r0
   d487e:	4639      	mov	r1, r7
   d4880:	4630      	mov	r0, r6
   d4882:	f001 fe09 	bl	d6498 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d4886:	7b23      	ldrb	r3, [r4, #12]
   d4888:	b113      	cbz	r3, d4890 <_ZN15TinyGPSLocation3latEv+0x38>
   d488a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d488e:	4619      	mov	r1, r3
}
   d4890:	ec41 0b10 	vmov	d0, r0, r1
   d4894:	bdd0      	pop	{r4, r6, r7, pc}
   d4896:	bf00      	nop
   d4898:	00000000 	.word	0x00000000
   d489c:	41cdcd65 	.word	0x41cdcd65

000d48a0 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d48a0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d48a2:	2300      	movs	r3, #0
{
   d48a4:	4604      	mov	r4, r0
   updated = false;
   d48a6:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d48a8:	6940      	ldr	r0, [r0, #20]
   d48aa:	f001 ff31 	bl	d6710 <__aeabi_ui2d>
   d48ae:	a30c      	add	r3, pc, #48	; (adr r3, d48e0 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d48b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d48b4:	f002 f8d0 	bl	d6a58 <__aeabi_ddiv>
   d48b8:	4606      	mov	r6, r0
   d48ba:	8a20      	ldrh	r0, [r4, #16]
   d48bc:	460f      	mov	r7, r1
   d48be:	f001 ff37 	bl	d6730 <__aeabi_i2d>
   d48c2:	460b      	mov	r3, r1
   d48c4:	4602      	mov	r2, r0
   d48c6:	4639      	mov	r1, r7
   d48c8:	4630      	mov	r0, r6
   d48ca:	f001 fde5 	bl	d6498 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d48ce:	7e23      	ldrb	r3, [r4, #24]
   d48d0:	b113      	cbz	r3, d48d8 <_ZN15TinyGPSLocation3lngEv+0x38>
   d48d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d48d6:	4619      	mov	r1, r3
}
   d48d8:	ec41 0b10 	vmov	d0, r0, r1
   d48dc:	bdd0      	pop	{r4, r6, r7, pc}
   d48de:	bf00      	nop
   d48e0:	00000000 	.word	0x00000000
   d48e4:	41cdcd65 	.word	0x41cdcd65

000d48e8 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d48e8:	b510      	push	{r4, lr}
   date = newDate;
   d48ea:	6883      	ldr	r3, [r0, #8]
   d48ec:	6043      	str	r3, [r0, #4]
{
   d48ee:	4604      	mov	r4, r0
   d48f0:	f000 fa08 	bl	d4d04 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d48f4:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d48f8:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d48fa:	8023      	strh	r3, [r4, #0]
}
   d48fc:	bd10      	pop	{r4, pc}

000d48fe <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d48fe:	b510      	push	{r4, lr}
   time = newTime;
   d4900:	6883      	ldr	r3, [r0, #8]
   d4902:	6043      	str	r3, [r0, #4]
{
   d4904:	4604      	mov	r4, r0
   d4906:	f000 f9fd 	bl	d4d04 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d490a:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d490e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d4910:	8023      	strh	r3, [r4, #0]
}
   d4912:	bd10      	pop	{r4, pc}

000d4914 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d4914:	b510      	push	{r4, lr}
   d4916:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d4918:	4608      	mov	r0, r1
   d491a:	f7ff ff2e 	bl	d477a <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d491e:	60a0      	str	r0, [r4, #8]
}
   d4920:	bd10      	pop	{r4, pc}

000d4922 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d4922:	b510      	push	{r4, lr}
   d4924:	4604      	mov	r4, r0
   newDate = atol(term);
   d4926:	4608      	mov	r0, r1
   d4928:	f002 fab4 	bl	d6e94 <atol>
   d492c:	60a0      	str	r0, [r4, #8]
}
   d492e:	bd10      	pop	{r4, pc}

000d4930 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d4930:	b510      	push	{r4, lr}
   val = newval;
   d4932:	68c3      	ldr	r3, [r0, #12]
   d4934:	6083      	str	r3, [r0, #8]
{
   d4936:	4604      	mov	r4, r0
   d4938:	f000 f9e4 	bl	d4d04 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d493c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4940:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d4942:	8023      	strh	r3, [r4, #0]
}
   d4944:	bd10      	pop	{r4, pc}

000d4946 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d4946:	b510      	push	{r4, lr}
   d4948:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d494a:	4608      	mov	r0, r1
   d494c:	f7ff ff15 	bl	d477a <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d4950:	60e0      	str	r0, [r4, #12]
}
   d4952:	bd10      	pop	{r4, pc}

000d4954 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d4954:	b510      	push	{r4, lr}
   val = newval;
   d4956:	68c3      	ldr	r3, [r0, #12]
   d4958:	6083      	str	r3, [r0, #8]
{
   d495a:	4604      	mov	r4, r0
   d495c:	f000 f9d2 	bl	d4d04 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4960:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4964:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d4966:	8023      	strh	r3, [r4, #0]
}
   d4968:	bd10      	pop	{r4, pc}

000d496a <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d496a:	b510      	push	{r4, lr}
   d496c:	4604      	mov	r4, r0
   newval = atol(term);
   d496e:	4608      	mov	r0, r1
   d4970:	f002 fa90 	bl	d6e94 <atol>
   d4974:	60e0      	str	r0, [r4, #12]
}
   d4976:	bd10      	pop	{r4, pc}

000d4978 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d4978:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d497a:	4601      	mov	r1, r0
{
   d497c:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d497e:	3010      	adds	r0, #16
   d4980:	f002 fade 	bl	d6f40 <strcpy>
   d4984:	f000 f9be 	bl	d4d04 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4988:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d498c:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d498e:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d4990:	bd10      	pop	{r4, pc}

000d4992 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d4992:	2210      	movs	r2, #16
   d4994:	f002 bb01 	b.w	d6f9a <strncpy>

000d4998 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d4998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d499a:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
{
   d499e:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d49a0:	2d00      	cmp	r5, #0
   d49a2:	d064      	beq.n	d4a6e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d49a4:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d49a8:	f7ff fed7 	bl	d475a <_ZN11TinyGPSPlus7fromHexEc>
   d49ac:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d49b0:	4602      	mov	r2, r0
   d49b2:	4620      	mov	r0, r4
   d49b4:	f7ff fed1 	bl	d475a <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d49b8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d49bc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d49c0:	b2c0      	uxtb	r0, r0
   d49c2:	4283      	cmp	r3, r0
   d49c4:	d14b      	bne.n	d4a5e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
      passedChecksumCount++;
   d49c6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d49ca:	3301      	adds	r3, #1
   d49cc:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d49d0:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d49d4:	b123      	cbz	r3, d49e0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d49d6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d49da:	3301      	adds	r3, #1
   d49dc:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
   d49e0:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d49e4:	b333      	cbz	r3, d4a34 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x9c>
   d49e6:	2b01      	cmp	r3, #1
   d49e8:	d115      	bne.n	d4a16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        date.commit();
   d49ea:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d49ee:	f7ff ff7b 	bl	d48e8 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d49f2:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d49f6:	f7ff ff82 	bl	d48fe <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d49fa:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d49fe:	b153      	cbz	r3, d4a16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
           location.commit();
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff ff0f 	bl	d4824 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d4a06:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4a0a:	f7ff ff91 	bl	d4930 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d4a0e:	f104 0068 	add.w	r0, r4, #104	; 0x68
        hdop.commit();
   d4a12:	f7ff ff8d 	bl	d4930 <_ZN14TinyGPSDecimal6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d4a16:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d4a1a:	b336      	cbz	r6, d4a6a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4a1c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d4a20:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d4a22:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d4a24:	f002 fa82 	bl	d6f2c <strcmp>
   d4a28:	b9f8      	cbnz	r0, d4a6a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
         p->commit();
   d4a2a:	4630      	mov	r0, r6
   d4a2c:	f7ff ffa4 	bl	d4978 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d4a30:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d4a32:	e7f2      	b.n	d4a1a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        time.commit();
   d4a34:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4a38:	f7ff ff61 	bl	d48fe <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d4a3c:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4a40:	b133      	cbz	r3, d4a50 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb8>
          location.commit();
   d4a42:	4620      	mov	r0, r4
   d4a44:	f7ff feee 	bl	d4824 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d4a48:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d4a4c:	f7ff ff70 	bl	d4930 <_ZN14TinyGPSDecimal6commitEv>
        satellites.commit();
   d4a50:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d4a54:	f7ff ff7e 	bl	d4954 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d4a58:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d4a5c:	e7d9      	b.n	d4a12 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7a>
      ++failedChecksumCount;
   d4a5e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d4a62:	3301      	adds	r3, #1
   d4a64:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    return false;
   d4a68:	2500      	movs	r5, #0
}
   d4a6a:	4628      	mov	r0, r5
   d4a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d4a6e:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d4a72:	bb22      	cbnz	r2, d4abe <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x126>
    if (!strcmp(term, _GPRMCterm))
   d4a74:	f100 07aa 	add.w	r7, r0, #170	; 0xaa
   d4a78:	4956      	ldr	r1, [pc, #344]	; (d4bd4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>)
   d4a7a:	4638      	mov	r0, r7
   d4a7c:	f002 fa56 	bl	d6f2c <strcmp>
   d4a80:	b918      	cbnz	r0, d4a8a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf2>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d4a82:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d4a84:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
   d4a88:	e006      	b.n	d4a98 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x100>
    else if (!strcmp(term, _GPGGAterm))
   d4a8a:	4953      	ldr	r1, [pc, #332]	; (d4bd8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>)
   d4a8c:	4638      	mov	r0, r7
   d4a8e:	f002 fa4d 	bl	d6f2c <strcmp>
   d4a92:	b990      	cbnz	r0, d4aba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x122>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d4a94:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d4a98:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d4a9c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d4aa0:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d4aa4:	2e00      	cmp	r6, #0
   d4aa6:	d0e0      	beq.n	d4a6a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4aa8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d4aaa:	4639      	mov	r1, r7
   d4aac:	f002 fa3e 	bl	d6f2c <strcmp>
   d4ab0:	2800      	cmp	r0, #0
   d4ab2:	f280 8088 	bge.w	d4bc6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22e>
   d4ab6:	6b33      	ldr	r3, [r6, #48]	; 0x30
   d4ab8:	e7f0      	b.n	d4a9c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      curSentenceType = GPS_SENTENCE_OTHER;
   d4aba:	2302      	movs	r3, #2
   d4abc:	e7e2      	b.n	d4a84 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xec>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d4abe:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d4ac2:	2902      	cmp	r1, #2
   d4ac4:	d023      	beq.n	d4b0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
   d4ac6:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d4aca:	b303      	cbz	r3, d4b0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
    switch(COMBINE(curSentenceType, curTermNumber))
   d4acc:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d4ad0:	3a01      	subs	r2, #1
   d4ad2:	2a28      	cmp	r2, #40	; 0x28
   d4ad4:	d81b      	bhi.n	d4b0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
   d4ad6:	e8df f002 	tbb	[pc, r2]
   d4ada:	3b15      	.short	0x3b15
   d4adc:	634c4942 	.word	0x634c4942
   d4ae0:	1a726e68 	.word	0x1a726e68
   d4ae4:	1a1a1a1a 	.word	0x1a1a1a1a
   d4ae8:	1a1a1a1a 	.word	0x1a1a1a1a
   d4aec:	1a1a1a1a 	.word	0x1a1a1a1a
   d4af0:	1a1a1a1a 	.word	0x1a1a1a1a
   d4af4:	1a1a1a1a 	.word	0x1a1a1a1a
   d4af8:	34151a1a 	.word	0x34151a1a
   d4afc:	4c49423b 	.word	0x4c49423b
   d4b00:	5953      	.short	0x5953
   d4b02:	5d          	.byte	0x5d
   d4b03:	00          	.byte	0x00
      time.setTime(term);
   d4b04:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4b08:	3048      	adds	r0, #72	; 0x48
   d4b0a:	f7ff ff03 	bl	d4914 <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4b0e:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
         p->set(term);
   d4b12:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4b16:	2e00      	cmp	r6, #0
   d4b18:	d0a7      	beq.n	d4a6a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4b1a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d4b1e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d4b20:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d4b22:	f002 fa03 	bl	d6f2c <strcmp>
   d4b26:	2800      	cmp	r0, #0
   d4b28:	d19f      	bne.n	d4a6a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4b2a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d4b2c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d4b30:	429a      	cmp	r2, r3
   d4b32:	dc9a      	bgt.n	d4a6a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
    if (p->termNumber == curTermNumber)
   d4b34:	d103      	bne.n	d4b3e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a6>
         p->set(term);
   d4b36:	4639      	mov	r1, r7
   d4b38:	4630      	mov	r0, r6
   d4b3a:	f7ff ff2a 	bl	d4992 <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4b3e:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d4b40:	e7e9      	b.n	d4b16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x17e>
      sentenceHasFix = term[0] == 'A';
   d4b42:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d4b46:	4243      	negs	r3, r0
   d4b48:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d4b4a:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d4b4e:	e7de      	b.n	d4b0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d4b50:	f100 011c 	add.w	r1, r0, #28
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d4b54:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d4b58:	f7ff fe34 	bl	d47c4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d4b5c:	e7d7      	b.n	d4b0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      location.rawNewLatData.negative = term[0] == 'S';
   d4b5e:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d4b62:	424b      	negs	r3, r1
   d4b64:	414b      	adcs	r3, r1
   d4b66:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d4b6a:	e7d0      	b.n	d4b0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d4b6c:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d4b70:	e7f0      	b.n	d4b54 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1bc>
      location.rawNewLngData.negative = term[0] == 'W';
   d4b72:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d4b76:	4253      	negs	r3, r2
   d4b78:	4153      	adcs	r3, r2
   d4b7a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d4b7e:	e7c6      	b.n	d4b0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      speed.set(term);
   d4b80:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4b84:	3058      	adds	r0, #88	; 0x58
      altitude.set(term);
   d4b86:	f7ff fede 	bl	d4946 <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d4b8a:	e7c0      	b.n	d4b0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      course.set(term);
   d4b8c:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4b90:	3068      	adds	r0, #104	; 0x68
   d4b92:	e7f8      	b.n	d4b86 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ee>
      date.setDate(term);
   d4b94:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4b98:	3038      	adds	r0, #56	; 0x38
   d4b9a:	f7ff fec2 	bl	d4922 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d4b9e:	e7b6      	b.n	d4b0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      sentenceHasFix = term[0] > '0';
   d4ba0:	2b30      	cmp	r3, #48	; 0x30
   d4ba2:	bf94      	ite	ls
   d4ba4:	2300      	movls	r3, #0
   d4ba6:	2301      	movhi	r3, #1
   d4ba8:	e7cf      	b.n	d4b4a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b2>
      satellites.set(term);
   d4baa:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4bae:	3088      	adds	r0, #136	; 0x88
   d4bb0:	f7ff fedb 	bl	d496a <_ZN14TinyGPSInteger3setEPKc>
      break;
   d4bb4:	e7ab      	b.n	d4b0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      hdop.set(term);
   d4bb6:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4bba:	3098      	adds	r0, #152	; 0x98
   d4bbc:	e7e3      	b.n	d4b86 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ee>
      altitude.set(term);
   d4bbe:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4bc2:	3078      	adds	r0, #120	; 0x78
   d4bc4:	e7df      	b.n	d4b86 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ee>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d4bc6:	f43f af50 	beq.w	d4a6a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
       customCandidates = NULL;
   d4bca:	2300      	movs	r3, #0
   d4bcc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d4bd0:	e74b      	b.n	d4a6a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4bd2:	bf00      	nop
   d4bd4:	000d720f 	.word	0x000d720f
   d4bd8:	000d7215 	.word	0x000d7215

000d4bdc <_ZN11TinyGPSPlus6encodeEc>:
{
   d4bdc:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d4bde:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d4be2:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d4be4:	f103 0301 	add.w	r3, r3, #1
{
   d4be8:	4604      	mov	r4, r0
   d4bea:	460d      	mov	r5, r1
  ++encodedCharCount;
   d4bec:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d4bf0:	d03a      	beq.n	d4c68 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d4bf2:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d4bf6:	d814      	bhi.n	d4c22 <_ZN11TinyGPSPlus6encodeEc+0x46>
   d4bf8:	290a      	cmp	r1, #10
   d4bfa:	d01c      	beq.n	d4c36 <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d4bfc:	290d      	cmp	r1, #13
   d4bfe:	d01a      	beq.n	d4c36 <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d4c00:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d4c02:	bf9f      	itttt	ls
   d4c04:	1c5a      	addls	r2, r3, #1
   d4c06:	191b      	addls	r3, r3, r4
   d4c08:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d4c0c:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d4c10:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d4c14:	bb98      	cbnz	r0, d4c7e <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d4c16:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d4c1a:	404d      	eors	r5, r1
   d4c1c:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d4c20:	e021      	b.n	d4c66 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d4c22:	292a      	cmp	r1, #42	; 0x2a
   d4c24:	d007      	beq.n	d4c36 <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d4c26:	292c      	cmp	r1, #44	; 0x2c
   d4c28:	d1ea      	bne.n	d4c00 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d4c2a:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d4c2e:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d4c32:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
      if (curTermOffset < sizeof(term))
   d4c36:	2b0e      	cmp	r3, #14
   d4c38:	f04f 0000 	mov.w	r0, #0
   d4c3c:	d805      	bhi.n	d4c4a <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d4c3e:	4423      	add	r3, r4
   d4c40:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d4c44:	4620      	mov	r0, r4
   d4c46:	f7ff fea7 	bl	d4998 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d4c4a:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d4c4e:	3301      	adds	r3, #1
   d4c50:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d4c54:	2300      	movs	r3, #0
   d4c56:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d4c5a:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d4c5e:	425d      	negs	r5, r3
   d4c60:	415d      	adcs	r5, r3
   d4c62:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
}
   d4c66:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d4c68:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d4c6a:	2302      	movs	r3, #2
    parity = 0;
   d4c6c:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d4c70:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    curTermNumber = curTermOffset = 0;
   d4c74:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    sentenceHasFix = false;
   d4c78:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d4c7c:	e7f3      	b.n	d4c66 <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d4c7e:	2000      	movs	r0, #0
   d4c80:	e7f1      	b.n	d4c66 <_ZN11TinyGPSPlus6encodeEc+0x8a>
	...

000d4c84 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <netdb_freeaddrinfo+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	689b      	ldr	r3, [r3, #8]
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	00030268 	.word	0x00030268

000d4c94 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <netdb_getaddrinfo+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	68db      	ldr	r3, [r3, #12]
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	00030268 	.word	0x00030268

000d4ca4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <HAL_Pin_Mode+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	689b      	ldr	r3, [r3, #8]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	0003022c 	.word	0x0003022c

000d4cb4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <HAL_Get_Pin_Mode+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	68db      	ldr	r3, [r3, #12]
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	0003022c 	.word	0x0003022c

000d4cc4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <HAL_GPIO_Write+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	691b      	ldr	r3, [r3, #16]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	0003022c 	.word	0x0003022c

000d4cd4 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <HAL_Pulse_In+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	0003022c 	.word	0x0003022c

000d4ce4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <HAL_RNG_GetRandomNumber+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	685b      	ldr	r3, [r3, #4]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030218 	.word	0x00030218

000d4cf4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <HAL_Delay_Microseconds+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	68db      	ldr	r3, [r3, #12]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030218 	.word	0x00030218

000d4d04 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	695b      	ldr	r3, [r3, #20]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030218 	.word	0x00030218

000d4d14 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <os_mutex_recursive_create+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030248 	.word	0x00030248

000d4d24 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <os_mutex_recursive_destroy+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030248 	.word	0x00030248

000d4d34 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <inet_inet_ntop+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	695b      	ldr	r3, [r3, #20]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030264 	.word	0x00030264

000d4d44 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <hal_usart_init+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	681b      	ldr	r3, [r3, #0]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	0003023c 	.word	0x0003023c

000d4d54 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <hal_usart_write+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	68db      	ldr	r3, [r3, #12]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	0003023c 	.word	0x0003023c

000d4d64 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <hal_usart_available+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	691b      	ldr	r3, [r3, #16]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	0003023c 	.word	0x0003023c

000d4d74 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <hal_usart_read+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	695b      	ldr	r3, [r3, #20]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	0003023c 	.word	0x0003023c

000d4d84 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <hal_usart_peek+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	699b      	ldr	r3, [r3, #24]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	0003023c 	.word	0x0003023c

000d4d94 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <hal_usart_flush+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	69db      	ldr	r3, [r3, #28]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	0003023c 	.word	0x0003023c

000d4da4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <hal_usart_is_enabled+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	6a1b      	ldr	r3, [r3, #32]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	0003023c 	.word	0x0003023c

000d4db4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <hal_usart_available_data_for_write+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	0003023c 	.word	0x0003023c

000d4dc4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <hal_usart_begin_config+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	0003023c 	.word	0x0003023c

000d4dd4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <hal_i2c_begin+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	68db      	ldr	r3, [r3, #12]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030228 	.word	0x00030228

000d4de4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <hal_i2c_begin_transmission+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	699b      	ldr	r3, [r3, #24]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030228 	.word	0x00030228

000d4df4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <hal_i2c_end_transmission+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	69db      	ldr	r3, [r3, #28]
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030228 	.word	0x00030228

000d4e04 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <hal_i2c_write+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	6a1b      	ldr	r3, [r3, #32]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030228 	.word	0x00030228

000d4e14 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <hal_i2c_available+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030228 	.word	0x00030228

000d4e24 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <hal_i2c_read+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030228 	.word	0x00030228

000d4e34 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <hal_i2c_peek+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030228 	.word	0x00030228

000d4e44 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <hal_i2c_flush+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030228 	.word	0x00030228

000d4e54 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <hal_i2c_is_enabled+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030228 	.word	0x00030228

000d4e64 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <hal_i2c_init+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030228 	.word	0x00030228

000d4e74 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <hal_i2c_request_ex+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030228 	.word	0x00030228

000d4e84 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <hal_spi_init+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	69db      	ldr	r3, [r3, #28]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030230 	.word	0x00030230

000d4e94 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <hal_spi_is_enabled+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	6a1b      	ldr	r3, [r3, #32]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030230 	.word	0x00030230

000d4ea4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <HAL_USB_USART_Init+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	681b      	ldr	r3, [r3, #0]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	0003024c 	.word	0x0003024c

000d4eb4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <HAL_USB_USART_Begin+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	685b      	ldr	r3, [r3, #4]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	0003024c 	.word	0x0003024c

000d4ec4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <HAL_USB_USART_Available_Data+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	691b      	ldr	r3, [r3, #16]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	0003024c 	.word	0x0003024c

000d4ed4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	695b      	ldr	r3, [r3, #20]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	0003024c 	.word	0x0003024c

000d4ee4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <HAL_USB_USART_Receive_Data+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	699b      	ldr	r3, [r3, #24]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	0003024c 	.word	0x0003024c

000d4ef4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <HAL_USB_USART_Send_Data+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	69db      	ldr	r3, [r3, #28]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	0003024c 	.word	0x0003024c

000d4f04 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <HAL_USB_USART_Flush_Data+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	6a1b      	ldr	r3, [r3, #32]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	0003024c 	.word	0x0003024c

000d4f14 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <set_system_mode+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	685b      	ldr	r3, [r3, #4]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030220 	.word	0x00030220

000d4f24 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <system_delay_ms+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	695b      	ldr	r3, [r3, #20]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030220 	.word	0x00030220

000d4f34 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <application_thread_current+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030220 	.word	0x00030220

000d4f44 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <application_thread_invoke+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030220 	.word	0x00030220

000d4f54 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b03      	ldr	r3, [pc, #12]	; (d4f64 <system_ctrl_set_app_request_handler+0x10>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4f5e:	9301      	str	r3, [sp, #4]
   d4f60:	bd08      	pop	{r3, pc}
   d4f62:	0000      	.short	0x0000
   d4f64:	00030220 	.word	0x00030220

000d4f68 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f68:	b508      	push	{r3, lr}
   d4f6a:	4b03      	ldr	r3, [pc, #12]	; (d4f78 <system_ctrl_set_result+0x10>)
   d4f6c:	681b      	ldr	r3, [r3, #0]
   d4f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f72:	9301      	str	r3, [sp, #4]
   d4f74:	bd08      	pop	{r3, pc}
   d4f76:	0000      	.short	0x0000
   d4f78:	00030220 	.word	0x00030220

000d4f7c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <network_connect+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	685b      	ldr	r3, [r3, #4]
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030240 	.word	0x00030240

000d4f8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <network_connecting+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	689b      	ldr	r3, [r3, #8]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030240 	.word	0x00030240

000d4f9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <network_disconnect+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	68db      	ldr	r3, [r3, #12]
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030240 	.word	0x00030240

000d4fac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <network_ready+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	691b      	ldr	r3, [r3, #16]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030240 	.word	0x00030240

000d4fbc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <network_on+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	695b      	ldr	r3, [r3, #20]
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030240 	.word	0x00030240

000d4fcc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <network_off+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	699b      	ldr	r3, [r3, #24]
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	00030240 	.word	0x00030240

000d4fdc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <network_listen+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	69db      	ldr	r3, [r3, #28]
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030240 	.word	0x00030240

000d4fec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <network_listening+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	6a1b      	ldr	r3, [r3, #32]
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030240 	.word	0x00030240

000d4ffc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <network_set_listen_timeout+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	00030240 	.word	0x00030240

000d500c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <network_get_listen_timeout+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	00030240 	.word	0x00030240

000d501c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <network_is_on+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030240 	.word	0x00030240

000d502c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <network_is_off+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030240 	.word	0x00030240

000d503c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <spark_cloud_flag_connected+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	695b      	ldr	r3, [r3, #20]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030244 	.word	0x00030244

000d504c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <spark_send_event+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	6a1b      	ldr	r3, [r3, #32]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030244 	.word	0x00030244

000d505c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <spark_subscribe+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	00030244 	.word	0x00030244

000d506c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	00030244 	.word	0x00030244

000d507c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <malloc+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	681b      	ldr	r3, [r3, #0]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	0003021c 	.word	0x0003021c

000d508c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <free+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	685b      	ldr	r3, [r3, #4]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	0003021c 	.word	0x0003021c

000d509c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <realloc+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	689b      	ldr	r3, [r3, #8]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	0003021c 	.word	0x0003021c

000d50ac <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <vsnprintf+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	0003021c 	.word	0x0003021c

000d50bc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <abort+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	0003021c 	.word	0x0003021c

000d50cc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <_malloc_r+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	0003021c 	.word	0x0003021c

000d50dc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <newlib_impure_ptr_callback+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	0003021c 	.word	0x0003021c

000d50ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50ec:	2200      	movs	r2, #0
   d50ee:	6840      	ldr	r0, [r0, #4]
   d50f0:	4611      	mov	r1, r2
   d50f2:	f7ff bf7b 	b.w	d4fec <network_listening>

000d50f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d50f6:	2200      	movs	r2, #0
   d50f8:	6840      	ldr	r0, [r0, #4]
   d50fa:	4611      	mov	r1, r2
   d50fc:	f7ff bf86 	b.w	d500c <network_get_listen_timeout>

000d5100 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5100:	6840      	ldr	r0, [r0, #4]
   d5102:	2200      	movs	r2, #0
   d5104:	f7ff bf7a 	b.w	d4ffc <network_set_listen_timeout>

000d5108 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5108:	6840      	ldr	r0, [r0, #4]
   d510a:	2200      	movs	r2, #0
   d510c:	f081 0101 	eor.w	r1, r1, #1
   d5110:	f7ff bf64 	b.w	d4fdc <network_listen>

000d5114 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5114:	2300      	movs	r3, #0
   d5116:	6840      	ldr	r0, [r0, #4]
   d5118:	461a      	mov	r2, r3
   d511a:	4619      	mov	r1, r3
   d511c:	f7ff bf56 	b.w	d4fcc <network_off>

000d5120 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5120:	2300      	movs	r3, #0
   d5122:	6840      	ldr	r0, [r0, #4]
   d5124:	461a      	mov	r2, r3
   d5126:	4619      	mov	r1, r3
   d5128:	f7ff bf48 	b.w	d4fbc <network_on>

000d512c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d512c:	2200      	movs	r2, #0
   d512e:	6840      	ldr	r0, [r0, #4]
   d5130:	4611      	mov	r1, r2
   d5132:	f7ff bf3b 	b.w	d4fac <network_ready>

000d5136 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5136:	2200      	movs	r2, #0
   d5138:	6840      	ldr	r0, [r0, #4]
   d513a:	4611      	mov	r1, r2
   d513c:	f7ff bf26 	b.w	d4f8c <network_connecting>

000d5140 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5140:	6840      	ldr	r0, [r0, #4]
   d5142:	2200      	movs	r2, #0
   d5144:	2102      	movs	r1, #2
   d5146:	f7ff bf29 	b.w	d4f9c <network_disconnect>

000d514a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d514a:	2300      	movs	r3, #0
   d514c:	6840      	ldr	r0, [r0, #4]
   d514e:	461a      	mov	r2, r3
   d5150:	f7ff bf14 	b.w	d4f7c <network_connect>

000d5154 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5154:	4b02      	ldr	r3, [pc, #8]	; (d5160 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5156:	2203      	movs	r2, #3
   d5158:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d515a:	4a02      	ldr	r2, [pc, #8]	; (d5164 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d515c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d515e:	4770      	bx	lr
   d5160:	2003e61c 	.word	0x2003e61c
   d5164:	000d7224 	.word	0x000d7224

000d5168 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5168:	b510      	push	{r4, lr}
   d516a:	4604      	mov	r4, r0
   d516c:	4608      	mov	r0, r1
{
    _spi = spi;
   d516e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5170:	f7ff fe88 	bl	d4e84 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5174:	2300      	movs	r3, #0
   d5176:	6063      	str	r3, [r4, #4]
}
   d5178:	4620      	mov	r0, r4
   d517a:	bd10      	pop	{r4, pc}

000d517c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d517c:	b510      	push	{r4, lr}
   d517e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5180:	6800      	ldr	r0, [r0, #0]
   d5182:	b118      	cbz	r0, d518c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5184:	f7ff ff82 	bl	d508c <free>
            wakeupSource_ = nullptr;
   d5188:	2300      	movs	r3, #0
   d518a:	6023      	str	r3, [r4, #0]
        }
    }
   d518c:	bd10      	pop	{r4, pc}

000d518e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d518e:	b510      	push	{r4, lr}
   d5190:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5192:	f7ff fff3 	bl	d517c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5196:	4620      	mov	r0, r4
   d5198:	bd10      	pop	{r4, pc}
	...

000d519c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d519c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d519e:	4b09      	ldr	r3, [pc, #36]	; (d51c4 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d51a0:	4c09      	ldr	r4, [pc, #36]	; (d51c8 <_GLOBAL__sub_I_System+0x2c>)
   d51a2:	2202      	movs	r2, #2
   d51a4:	2000      	movs	r0, #0
   d51a6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d51a8:	4b08      	ldr	r3, [pc, #32]	; (d51cc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d51aa:	6020      	str	r0, [r4, #0]
   d51ac:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d51ae:	71a0      	strb	r0, [r4, #6]
   d51b0:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d51b2:	f7ff feaf 	bl	d4f14 <set_system_mode>
SystemClass System;
   d51b6:	4620      	mov	r0, r4
   d51b8:	4a05      	ldr	r2, [pc, #20]	; (d51d0 <_GLOBAL__sub_I_System+0x34>)
   d51ba:	4906      	ldr	r1, [pc, #24]	; (d51d4 <_GLOBAL__sub_I_System+0x38>)
   d51bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d51c0:	f001 b958 	b.w	d6474 <__aeabi_atexit>
   d51c4:	2003e630 	.word	0x2003e630
   d51c8:	2003e624 	.word	0x2003e624
   d51cc:	ffff0000 	.word	0xffff0000
   d51d0:	2003e504 	.word	0x2003e504
   d51d4:	000d518f 	.word	0x000d518f

000d51d8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d51d8:	b510      	push	{r4, lr}
   d51da:	4604      	mov	r4, r0
{
	free(buffer);
   d51dc:	6800      	ldr	r0, [r0, #0]
   d51de:	f7ff ff55 	bl	d508c <free>
}
   d51e2:	4620      	mov	r0, r4
   d51e4:	bd10      	pop	{r4, pc}

000d51e6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d51e6:	b510      	push	{r4, lr}
   d51e8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d51ea:	6800      	ldr	r0, [r0, #0]
   d51ec:	b108      	cbz	r0, d51f2 <_ZN6String10invalidateEv+0xc>
   d51ee:	f7ff ff4d 	bl	d508c <free>
	buffer = NULL;
   d51f2:	2300      	movs	r3, #0
	capacity = len = 0;
   d51f4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d51f8:	6023      	str	r3, [r4, #0]
}
   d51fa:	bd10      	pop	{r4, pc}

000d51fc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d51fc:	b538      	push	{r3, r4, r5, lr}
   d51fe:	4604      	mov	r4, r0
   d5200:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5202:	6800      	ldr	r0, [r0, #0]
   d5204:	3101      	adds	r1, #1
   d5206:	f7ff ff49 	bl	d509c <realloc>
	if (newbuffer) {
   d520a:	b110      	cbz	r0, d5212 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d520c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5210:	2001      	movs	r0, #1
	}
	return 0;
}
   d5212:	bd38      	pop	{r3, r4, r5, pc}

000d5214 <_ZN6String7reserveEj>:
{
   d5214:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5216:	6803      	ldr	r3, [r0, #0]
{
   d5218:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d521a:	b123      	cbz	r3, d5226 <_ZN6String7reserveEj+0x12>
   d521c:	6843      	ldr	r3, [r0, #4]
   d521e:	428b      	cmp	r3, r1
   d5220:	d301      	bcc.n	d5226 <_ZN6String7reserveEj+0x12>
   d5222:	2001      	movs	r0, #1
}
   d5224:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5226:	4620      	mov	r0, r4
   d5228:	f7ff ffe8 	bl	d51fc <_ZN6String12changeBufferEj>
   d522c:	2800      	cmp	r0, #0
   d522e:	d0f9      	beq.n	d5224 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5230:	68a3      	ldr	r3, [r4, #8]
   d5232:	2b00      	cmp	r3, #0
   d5234:	d1f5      	bne.n	d5222 <_ZN6String7reserveEj+0xe>
   d5236:	6822      	ldr	r2, [r4, #0]
   d5238:	7013      	strb	r3, [r2, #0]
   d523a:	e7f2      	b.n	d5222 <_ZN6String7reserveEj+0xe>

000d523c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d523c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d523e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5240:	4611      	mov	r1, r2
   d5242:	9201      	str	r2, [sp, #4]
{
   d5244:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5246:	f7ff ffe5 	bl	d5214 <_ZN6String7reserveEj>
   d524a:	9a01      	ldr	r2, [sp, #4]
   d524c:	b928      	cbnz	r0, d525a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d524e:	4620      	mov	r0, r4
   d5250:	f7ff ffc9 	bl	d51e6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5254:	4620      	mov	r0, r4
   d5256:	b003      	add	sp, #12
   d5258:	bd30      	pop	{r4, r5, pc}
	len = length;
   d525a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d525c:	4629      	mov	r1, r5
   d525e:	6820      	ldr	r0, [r4, #0]
   d5260:	f001 fe2a 	bl	d6eb8 <memcpy>
	buffer[len] = 0;
   d5264:	6822      	ldr	r2, [r4, #0]
   d5266:	68a3      	ldr	r3, [r4, #8]
   d5268:	2100      	movs	r1, #0
   d526a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d526c:	e7f2      	b.n	d5254 <_ZN6String4copyEPKcj+0x18>

000d526e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d526e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5270:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5272:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5276:	4604      	mov	r4, r0
	len = 0;
   d5278:	6083      	str	r3, [r0, #8]
	flags = 0;
   d527a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d527c:	b141      	cbz	r1, d5290 <_ZN6StringC1EPKc+0x22>
   d527e:	4608      	mov	r0, r1
   d5280:	9101      	str	r1, [sp, #4]
   d5282:	f001 fe82 	bl	d6f8a <strlen>
   d5286:	9901      	ldr	r1, [sp, #4]
   d5288:	4602      	mov	r2, r0
   d528a:	4620      	mov	r0, r4
   d528c:	f7ff ffd6 	bl	d523c <_ZN6String4copyEPKcj>
}
   d5290:	4620      	mov	r0, r4
   d5292:	b002      	add	sp, #8
   d5294:	bd10      	pop	{r4, pc}
	...

000d5298 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d5298:	b40e      	push	{r1, r2, r3}
   d529a:	b570      	push	{r4, r5, r6, lr}
   d529c:	b087      	sub	sp, #28
   d529e:	ad0b      	add	r5, sp, #44	; 0x2c
   d52a0:	4604      	mov	r4, r0
   d52a2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d52a6:	9201      	str	r2, [sp, #4]
   d52a8:	462b      	mov	r3, r5
   d52aa:	2105      	movs	r1, #5
   d52ac:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d52ae:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d52b0:	f7ff fefc 	bl	d50ac <vsnprintf>
    va_end(marker);

    String result;
   d52b4:	490b      	ldr	r1, [pc, #44]	; (d52e4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d52b6:	4606      	mov	r6, r0
    String result;
   d52b8:	4620      	mov	r0, r4
   d52ba:	f7ff ffd8 	bl	d526e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d52be:	4631      	mov	r1, r6
   d52c0:	4620      	mov	r0, r4
   d52c2:	f7ff ffa7 	bl	d5214 <_ZN6String7reserveEj>
    if (result.buffer) {
   d52c6:	6820      	ldr	r0, [r4, #0]
   d52c8:	b130      	cbz	r0, d52d8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d52ca:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d52cc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d52ce:	462b      	mov	r3, r5
   d52d0:	1c71      	adds	r1, r6, #1
   d52d2:	f7ff feeb 	bl	d50ac <vsnprintf>
        va_end(marker);
        result.len = n;
   d52d6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d52d8:	4620      	mov	r0, r4
   d52da:	b007      	add	sp, #28
   d52dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d52e0:	b003      	add	sp, #12
   d52e2:	4770      	bx	lr
   d52e4:	000d7155 	.word	0x000d7155

000d52e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d52e8:	b510      	push	{r4, lr}
          _M_dispose();
   d52ea:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d52ec:	4604      	mov	r4, r0
          _M_dispose();
   d52ee:	689b      	ldr	r3, [r3, #8]
   d52f0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d52f2:	68a3      	ldr	r3, [r4, #8]
   d52f4:	3b01      	subs	r3, #1
   d52f6:	60a3      	str	r3, [r4, #8]
   d52f8:	b92b      	cbnz	r3, d5306 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d52fa:	6823      	ldr	r3, [r4, #0]
   d52fc:	4620      	mov	r0, r4
   d52fe:	68db      	ldr	r3, [r3, #12]
    }
   d5300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5304:	4718      	bx	r3
    }
   d5306:	bd10      	pop	{r4, pc}

000d5308 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5308:	b510      	push	{r4, lr}
   d530a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d530c:	6800      	ldr	r0, [r0, #0]
   d530e:	b108      	cbz	r0, d5314 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5310:	f7ff fd08 	bl	d4d24 <os_mutex_recursive_destroy>
    }
   d5314:	4620      	mov	r0, r4
   d5316:	bd10      	pop	{r4, pc}

000d5318 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5318:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d531a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d531c:	4604      	mov	r4, r0
      if (_M_manager)
   d531e:	b113      	cbz	r3, d5326 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5320:	2203      	movs	r2, #3
   d5322:	4601      	mov	r1, r0
   d5324:	4798      	blx	r3
    }
   d5326:	4620      	mov	r0, r4
   d5328:	bd10      	pop	{r4, pc}

000d532a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d532a:	680b      	ldr	r3, [r1, #0]
   d532c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d532e:	b113      	cbz	r3, d5336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5330:	685a      	ldr	r2, [r3, #4]
   d5332:	3201      	adds	r2, #1
   d5334:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d5336:	4770      	bx	lr

000d5338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5338:	b510      	push	{r4, lr}
   d533a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d533c:	6800      	ldr	r0, [r0, #0]
   d533e:	b128      	cbz	r0, d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d5340:	6843      	ldr	r3, [r0, #4]
   d5342:	3b01      	subs	r3, #1
   d5344:	6043      	str	r3, [r0, #4]
   d5346:	b90b      	cbnz	r3, d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5348:	f7ff ffce 	bl	d52e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d534c:	4620      	mov	r0, r4
   d534e:	bd10      	pop	{r4, pc}

000d5350 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d5350:	b513      	push	{r0, r1, r4, lr}
   d5352:	460b      	mov	r3, r1
   d5354:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5356:	e9d0 0100 	ldrd	r0, r1, [r0]
   d535a:	466c      	mov	r4, sp
   d535c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5360:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5364:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5368:	e894 0003 	ldmia.w	r4, {r0, r1}
   d536c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5370:	b002      	add	sp, #8
   d5372:	bd10      	pop	{r4, pc}

000d5374 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5374:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5376:	4c06      	ldr	r4, [pc, #24]	; (d5390 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5378:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d537a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d537c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d537e:	f7ff fcc9 	bl	d4d14 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5382:	4620      	mov	r0, r4
   d5384:	4a03      	ldr	r2, [pc, #12]	; (d5394 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5386:	4904      	ldr	r1, [pc, #16]	; (d5398 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d538c:	f001 b872 	b.w	d6474 <__aeabi_atexit>
   d5390:	2003e634 	.word	0x2003e634
   d5394:	2003e504 	.word	0x2003e504
   d5398:	000d5309 	.word	0x000d5309

000d539c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d539e:	4606      	mov	r6, r0
   d53a0:	460d      	mov	r5, r1
  size_t n = 0;
   d53a2:	188f      	adds	r7, r1, r2
   d53a4:	2400      	movs	r4, #0
  while (size--) {
   d53a6:	42bd      	cmp	r5, r7
   d53a8:	d00c      	beq.n	d53c4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d53aa:	6833      	ldr	r3, [r6, #0]
   d53ac:	f815 1b01 	ldrb.w	r1, [r5], #1
   d53b0:	689b      	ldr	r3, [r3, #8]
   d53b2:	4630      	mov	r0, r6
   d53b4:	4798      	blx	r3
     if (chunk>=0)
   d53b6:	1e03      	subs	r3, r0, #0
   d53b8:	db01      	blt.n	d53be <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d53ba:	441c      	add	r4, r3
  while (size--) {
   d53bc:	e7f3      	b.n	d53a6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d53be:	2c00      	cmp	r4, #0
   d53c0:	bf08      	it	eq
   d53c2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d53c4:	4620      	mov	r0, r4
   d53c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53c8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d53c8:	b513      	push	{r0, r1, r4, lr}
   d53ca:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d53cc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d53ce:	b159      	cbz	r1, d53e8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d53d0:	9101      	str	r1, [sp, #4]
   d53d2:	f001 fdda 	bl	d6f8a <strlen>
   d53d6:	6823      	ldr	r3, [r4, #0]
   d53d8:	9901      	ldr	r1, [sp, #4]
   d53da:	68db      	ldr	r3, [r3, #12]
   d53dc:	4602      	mov	r2, r0
   d53de:	4620      	mov	r0, r4
    }
   d53e0:	b002      	add	sp, #8
   d53e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d53e6:	4718      	bx	r3
    }
   d53e8:	b002      	add	sp, #8
   d53ea:	bd10      	pop	{r4, pc}

000d53ec <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d53ec:	b508      	push	{r3, lr}
  return write(str);
   d53ee:	f7ff ffeb 	bl	d53c8 <_ZN5Print5writeEPKc>
}
   d53f2:	bd08      	pop	{r3, pc}

000d53f4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d53f4:	6803      	ldr	r3, [r0, #0]
   d53f6:	689b      	ldr	r3, [r3, #8]
   d53f8:	4718      	bx	r3

000d53fa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d53fa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d53fc:	210d      	movs	r1, #13
{
   d53fe:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5400:	f7ff fff8 	bl	d53f4 <_ZN5Print5printEc>
  n += print('\n');
   d5404:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5406:	4604      	mov	r4, r0
  n += print('\n');
   d5408:	4628      	mov	r0, r5
   d540a:	f7ff fff3 	bl	d53f4 <_ZN5Print5printEc>
  return n;
}
   d540e:	4420      	add	r0, r4
   d5410:	bd38      	pop	{r3, r4, r5, pc}

000d5412 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5412:	b538      	push	{r3, r4, r5, lr}
   d5414:	4605      	mov	r5, r0
  return write(str);
   d5416:	f7ff ffd7 	bl	d53c8 <_ZN5Print5writeEPKc>
   d541a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d541c:	4628      	mov	r0, r5
   d541e:	f7ff ffec 	bl	d53fa <_ZN5Print7printlnEv>
  return n;
}
   d5422:	4420      	add	r0, r4
   d5424:	bd38      	pop	{r3, r4, r5, pc}

000d5426 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5426:	b530      	push	{r4, r5, lr}
   d5428:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d542a:	2300      	movs	r3, #0
   d542c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5430:	2a01      	cmp	r2, #1
   d5432:	bf98      	it	ls
   d5434:	220a      	movls	r2, #10
   d5436:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5438:	460d      	mov	r5, r1
   d543a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d543e:	fb01 5312 	mls	r3, r1, r2, r5
   d5442:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5446:	2b09      	cmp	r3, #9
   d5448:	bf94      	ite	ls
   d544a:	3330      	addls	r3, #48	; 0x30
   d544c:	3337      	addhi	r3, #55	; 0x37
   d544e:	b2db      	uxtb	r3, r3
  } while(n);
   d5450:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5452:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5456:	d9ef      	bls.n	d5438 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5458:	4621      	mov	r1, r4
   d545a:	f7ff ffb5 	bl	d53c8 <_ZN5Print5writeEPKc>
}
   d545e:	b00b      	add	sp, #44	; 0x2c
   d5460:	bd30      	pop	{r4, r5, pc}
	...

000d5464 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5468:	ec55 4b10 	vmov	r4, r5, d0
   d546c:	4606      	mov	r6, r0
   d546e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5470:	ee10 2a10 	vmov	r2, s0
   d5474:	ee10 0a10 	vmov	r0, s0
   d5478:	462b      	mov	r3, r5
   d547a:	4629      	mov	r1, r5
   d547c:	f001 fc5c 	bl	d6d38 <__aeabi_dcmpun>
   d5480:	b140      	cbz	r0, d5494 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d5482:	4953      	ldr	r1, [pc, #332]	; (d55d0 <_ZN5Print10printFloatEdh+0x16c>)
   d5484:	4630      	mov	r0, r6
   d5486:	f7ff ff9f 	bl	d53c8 <_ZN5Print5writeEPKc>
   d548a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d548c:	4650      	mov	r0, sl
   d548e:	b003      	add	sp, #12
   d5490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d5494:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d5498:	4b4e      	ldr	r3, [pc, #312]	; (d55d4 <_ZN5Print10printFloatEdh+0x170>)
   d549a:	f04f 32ff 	mov.w	r2, #4294967295
   d549e:	4620      	mov	r0, r4
   d54a0:	4649      	mov	r1, r9
   d54a2:	f001 fc49 	bl	d6d38 <__aeabi_dcmpun>
   d54a6:	b948      	cbnz	r0, d54bc <_ZN5Print10printFloatEdh+0x58>
   d54a8:	4b4a      	ldr	r3, [pc, #296]	; (d55d4 <_ZN5Print10printFloatEdh+0x170>)
   d54aa:	f04f 32ff 	mov.w	r2, #4294967295
   d54ae:	4620      	mov	r0, r4
   d54b0:	4649      	mov	r1, r9
   d54b2:	f001 fc23 	bl	d6cfc <__aeabi_dcmple>
   d54b6:	b908      	cbnz	r0, d54bc <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d54b8:	4947      	ldr	r1, [pc, #284]	; (d55d8 <_ZN5Print10printFloatEdh+0x174>)
   d54ba:	e7e3      	b.n	d5484 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d54bc:	4b47      	ldr	r3, [pc, #284]	; (d55dc <_ZN5Print10printFloatEdh+0x178>)
   d54be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d54c2:	4620      	mov	r0, r4
   d54c4:	4629      	mov	r1, r5
   d54c6:	f001 fc2d 	bl	d6d24 <__aeabi_dcmpgt>
   d54ca:	b108      	cbz	r0, d54d0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d54cc:	4944      	ldr	r1, [pc, #272]	; (d55e0 <_ZN5Print10printFloatEdh+0x17c>)
   d54ce:	e7d9      	b.n	d5484 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d54d0:	4b44      	ldr	r3, [pc, #272]	; (d55e4 <_ZN5Print10printFloatEdh+0x180>)
   d54d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d54d6:	4620      	mov	r0, r4
   d54d8:	4629      	mov	r1, r5
   d54da:	f001 fc05 	bl	d6ce8 <__aeabi_dcmplt>
   d54de:	2800      	cmp	r0, #0
   d54e0:	d1f4      	bne.n	d54cc <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d54e2:	2200      	movs	r2, #0
   d54e4:	2300      	movs	r3, #0
   d54e6:	4620      	mov	r0, r4
   d54e8:	4629      	mov	r1, r5
   d54ea:	f001 fbfd 	bl	d6ce8 <__aeabi_dcmplt>
   d54ee:	b1d0      	cbz	r0, d5526 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d54f0:	212d      	movs	r1, #45	; 0x2d
   d54f2:	4630      	mov	r0, r6
   d54f4:	f7ff ff7e 	bl	d53f4 <_ZN5Print5printEc>
     number = -number;
   d54f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d54fc:	4682      	mov	sl, r0
     number = -number;
   d54fe:	461d      	mov	r5, r3
  double rounding = 0.5;
   d5500:	4939      	ldr	r1, [pc, #228]	; (d55e8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d5502:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d55f0 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d5506:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d550a:	2000      	movs	r0, #0
    rounding /= 10.0;
   d550c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d5510:	fa5f f38b 	uxtb.w	r3, fp
   d5514:	429f      	cmp	r7, r3
   d5516:	d908      	bls.n	d552a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d5518:	4642      	mov	r2, r8
   d551a:	464b      	mov	r3, r9
   d551c:	f001 fa9c 	bl	d6a58 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d5520:	f10b 0b01 	add.w	fp, fp, #1
   d5524:	e7f4      	b.n	d5510 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d5526:	4682      	mov	sl, r0
   d5528:	e7ea      	b.n	d5500 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d552a:	4622      	mov	r2, r4
   d552c:	462b      	mov	r3, r5
   d552e:	f000 ffb3 	bl	d6498 <__adddf3>
   d5532:	460d      	mov	r5, r1
   d5534:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d5536:	f001 fc3d 	bl	d6db4 <__aeabi_d2uiz>
   d553a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d553c:	f001 f8e8 	bl	d6710 <__aeabi_ui2d>
   d5540:	4602      	mov	r2, r0
   d5542:	460b      	mov	r3, r1
   d5544:	4620      	mov	r0, r4
   d5546:	4629      	mov	r1, r5
   d5548:	f000 ffa4 	bl	d6494 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d554c:	220a      	movs	r2, #10
   d554e:	4604      	mov	r4, r0
   d5550:	460d      	mov	r5, r1
   d5552:	4630      	mov	r0, r6
   d5554:	4641      	mov	r1, r8
   d5556:	f7ff ff66 	bl	d5426 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d555a:	4482      	add	sl, r0
  if (digits > 0) {
   d555c:	b127      	cbz	r7, d5568 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d555e:	4923      	ldr	r1, [pc, #140]	; (d55ec <_ZN5Print10printFloatEdh+0x188>)
   d5560:	4630      	mov	r0, r6
   d5562:	f7ff ff31 	bl	d53c8 <_ZN5Print5writeEPKc>
    n += print(".");
   d5566:	4482      	add	sl, r0
    remainder *= 10.0;
   d5568:	f8df 9084 	ldr.w	r9, [pc, #132]	; d55f0 <_ZN5Print10printFloatEdh+0x18c>
   d556c:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d5570:	3f01      	subs	r7, #1
   d5572:	b2ff      	uxtb	r7, r7
   d5574:	2fff      	cmp	r7, #255	; 0xff
   d5576:	d089      	beq.n	d548c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d5578:	4642      	mov	r2, r8
   d557a:	464b      	mov	r3, r9
   d557c:	4620      	mov	r0, r4
   d557e:	4629      	mov	r1, r5
   d5580:	f001 f940 	bl	d6804 <__aeabi_dmul>
   d5584:	4604      	mov	r4, r0
   d5586:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d5588:	f001 fbec 	bl	d6d64 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d558c:	f1b0 0b00 	subs.w	fp, r0, #0
   d5590:	da1a      	bge.n	d55c8 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d5592:	212d      	movs	r1, #45	; 0x2d
   d5594:	4630      	mov	r0, r6
   d5596:	f7ff ff2d 	bl	d53f4 <_ZN5Print5printEc>
            val = -n;
   d559a:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d559e:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d55a0:	220a      	movs	r2, #10
   d55a2:	4630      	mov	r0, r6
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	f7ff ff3e 	bl	d5426 <_ZN5Print11printNumberEmh>
   d55aa:	9b01      	ldr	r3, [sp, #4]
   d55ac:	4418      	add	r0, r3
    n += print(toPrint);
   d55ae:	4482      	add	sl, r0
    remainder -= toPrint;
   d55b0:	4658      	mov	r0, fp
   d55b2:	f001 f8bd 	bl	d6730 <__aeabi_i2d>
   d55b6:	4602      	mov	r2, r0
   d55b8:	460b      	mov	r3, r1
   d55ba:	4620      	mov	r0, r4
   d55bc:	4629      	mov	r1, r5
   d55be:	f000 ff69 	bl	d6494 <__aeabi_dsub>
   d55c2:	4604      	mov	r4, r0
   d55c4:	460d      	mov	r5, r1
  while (digits-- > 0)
   d55c6:	e7d3      	b.n	d5570 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d55c8:	4659      	mov	r1, fp
        size_t t = 0;
   d55ca:	2300      	movs	r3, #0
   d55cc:	e7e8      	b.n	d55a0 <_ZN5Print10printFloatEdh+0x13c>
   d55ce:	bf00      	nop
   d55d0:	000d7258 	.word	0x000d7258
   d55d4:	7fefffff 	.word	0x7fefffff
   d55d8:	000d725c 	.word	0x000d725c
   d55dc:	41efffff 	.word	0x41efffff
   d55e0:	000d7260 	.word	0x000d7260
   d55e4:	c1efffff 	.word	0xc1efffff
   d55e8:	3fe00000 	.word	0x3fe00000
   d55ec:	000d7264 	.word	0x000d7264
   d55f0:	40240000 	.word	0x40240000

000d55f4 <_ZN5Print5printEfi>:
{
   d55f4:	b538      	push	{r3, r4, r5, lr}
   d55f6:	4604      	mov	r4, r0
   d55f8:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d55fc:	b2cd      	uxtb	r5, r1
   d55fe:	f001 f8a9 	bl	d6754 <__aeabi_f2d>
   d5602:	ec41 0b10 	vmov	d0, r0, r1
   d5606:	4629      	mov	r1, r5
   d5608:	4620      	mov	r0, r4
}
   d560a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d560e:	f7ff bf29 	b.w	d5464 <_ZN5Print10printFloatEdh>

000d5612 <_ZN5Print7printlnEdi>:
{
   d5612:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d5614:	b2c9      	uxtb	r1, r1
{
   d5616:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d5618:	f7ff ff24 	bl	d5464 <_ZN5Print10printFloatEdh>
   d561c:	4604      	mov	r4, r0
  n += println();
   d561e:	4628      	mov	r0, r5
   d5620:	f7ff feeb 	bl	d53fa <_ZN5Print7printlnEv>
}
   d5624:	4420      	add	r0, r4
   d5626:	bd38      	pop	{r3, r4, r5, pc}

000d5628 <_ZN5Print7printlnEfi>:
{
   d5628:	b538      	push	{r3, r4, r5, lr}
   d562a:	4604      	mov	r4, r0
   d562c:	ee10 0a10 	vmov	r0, s0
   d5630:	460d      	mov	r5, r1
    return println((double)num, digits);
   d5632:	f001 f88f 	bl	d6754 <__aeabi_f2d>
   d5636:	ec41 0b10 	vmov	d0, r0, r1
   d563a:	4629      	mov	r1, r5
   d563c:	4620      	mov	r0, r4
}
   d563e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d5642:	f7ff bfe6 	b.w	d5612 <_ZN5Print7printlnEdi>
	...

000d5648 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5648:	4b01      	ldr	r3, [pc, #4]	; (d5650 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d564a:	4a02      	ldr	r2, [pc, #8]	; (d5654 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d564c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d564e:	4770      	bx	lr
   d5650:	2003e638 	.word	0x2003e638
   d5654:	000d7266 	.word	0x000d7266

000d5658 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5658:	4b02      	ldr	r3, [pc, #8]	; (d5664 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d565a:	681a      	ldr	r2, [r3, #0]
   d565c:	4b02      	ldr	r3, [pc, #8]	; (d5668 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d565e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5660:	4770      	bx	lr
   d5662:	bf00      	nop
   d5664:	2003e49c 	.word	0x2003e49c
   d5668:	2003e63c 	.word	0x2003e63c

000d566c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d566c:	2100      	movs	r1, #0
   d566e:	f7ff bc59 	b.w	d4f24 <system_delay_ms>

000d5672 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5672:	b510      	push	{r4, lr}
   d5674:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5676:	f7ff fe4f 	bl	d5318 <_ZNSt14_Function_baseD1Ev>
   d567a:	4620      	mov	r0, r4
   d567c:	bd10      	pop	{r4, pc}
	...

000d5680 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5680:	4803      	ldr	r0, [pc, #12]	; (d5690 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5682:	4a04      	ldr	r2, [pc, #16]	; (d5694 <_GLOBAL__sub_I_RGB+0x14>)
   d5684:	4904      	ldr	r1, [pc, #16]	; (d5698 <_GLOBAL__sub_I_RGB+0x18>)
   d5686:	2300      	movs	r3, #0
   d5688:	6083      	str	r3, [r0, #8]
   d568a:	f000 bef3 	b.w	d6474 <__aeabi_atexit>
   d568e:	bf00      	nop
   d5690:	2003e640 	.word	0x2003e640
   d5694:	2003e504 	.word	0x2003e504
   d5698:	000d5673 	.word	0x000d5673

000d569c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d569c:	4b01      	ldr	r3, [pc, #4]	; (d56a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d569e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d56a0:	4770      	bx	lr
   d56a2:	bf00      	nop
   d56a4:	2003e4a0 	.word	0x2003e4a0

000d56a8 <serialEventRun>:
{
   d56a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d56aa:	4b0b      	ldr	r3, [pc, #44]	; (d56d8 <serialEventRun+0x30>)
   d56ac:	b143      	cbz	r3, d56c0 <serialEventRun+0x18>
   d56ae:	f000 fbf7 	bl	d5ea0 <_Z16_fetch_usbserialv>
   d56b2:	6803      	ldr	r3, [r0, #0]
   d56b4:	691b      	ldr	r3, [r3, #16]
   d56b6:	4798      	blx	r3
   d56b8:	2800      	cmp	r0, #0
   d56ba:	dd01      	ble.n	d56c0 <serialEventRun+0x18>
        serialEvent();
   d56bc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d56c0:	4b06      	ldr	r3, [pc, #24]	; (d56dc <serialEventRun+0x34>)
   d56c2:	b143      	cbz	r3, d56d6 <serialEventRun+0x2e>
   d56c4:	f000 fcbe 	bl	d6044 <_Z22__fetch_global_Serial1v>
   d56c8:	6803      	ldr	r3, [r0, #0]
   d56ca:	691b      	ldr	r3, [r3, #16]
   d56cc:	4798      	blx	r3
   d56ce:	2800      	cmp	r0, #0
   d56d0:	dd01      	ble.n	d56d6 <serialEventRun+0x2e>
        serialEvent1();
   d56d2:	f3af 8000 	nop.w
}
   d56d6:	bd08      	pop	{r3, pc}
	...

000d56e0 <_post_loop>:
{
   d56e0:	b508      	push	{r3, lr}
	serialEventRun();
   d56e2:	f7ff ffe1 	bl	d56a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d56e6:	f7ff fb0d 	bl	d4d04 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d56ea:	4b01      	ldr	r3, [pc, #4]	; (d56f0 <_post_loop+0x10>)
   d56ec:	6018      	str	r0, [r3, #0]
}
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	2003e7d4 	.word	0x2003e7d4

000d56f4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d56f4:	4802      	ldr	r0, [pc, #8]	; (d5700 <_Z33system_initialize_user_backup_ramv+0xc>)
   d56f6:	4a03      	ldr	r2, [pc, #12]	; (d5704 <_Z33system_initialize_user_backup_ramv+0x10>)
   d56f8:	4903      	ldr	r1, [pc, #12]	; (d5708 <_Z33system_initialize_user_backup_ramv+0x14>)
   d56fa:	1a12      	subs	r2, r2, r0
   d56fc:	f001 bbdc 	b.w	d6eb8 <memcpy>
   d5700:	2003f400 	.word	0x2003f400
   d5704:	2003f404 	.word	0x2003f404
   d5708:	000d74e0 	.word	0x000d74e0

000d570c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d570c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d570e:	2300      	movs	r3, #0
   d5710:	9300      	str	r3, [sp, #0]
   d5712:	461a      	mov	r2, r3
   d5714:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5718:	f7ff fc26 	bl	d4f68 <system_ctrl_set_result>
}
   d571c:	b003      	add	sp, #12
   d571e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5724 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5724:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5726:	8843      	ldrh	r3, [r0, #2]
   d5728:	2b0a      	cmp	r3, #10
   d572a:	d008      	beq.n	d573e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d572c:	2b50      	cmp	r3, #80	; 0x50
   d572e:	d10b      	bne.n	d5748 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5730:	4b09      	ldr	r3, [pc, #36]	; (d5758 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5732:	681b      	ldr	r3, [r3, #0]
   d5734:	b14b      	cbz	r3, d574a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5736:	b003      	add	sp, #12
   d5738:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d573c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d573e:	f7ff ffe5 	bl	d570c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5742:	b003      	add	sp, #12
   d5744:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5748:	2300      	movs	r3, #0
   d574a:	9300      	str	r3, [sp, #0]
   d574c:	461a      	mov	r2, r3
   d574e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5752:	f7ff fc09 	bl	d4f68 <system_ctrl_set_result>
}
   d5756:	e7f4      	b.n	d5742 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5758:	2003e654 	.word	0x2003e654

000d575c <module_user_init_hook>:
{
   d575c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d575e:	4c12      	ldr	r4, [pc, #72]	; (d57a8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5760:	4812      	ldr	r0, [pc, #72]	; (d57ac <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5762:	4d13      	ldr	r5, [pc, #76]	; (d57b0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5764:	2100      	movs	r1, #0
   d5766:	f7ff fcb9 	bl	d50dc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d576a:	6823      	ldr	r3, [r4, #0]
   d576c:	42ab      	cmp	r3, r5
   d576e:	4b11      	ldr	r3, [pc, #68]	; (d57b4 <module_user_init_hook+0x58>)
   d5770:	bf0c      	ite	eq
   d5772:	2201      	moveq	r2, #1
   d5774:	2200      	movne	r2, #0
   d5776:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5778:	d002      	beq.n	d5780 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d577a:	f7ff ffbb 	bl	d56f4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d577e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5780:	f7ff fab0 	bl	d4ce4 <HAL_RNG_GetRandomNumber>
   d5784:	4604      	mov	r4, r0
    srand(seed);
   d5786:	f001 fbad 	bl	d6ee4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d578a:	4b0b      	ldr	r3, [pc, #44]	; (d57b8 <module_user_init_hook+0x5c>)
   d578c:	b113      	cbz	r3, d5794 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d578e:	4620      	mov	r0, r4
   d5790:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5794:	2100      	movs	r1, #0
   d5796:	4808      	ldr	r0, [pc, #32]	; (d57b8 <module_user_init_hook+0x5c>)
   d5798:	f7ff fc68 	bl	d506c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d579c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57a0:	4806      	ldr	r0, [pc, #24]	; (d57bc <module_user_init_hook+0x60>)
   d57a2:	2100      	movs	r1, #0
   d57a4:	f7ff bbd6 	b.w	d4f54 <system_ctrl_set_app_request_handler>
   d57a8:	2003f400 	.word	0x2003f400
   d57ac:	000d569d 	.word	0x000d569d
   d57b0:	9a271c1e 	.word	0x9a271c1e
   d57b4:	2003e650 	.word	0x2003e650
   d57b8:	00000000 	.word	0x00000000
   d57bc:	000d5725 	.word	0x000d5725

000d57c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d57c0:	4770      	bx	lr

000d57c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d57c2:	2000      	movs	r0, #0
   d57c4:	4770      	bx	lr

000d57c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d57c6:	b510      	push	{r4, lr}
   d57c8:	2110      	movs	r1, #16
   d57ca:	4604      	mov	r4, r0
   d57cc:	f000 fe57 	bl	d647e <_ZdlPvj>
   d57d0:	4620      	mov	r0, r4
   d57d2:	bd10      	pop	{r4, pc}

000d57d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d57d4:	b508      	push	{r3, lr}
      { delete this; }
   d57d6:	f7ff fff6 	bl	d57c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d57da:	bd08      	pop	{r3, pc}

000d57dc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d57dc:	b530      	push	{r4, r5, lr}
        type_(type) {
   d57de:	2200      	movs	r2, #0
   d57e0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d57e4:	6002      	str	r2, [r0, #0]
   d57e6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d57e8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d57ea:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d57ec:	680c      	ldr	r4, [r1, #0]
   d57ee:	8085      	strh	r5, [r0, #4]
   d57f0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d57f2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d57f4:	bd30      	pop	{r4, r5, pc}

000d57f6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d57f6:	b510      	push	{r4, lr}
   d57f8:	4604      	mov	r4, r0
    free((void*)msg_);
   d57fa:	6800      	ldr	r0, [r0, #0]
   d57fc:	f7ff fc46 	bl	d508c <free>
}
   d5800:	4620      	mov	r0, r4
   d5802:	bd10      	pop	{r4, pc}

000d5804 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5804:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5806:	68c4      	ldr	r4, [r0, #12]
   d5808:	b1f4      	cbz	r4, d5848 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d580a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d580c:	2b02      	cmp	r3, #2
   d580e:	d103      	bne.n	d5818 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5810:	f104 000c 	add.w	r0, r4, #12
   d5814:	f7ff ffef 	bl	d57f6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5818:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d581a:	b135      	cbz	r5, d582a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d581c:	4628      	mov	r0, r5
   d581e:	f7ff fd7b 	bl	d5318 <_ZNSt14_Function_baseD1Ev>
   d5822:	2110      	movs	r1, #16
   d5824:	4628      	mov	r0, r5
   d5826:	f000 fe2a 	bl	d647e <_ZdlPvj>
   d582a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d582c:	b135      	cbz	r5, d583c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d582e:	4628      	mov	r0, r5
   d5830:	f7ff fd72 	bl	d5318 <_ZNSt14_Function_baseD1Ev>
   d5834:	2110      	movs	r1, #16
   d5836:	4628      	mov	r0, r5
   d5838:	f000 fe21 	bl	d647e <_ZdlPvj>
   d583c:	4620      	mov	r0, r4
   d583e:	2114      	movs	r1, #20
   d5840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5844:	f000 be1b 	b.w	d647e <_ZdlPvj>
   d5848:	bd38      	pop	{r3, r4, r5, pc}

000d584a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d584a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d584c:	460e      	mov	r6, r1
   d584e:	4604      	mov	r4, r0
   d5850:	f856 3b04 	ldr.w	r3, [r6], #4
   d5854:	9300      	str	r3, [sp, #0]
   d5856:	460d      	mov	r5, r1
   d5858:	a801      	add	r0, sp, #4
   d585a:	4631      	mov	r1, r6
   d585c:	f7ff fd65 	bl	d532a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5860:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5862:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5864:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5866:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5868:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d586a:	2300      	movs	r3, #0
   d586c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d586e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5870:	f7ff fd62 	bl	d5338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5874:	4630      	mov	r0, r6
   d5876:	f7ff fd5f 	bl	d5338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d587a:	4628      	mov	r0, r5
   d587c:	2108      	movs	r1, #8
   d587e:	f000 fdfe 	bl	d647e <_ZdlPvj>
        return p;
    }
   d5882:	4620      	mov	r0, r4
   d5884:	b002      	add	sp, #8
   d5886:	bd70      	pop	{r4, r5, r6, pc}

000d5888 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5888:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d588a:	b510      	push	{r4, lr}
      if (_M_empty())
   d588c:	b90a      	cbnz	r2, d5892 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d588e:	f000 fdfa 	bl	d6486 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d5892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5896:	68c3      	ldr	r3, [r0, #12]
   d5898:	4718      	bx	r3

000d589a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d589a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d589c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d589e:	f100 0110 	add.w	r1, r0, #16
   d58a2:	f7ff fff1 	bl	d5888 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d58a6:	bd08      	pop	{r3, pc}

000d58a8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d58a8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d58aa:	b510      	push	{r4, lr}
      if (_M_empty())
   d58ac:	b90a      	cbnz	r2, d58b2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d58ae:	f000 fdea 	bl	d6486 <_ZSt25__throw_bad_function_callv>
    }
   d58b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58b6:	68c3      	ldr	r3, [r0, #12]
   d58b8:	4718      	bx	r3

000d58ba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d58ba:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d58bc:	6800      	ldr	r0, [r0, #0]
   d58be:	f100 0110 	add.w	r1, r0, #16
   d58c2:	f7ff fff1 	bl	d58a8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d58c6:	bd08      	pop	{r3, pc}

000d58c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d58c8:	b538      	push	{r3, r4, r5, lr}
   d58ca:	2300      	movs	r3, #0
   d58cc:	4604      	mov	r4, r0
   d58ce:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d58d0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d58d2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d58d4:	f7fe fbdf 	bl	d4096 <_Znwj>
   d58d8:	b128      	cbz	r0, d58e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d58da:	2301      	movs	r3, #1
   d58dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d58e0:	4b02      	ldr	r3, [pc, #8]	; (d58ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d58e2:	6003      	str	r3, [r0, #0]
   d58e4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d58e6:	6020      	str	r0, [r4, #0]
	}
   d58e8:	4620      	mov	r0, r4
   d58ea:	bd38      	pop	{r3, r4, r5, pc}
   d58ec:	000d7290 	.word	0x000d7290

000d58f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d58f0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d58f2:	2300      	movs	r3, #0
   d58f4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d58f6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d58f8:	4604      	mov	r4, r0
   d58fa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d58fc:	b12b      	cbz	r3, d590a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d58fe:	2202      	movs	r2, #2
   d5900:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5902:	68eb      	ldr	r3, [r5, #12]
   d5904:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5906:	68ab      	ldr	r3, [r5, #8]
   d5908:	60a3      	str	r3, [r4, #8]
    }
   d590a:	4620      	mov	r0, r4
   d590c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5910 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5910:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5912:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5914:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5916:	4668      	mov	r0, sp
   d5918:	f7ff ff60 	bl	d57dc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d591c:	f04f 0302 	mov.w	r3, #2
   d5920:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5924:	2a00      	cmp	r2, #0
   d5926:	d103      	bne.n	d5930 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5928:	e8c4 3f41 	strexb	r1, r3, [r4]
   d592c:	2900      	cmp	r1, #0
   d592e:	d1f7      	bne.n	d5920 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5930:	d125      	bne.n	d597e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d5932:	f104 050c 	add.w	r5, r4, #12
   d5936:	4669      	mov	r1, sp
   d5938:	4628      	mov	r0, r5
   d593a:	f7ff ff4f 	bl	d57dc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d593e:	f3bf 8f5b 	dmb	ish
   d5942:	2301      	movs	r3, #1
   d5944:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5946:	2000      	movs	r0, #0
   d5948:	f104 0308 	add.w	r3, r4, #8
   d594c:	f3bf 8f5b 	dmb	ish
   d5950:	e853 6f00 	ldrex	r6, [r3]
   d5954:	e843 0200 	strex	r2, r0, [r3]
   d5958:	2a00      	cmp	r2, #0
   d595a:	d1f9      	bne.n	d5950 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d595c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5960:	b16e      	cbz	r6, d597e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5962:	f7ff fae7 	bl	d4f34 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5966:	b178      	cbz	r0, d5988 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5968:	4629      	mov	r1, r5
   d596a:	4630      	mov	r0, r6
   d596c:	f7ff ff8c 	bl	d5888 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5970:	4630      	mov	r0, r6
   d5972:	f7ff fcd1 	bl	d5318 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5976:	2110      	movs	r1, #16
   d5978:	4630      	mov	r0, r6
   d597a:	f000 fd80 	bl	d647e <_ZdlPvj>
        p_->setError(std::move(error));
   d597e:	4668      	mov	r0, sp
   d5980:	f7ff ff39 	bl	d57f6 <_ZN8particle5ErrorD1Ev>
    }
   d5984:	b009      	add	sp, #36	; 0x24
   d5986:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5988:	4631      	mov	r1, r6
   d598a:	a802      	add	r0, sp, #8
   d598c:	f7ff ffb0 	bl	d58f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5990:	68e0      	ldr	r0, [r4, #12]
   d5992:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5996:	b108      	cbz	r0, d599c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5998:	f001 fada 	bl	d6f50 <strdup>
        type_(type) {
   d599c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d599e:	2010      	movs	r0, #16
   d59a0:	f8ad 501c 	strh.w	r5, [sp, #28]
   d59a4:	f7fe fb77 	bl	d4096 <_Znwj>
   d59a8:	4605      	mov	r5, r0
   d59aa:	b1e8      	cbz	r0, d59e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d59ac:	2700      	movs	r7, #0
   d59ae:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59b0:	2018      	movs	r0, #24
   d59b2:	f7fe fb70 	bl	d4096 <_Znwj>
   d59b6:	4604      	mov	r4, r0
   d59b8:	b188      	cbz	r0, d59de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d59ba:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d59bc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d59be:	a802      	add	r0, sp, #8
   d59c0:	f7ff fcc6 	bl	d5350 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59c4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d59c6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d59c8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59ca:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d59cc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d59ce:	a906      	add	r1, sp, #24
   d59d0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d59d2:	60e3      	str	r3, [r4, #12]
   d59d4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d59d8:	9205      	str	r2, [sp, #20]
   d59da:	f7ff feff 	bl	d57dc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d59de:	4b08      	ldr	r3, [pc, #32]	; (d5a00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d59e0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d59e2:	4b08      	ldr	r3, [pc, #32]	; (d5a04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59e4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d59e6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d59e8:	a806      	add	r0, sp, #24
   d59ea:	f7ff ff04 	bl	d57f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d59ee:	a802      	add	r0, sp, #8
   d59f0:	f7ff fc92 	bl	d5318 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d59f4:	2200      	movs	r2, #0
   d59f6:	4629      	mov	r1, r5
   d59f8:	4803      	ldr	r0, [pc, #12]	; (d5a08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d59fa:	f7ff faa3 	bl	d4f44 <application_thread_invoke>
   d59fe:	e7b7      	b.n	d5970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5a00:	000d589b 	.word	0x000d589b
   d5a04:	000d5b31 	.word	0x000d5b31
   d5a08:	000d6099 	.word	0x000d6099

000d5a0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a10:	b08a      	sub	sp, #40	; 0x28
   d5a12:	4605      	mov	r5, r0
   d5a14:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5a18:	460c      	mov	r4, r1
   d5a1a:	4617      	mov	r7, r2
   d5a1c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5a1e:	f7ff fb0d 	bl	d503c <spark_cloud_flag_connected>
   d5a22:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5a24:	4682      	mov	sl, r0
   d5a26:	bb38      	cbnz	r0, d5a78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5a28:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5a2c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5a2e:	a905      	add	r1, sp, #20
   d5a30:	4630      	mov	r0, r6
   d5a32:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5a36:	f7ff fed1 	bl	d57dc <_ZN8particle5ErrorC1EOS0_>
   d5a3a:	2014      	movs	r0, #20
   d5a3c:	f7fe fb2b 	bl	d4096 <_Znwj>
   d5a40:	4604      	mov	r4, r0
   d5a42:	b148      	cbz	r0, d5a58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5a44:	2302      	movs	r3, #2
   d5a46:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5a48:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5a4a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5a4e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5a50:	4631      	mov	r1, r6
   d5a52:	300c      	adds	r0, #12
   d5a54:	f7ff fec2 	bl	d57dc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5a58:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5a5a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5a5c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5a60:	f7ff ff32 	bl	d58c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5a64:	4630      	mov	r0, r6
   d5a66:	f7ff fec6 	bl	d57f6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5a6a:	a805      	add	r0, sp, #20
   d5a6c:	f7ff fec3 	bl	d57f6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5a70:	4628      	mov	r0, r5
   d5a72:	b00a      	add	sp, #40	; 0x28
   d5a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5a78:	230c      	movs	r3, #12
   d5a7a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5a7e:	2014      	movs	r0, #20
   d5a80:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5a84:	9307      	str	r3, [sp, #28]
   d5a86:	f7fe fb06 	bl	d4096 <_Znwj>
   d5a8a:	4601      	mov	r1, r0
   d5a8c:	b128      	cbz	r0, d5a9a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5a8e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d5a92:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5a96:	f880 a001 	strb.w	sl, [r0, #1]
   d5a9a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5a9c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5a9e:	f7ff ff13 	bl	d58c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d5aa2:	4b22      	ldr	r3, [pc, #136]	; (d5b2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5aa4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5aa6:	2008      	movs	r0, #8
   d5aa8:	f7fe faf5 	bl	d4096 <_Znwj>
   d5aac:	4682      	mov	sl, r0
   d5aae:	b128      	cbz	r0, d5abc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5ab0:	9b03      	ldr	r3, [sp, #12]
   d5ab2:	f840 3b04 	str.w	r3, [r0], #4
   d5ab6:	a904      	add	r1, sp, #16
   d5ab8:	f7ff fc37 	bl	d532a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5abc:	9600      	str	r6, [sp, #0]
   d5abe:	fa5f f389 	uxtb.w	r3, r9
   d5ac2:	4642      	mov	r2, r8
   d5ac4:	4639      	mov	r1, r7
   d5ac6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5ac8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5acc:	f7ff fabe 	bl	d504c <spark_send_event>
   d5ad0:	b9b8      	cbnz	r0, d5b02 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d5ad2:	9b03      	ldr	r3, [sp, #12]
   d5ad4:	785b      	ldrb	r3, [r3, #1]
   d5ad6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5ada:	b993      	cbnz	r3, d5b02 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5adc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5ae0:	a905      	add	r1, sp, #20
   d5ae2:	a803      	add	r0, sp, #12
   d5ae4:	9205      	str	r2, [sp, #20]
   d5ae6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5aea:	f7ff ff11 	bl	d5910 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5aee:	a805      	add	r0, sp, #20
   d5af0:	f7ff fe81 	bl	d57f6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5af4:	a805      	add	r0, sp, #20
   d5af6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5af8:	f7ff fea7 	bl	d584a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5afc:	a806      	add	r0, sp, #24
   d5afe:	f7ff fc1b 	bl	d5338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b02:	9b03      	ldr	r3, [sp, #12]
   d5b04:	9305      	str	r3, [sp, #20]
   d5b06:	a904      	add	r1, sp, #16
   d5b08:	a806      	add	r0, sp, #24
   d5b0a:	f7ff fc0e 	bl	d532a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5b0e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5b10:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5b12:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5b14:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5b16:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5b18:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5b1a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5b1c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5b1e:	f7ff fc0b 	bl	d5338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b22:	a804      	add	r0, sp, #16
   d5b24:	f7ff fc08 	bl	d5338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5b28:	e7a2      	b.n	d5a70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5b2a:	bf00      	nop
   d5b2c:	000d5bf5 	.word	0x000d5bf5

000d5b30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5b30:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b34:	4605      	mov	r5, r0
	  switch (__op)
   d5b36:	d007      	beq.n	d5b48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5b38:	2a03      	cmp	r2, #3
   d5b3a:	d018      	beq.n	d5b6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5b3c:	2a01      	cmp	r2, #1
   d5b3e:	d101      	bne.n	d5b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5b40:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5b42:	6003      	str	r3, [r0, #0]
	}
   d5b44:	2000      	movs	r0, #0
   d5b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5b48:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5b4a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5b4c:	f7fe faa3 	bl	d4096 <_Znwj>
   d5b50:	4604      	mov	r4, r0
   d5b52:	b150      	cbz	r0, d5b6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5b54:	4631      	mov	r1, r6
   d5b56:	f7ff fecb 	bl	d58f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5b5a:	6930      	ldr	r0, [r6, #16]
   d5b5c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5b60:	b108      	cbz	r0, d5b66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5b62:	f001 f9f5 	bl	d6f50 <strdup>
        type_(type) {
   d5b66:	6120      	str	r0, [r4, #16]
   d5b68:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5b6a:	602c      	str	r4, [r5, #0]
	}
   d5b6c:	e7ea      	b.n	d5b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5b6e:	6804      	ldr	r4, [r0, #0]
   d5b70:	2c00      	cmp	r4, #0
   d5b72:	d0e7      	beq.n	d5b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5b74:	f104 0010 	add.w	r0, r4, #16
   d5b78:	f7ff fe3d 	bl	d57f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5b7c:	4620      	mov	r0, r4
   d5b7e:	f7ff fbcb 	bl	d5318 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5b82:	2118      	movs	r1, #24
   d5b84:	4620      	mov	r0, r4
   d5b86:	f000 fc7a 	bl	d647e <_ZdlPvj>
   d5b8a:	e7db      	b.n	d5b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5b8c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5b8c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5b8e:	2300      	movs	r3, #0
   d5b90:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5b92:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5b94:	4604      	mov	r4, r0
   d5b96:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5b98:	b12b      	cbz	r3, d5ba6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5b9a:	2202      	movs	r2, #2
   d5b9c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5b9e:	68eb      	ldr	r3, [r5, #12]
   d5ba0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5ba2:	68ab      	ldr	r3, [r5, #8]
   d5ba4:	60a3      	str	r3, [r4, #8]
    }
   d5ba6:	4620      	mov	r0, r4
   d5ba8:	bd38      	pop	{r3, r4, r5, pc}

000d5baa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5baa:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5bac:	b570      	push	{r4, r5, r6, lr}
   d5bae:	4604      	mov	r4, r0
	  switch (__op)
   d5bb0:	d007      	beq.n	d5bc2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d5bb2:	2a03      	cmp	r2, #3
   d5bb4:	d012      	beq.n	d5bdc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5bb6:	2a01      	cmp	r2, #1
   d5bb8:	d101      	bne.n	d5bbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5bba:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5bbc:	6003      	str	r3, [r0, #0]
	}
   d5bbe:	2000      	movs	r0, #0
   d5bc0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5bc2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5bc4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5bc6:	f7fe fa66 	bl	d4096 <_Znwj>
   d5bca:	4605      	mov	r5, r0
   d5bcc:	b120      	cbz	r0, d5bd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5bce:	4631      	mov	r1, r6
   d5bd0:	f7ff ffdc 	bl	d5b8c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5bd4:	7c33      	ldrb	r3, [r6, #16]
   d5bd6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5bd8:	6025      	str	r5, [r4, #0]
	}
   d5bda:	e7f0      	b.n	d5bbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5bdc:	6804      	ldr	r4, [r0, #0]
   d5bde:	2c00      	cmp	r4, #0
   d5be0:	d0ed      	beq.n	d5bbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d5be2:	4620      	mov	r0, r4
   d5be4:	f7ff fb98 	bl	d5318 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5be8:	2114      	movs	r1, #20
   d5bea:	4620      	mov	r0, r4
   d5bec:	f000 fc47 	bl	d647e <_ZdlPvj>
   d5bf0:	e7e5      	b.n	d5bbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5bf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5bf6:	b089      	sub	sp, #36	; 0x24
   d5bf8:	4604      	mov	r4, r0
   d5bfa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5bfc:	a801      	add	r0, sp, #4
   d5bfe:	4611      	mov	r1, r2
   d5c00:	f7ff fe23 	bl	d584a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5c04:	b1a4      	cbz	r4, d5c30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5c06:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5c08:	b11d      	cbz	r5, d5c12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5c0a:	4628      	mov	r0, r5
   d5c0c:	f001 f9a0 	bl	d6f50 <strdup>
   d5c10:	4605      	mov	r5, r0
   d5c12:	a801      	add	r0, sp, #4
   d5c14:	a903      	add	r1, sp, #12
        type_(type) {
   d5c16:	9503      	str	r5, [sp, #12]
   d5c18:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5c1c:	f7ff fe78 	bl	d5910 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5c20:	a803      	add	r0, sp, #12
   d5c22:	f7ff fde8 	bl	d57f6 <_ZN8particle5ErrorD1Ev>
   d5c26:	a802      	add	r0, sp, #8
   d5c28:	f7ff fb86 	bl	d5338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5c2c:	b009      	add	sp, #36	; 0x24
   d5c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5c30:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5c32:	2301      	movs	r3, #1
   d5c34:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5c38:	2a00      	cmp	r2, #0
   d5c3a:	d103      	bne.n	d5c44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5c3c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5c40:	2900      	cmp	r1, #0
   d5c42:	d1f7      	bne.n	d5c34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5c44:	d1ef      	bne.n	d5c26 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5c46:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5c48:	f3bf 8f5b 	dmb	ish
   d5c4c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5c4e:	1d2b      	adds	r3, r5, #4
   d5c50:	f3bf 8f5b 	dmb	ish
   d5c54:	e853 6f00 	ldrex	r6, [r3]
   d5c58:	e843 4200 	strex	r2, r4, [r3]
   d5c5c:	2a00      	cmp	r2, #0
   d5c5e:	d1f9      	bne.n	d5c54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5c60:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5c64:	2e00      	cmp	r6, #0
   d5c66:	d0de      	beq.n	d5c26 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5c68:	4620      	mov	r0, r4
   d5c6a:	f7ff f963 	bl	d4f34 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5c6e:	4607      	mov	r7, r0
   d5c70:	b160      	cbz	r0, d5c8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5c72:	f105 010c 	add.w	r1, r5, #12
   d5c76:	4630      	mov	r0, r6
   d5c78:	f7ff fe16 	bl	d58a8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5c7c:	4630      	mov	r0, r6
   d5c7e:	f7ff fb4b 	bl	d5318 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5c82:	2110      	movs	r1, #16
   d5c84:	4630      	mov	r0, r6
   d5c86:	f000 fbfa 	bl	d647e <_ZdlPvj>
   d5c8a:	e7cc      	b.n	d5c26 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5c8c:	4631      	mov	r1, r6
   d5c8e:	a803      	add	r0, sp, #12
   d5c90:	f7ff ff7c 	bl	d5b8c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5c94:	7b2b      	ldrb	r3, [r5, #12]
   d5c96:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5c9a:	2010      	movs	r0, #16
   d5c9c:	f7fe f9fb 	bl	d4096 <_Znwj>
   d5ca0:	4605      	mov	r5, r0
   d5ca2:	b1d0      	cbz	r0, d5cda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5ca4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5ca6:	2014      	movs	r0, #20
   d5ca8:	f7fe f9f5 	bl	d4096 <_Znwj>
   d5cac:	4604      	mov	r4, r0
   d5cae:	b178      	cbz	r0, d5cd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5cb0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5cb2:	4601      	mov	r1, r0
   d5cb4:	a803      	add	r0, sp, #12
   d5cb6:	f7ff fb4b 	bl	d5350 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5cbc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cbe:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cc0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d5cc2:	9205      	str	r2, [sp, #20]
   d5cc4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cc6:	60e3      	str	r3, [r4, #12]
   d5cc8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5ccc:	9206      	str	r2, [sp, #24]
   d5cce:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5cd0:	4b06      	ldr	r3, [pc, #24]	; (d5cec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d5cd2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5cd4:	4b06      	ldr	r3, [pc, #24]	; (d5cf0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5cd6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5cd8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5cda:	a803      	add	r0, sp, #12
   d5cdc:	f7ff fb1c 	bl	d5318 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5ce0:	2200      	movs	r2, #0
   d5ce2:	4629      	mov	r1, r5
   d5ce4:	4803      	ldr	r0, [pc, #12]	; (d5cf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5ce6:	f7ff f92d 	bl	d4f44 <application_thread_invoke>
   d5cea:	e7c7      	b.n	d5c7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5cec:	000d58bb 	.word	0x000d58bb
   d5cf0:	000d5bab 	.word	0x000d5bab
   d5cf4:	000d6099 	.word	0x000d6099

000d5cf8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5cf8:	4770      	bx	lr

000d5cfa <_ZN9IPAddressD0Ev>:
   d5cfa:	b510      	push	{r4, lr}
   d5cfc:	2118      	movs	r1, #24
   d5cfe:	4604      	mov	r4, r0
   d5d00:	f000 fbbd 	bl	d647e <_ZdlPvj>
   d5d04:	4620      	mov	r0, r4
   d5d06:	bd10      	pop	{r4, pc}

000d5d08 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d08:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5d0a:	7d03      	ldrb	r3, [r0, #20]
   d5d0c:	2b06      	cmp	r3, #6
{
   d5d0e:	b08d      	sub	sp, #52	; 0x34
   d5d10:	460e      	mov	r6, r1
   d5d12:	f100 0704 	add.w	r7, r0, #4
   d5d16:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5d1a:	d012      	beq.n	d5d42 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5d1c:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d5d20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5d24:	220a      	movs	r2, #10
   d5d26:	4630      	mov	r0, r6
   d5d28:	f7ff fb7d 	bl	d5426 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5d2c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5d2e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5d30:	d019      	beq.n	d5d66 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5d32:	2c00      	cmp	r4, #0
   d5d34:	d0f4      	beq.n	d5d20 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5d36:	212e      	movs	r1, #46	; 0x2e
   d5d38:	4630      	mov	r0, r6
   d5d3a:	f7ff fb5b 	bl	d53f4 <_ZN5Print5printEc>
   d5d3e:	4404      	add	r4, r0
   d5d40:	e7ee      	b.n	d5d20 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5d42:	232f      	movs	r3, #47	; 0x2f
   d5d44:	466a      	mov	r2, sp
   d5d46:	4639      	mov	r1, r7
   d5d48:	200a      	movs	r0, #10
		buf[0] = 0;
   d5d4a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5d4e:	f7fe fff1 	bl	d4d34 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5d52:	4668      	mov	r0, sp
   d5d54:	f001 f919 	bl	d6f8a <strlen>
   d5d58:	6833      	ldr	r3, [r6, #0]
   d5d5a:	4602      	mov	r2, r0
   d5d5c:	68db      	ldr	r3, [r3, #12]
   d5d5e:	4669      	mov	r1, sp
   d5d60:	4630      	mov	r0, r6
   d5d62:	4798      	blx	r3
   d5d64:	4604      	mov	r4, r0
    }
    return n;
}
   d5d66:	4620      	mov	r0, r4
   d5d68:	b00d      	add	sp, #52	; 0x34
   d5d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d6c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5d6c:	b510      	push	{r4, lr}
   d5d6e:	4b05      	ldr	r3, [pc, #20]	; (d5d84 <_ZN9IPAddressC1Ev+0x18>)
   d5d70:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5d72:	2211      	movs	r2, #17
   d5d74:	f840 3b04 	str.w	r3, [r0], #4
   d5d78:	2100      	movs	r1, #0
   d5d7a:	f001 f8ab 	bl	d6ed4 <memset>
}
   d5d7e:	4620      	mov	r0, r4
   d5d80:	bd10      	pop	{r4, pc}
   d5d82:	bf00      	nop
   d5d84:	000d72ac 	.word	0x000d72ac

000d5d88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5d88:	4603      	mov	r3, r0
   d5d8a:	4a07      	ldr	r2, [pc, #28]	; (d5da8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5d8c:	b510      	push	{r4, lr}
   d5d8e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5d92:	f101 0210 	add.w	r2, r1, #16
   d5d96:	f851 4b04 	ldr.w	r4, [r1], #4
   d5d9a:	f843 4b04 	str.w	r4, [r3], #4
   d5d9e:	4291      	cmp	r1, r2
   d5da0:	d1f9      	bne.n	d5d96 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5da2:	780a      	ldrb	r2, [r1, #0]
   d5da4:	701a      	strb	r2, [r3, #0]
}
   d5da6:	bd10      	pop	{r4, pc}
   d5da8:	000d72ac 	.word	0x000d72ac

000d5dac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5dac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5dae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5db2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5db6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5dba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5dbe:	2304      	movs	r3, #4
   d5dc0:	6041      	str	r1, [r0, #4]
   d5dc2:	7503      	strb	r3, [r0, #20]
}
   d5dc4:	bd10      	pop	{r4, pc}
	...

000d5dc8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5dc8:	b513      	push	{r0, r1, r4, lr}
   d5dca:	4b05      	ldr	r3, [pc, #20]	; (d5de0 <_ZN9IPAddressC1EPKh+0x18>)
   d5dcc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5dce:	78cb      	ldrb	r3, [r1, #3]
   d5dd0:	9300      	str	r3, [sp, #0]
   d5dd2:	788b      	ldrb	r3, [r1, #2]
   d5dd4:	784a      	ldrb	r2, [r1, #1]
   d5dd6:	7809      	ldrb	r1, [r1, #0]
   d5dd8:	f7ff ffe8 	bl	d5dac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5ddc:	b002      	add	sp, #8
   d5dde:	bd10      	pop	{r4, pc}
   d5de0:	000d72ac 	.word	0x000d72ac

000d5de4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5de4:	7441      	strb	r1, [r0, #17]
}
   d5de6:	4770      	bx	lr

000d5de8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5de8:	4770      	bx	lr

000d5dea <_ZN9USBSerial4readEv>:
{
   d5dea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5dec:	2100      	movs	r1, #0
   d5dee:	7c00      	ldrb	r0, [r0, #16]
   d5df0:	f7ff f878 	bl	d4ee4 <HAL_USB_USART_Receive_Data>
}
   d5df4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5df8:	bd08      	pop	{r3, pc}

000d5dfa <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5dfa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5dfc:	2101      	movs	r1, #1
   d5dfe:	7c00      	ldrb	r0, [r0, #16]
   d5e00:	f7ff f870 	bl	d4ee4 <HAL_USB_USART_Receive_Data>
}
   d5e04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5e08:	bd08      	pop	{r3, pc}

000d5e0a <_ZN9USBSerial17availableForWriteEv>:
{
   d5e0a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5e0c:	7c00      	ldrb	r0, [r0, #16]
   d5e0e:	f7ff f861 	bl	d4ed4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5e12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e16:	bd08      	pop	{r3, pc}

000d5e18 <_ZN9USBSerial9availableEv>:
{
   d5e18:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5e1a:	7c00      	ldrb	r0, [r0, #16]
   d5e1c:	f7ff f852 	bl	d4ec4 <HAL_USB_USART_Available_Data>
}
   d5e20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e24:	bd08      	pop	{r3, pc}

000d5e26 <_ZN9USBSerial5writeEh>:
{
   d5e26:	b513      	push	{r0, r1, r4, lr}
   d5e28:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5e2a:	7c00      	ldrb	r0, [r0, #16]
{
   d5e2c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5e2e:	f7ff f851 	bl	d4ed4 <HAL_USB_USART_Available_Data_For_Write>
   d5e32:	2800      	cmp	r0, #0
   d5e34:	9901      	ldr	r1, [sp, #4]
   d5e36:	dc01      	bgt.n	d5e3c <_ZN9USBSerial5writeEh+0x16>
   d5e38:	7c60      	ldrb	r0, [r4, #17]
   d5e3a:	b120      	cbz	r0, d5e46 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5e3c:	7c20      	ldrb	r0, [r4, #16]
   d5e3e:	f7ff f859 	bl	d4ef4 <HAL_USB_USART_Send_Data>
   d5e42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5e46:	b002      	add	sp, #8
   d5e48:	bd10      	pop	{r4, pc}

000d5e4a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5e4a:	7c00      	ldrb	r0, [r0, #16]
   d5e4c:	f7ff b85a 	b.w	d4f04 <HAL_USB_USART_Flush_Data>

000d5e50 <_ZN9USBSerialD0Ev>:
   d5e50:	b510      	push	{r4, lr}
   d5e52:	2114      	movs	r1, #20
   d5e54:	4604      	mov	r4, r0
   d5e56:	f000 fb12 	bl	d647e <_ZdlPvj>
   d5e5a:	4620      	mov	r0, r4
   d5e5c:	bd10      	pop	{r4, pc}
	...

000d5e60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5e60:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e66:	4604      	mov	r4, r0
   d5e68:	4608      	mov	r0, r1
   d5e6a:	2100      	movs	r1, #0
   d5e6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5e70:	4b04      	ldr	r3, [pc, #16]	; (d5e84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5e72:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5e74:	2301      	movs	r3, #1
  _serial = serial;
   d5e76:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5e78:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5e7a:	4611      	mov	r1, r2
   d5e7c:	f7ff f812 	bl	d4ea4 <HAL_USB_USART_Init>
}
   d5e80:	4620      	mov	r0, r4
   d5e82:	bd10      	pop	{r4, pc}
   d5e84:	000d72c0 	.word	0x000d72c0

000d5e88 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5e88:	7c00      	ldrb	r0, [r0, #16]
   d5e8a:	2200      	movs	r2, #0
   d5e8c:	f7ff b812 	b.w	d4eb4 <HAL_USB_USART_Begin>

000d5e90 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e90:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5e92:	2214      	movs	r2, #20
{
   d5e94:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5e96:	2100      	movs	r1, #0
   d5e98:	f001 f81c 	bl	d6ed4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5e9c:	4620      	mov	r0, r4
   d5e9e:	bd10      	pop	{r4, pc}

000d5ea0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5ea0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5ea2:	4c10      	ldr	r4, [pc, #64]	; (d5ee4 <_Z16_fetch_usbserialv+0x44>)
{
   d5ea4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5ea6:	a803      	add	r0, sp, #12
   d5ea8:	f7ff fff2 	bl	d5e90 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5eac:	7821      	ldrb	r1, [r4, #0]
   d5eae:	f3bf 8f5b 	dmb	ish
   d5eb2:	f011 0101 	ands.w	r1, r1, #1
   d5eb6:	d111      	bne.n	d5edc <_Z16_fetch_usbserialv+0x3c>
   d5eb8:	4620      	mov	r0, r4
   d5eba:	9101      	str	r1, [sp, #4]
   d5ebc:	f7fe f8f1 	bl	d40a2 <__cxa_guard_acquire>
   d5ec0:	9901      	ldr	r1, [sp, #4]
   d5ec2:	b158      	cbz	r0, d5edc <_Z16_fetch_usbserialv+0x3c>
   d5ec4:	aa03      	add	r2, sp, #12
   d5ec6:	4808      	ldr	r0, [pc, #32]	; (d5ee8 <_Z16_fetch_usbserialv+0x48>)
   d5ec8:	f7ff ffca 	bl	d5e60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5ecc:	4620      	mov	r0, r4
   d5ece:	f7fe f8ed 	bl	d40ac <__cxa_guard_release>
   d5ed2:	4a06      	ldr	r2, [pc, #24]	; (d5eec <_Z16_fetch_usbserialv+0x4c>)
   d5ed4:	4906      	ldr	r1, [pc, #24]	; (d5ef0 <_Z16_fetch_usbserialv+0x50>)
   d5ed6:	4804      	ldr	r0, [pc, #16]	; (d5ee8 <_Z16_fetch_usbserialv+0x48>)
   d5ed8:	f000 facc 	bl	d6474 <__aeabi_atexit>
	return _usbserial;
}
   d5edc:	4802      	ldr	r0, [pc, #8]	; (d5ee8 <_Z16_fetch_usbserialv+0x48>)
   d5ede:	b008      	add	sp, #32
   d5ee0:	bd10      	pop	{r4, pc}
   d5ee2:	bf00      	nop
   d5ee4:	2003e658 	.word	0x2003e658
   d5ee8:	2003e65c 	.word	0x2003e65c
   d5eec:	2003e504 	.word	0x2003e504
   d5ef0:	000d5de9 	.word	0x000d5de9

000d5ef4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5ef4:	2200      	movs	r2, #0
   d5ef6:	6840      	ldr	r0, [r0, #4]
   d5ef8:	4611      	mov	r1, r2
   d5efa:	f7ff b857 	b.w	d4fac <network_ready>

000d5efe <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d5efe:	2200      	movs	r2, #0
   d5f00:	6840      	ldr	r0, [r0, #4]
   d5f02:	4611      	mov	r1, r2
   d5f04:	f7ff b872 	b.w	d4fec <network_listening>

000d5f08 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5f08:	2200      	movs	r2, #0
   d5f0a:	6840      	ldr	r0, [r0, #4]
   d5f0c:	4611      	mov	r1, r2
   d5f0e:	f7ff b87d 	b.w	d500c <network_get_listen_timeout>

000d5f12 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5f12:	6840      	ldr	r0, [r0, #4]
   d5f14:	2200      	movs	r2, #0
   d5f16:	f7ff b871 	b.w	d4ffc <network_set_listen_timeout>

000d5f1a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f1a:	6840      	ldr	r0, [r0, #4]
   d5f1c:	2200      	movs	r2, #0
   d5f1e:	f081 0101 	eor.w	r1, r1, #1
   d5f22:	f7ff b85b 	b.w	d4fdc <network_listen>

000d5f26 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5f26:	2300      	movs	r3, #0
   d5f28:	6840      	ldr	r0, [r0, #4]
   d5f2a:	461a      	mov	r2, r3
   d5f2c:	4619      	mov	r1, r3
   d5f2e:	f7ff b84d 	b.w	d4fcc <network_off>

000d5f32 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5f32:	2300      	movs	r3, #0
   d5f34:	6840      	ldr	r0, [r0, #4]
   d5f36:	461a      	mov	r2, r3
   d5f38:	4619      	mov	r1, r3
   d5f3a:	f7ff b83f 	b.w	d4fbc <network_on>

000d5f3e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5f3e:	2200      	movs	r2, #0
   d5f40:	6840      	ldr	r0, [r0, #4]
   d5f42:	4611      	mov	r1, r2
   d5f44:	f7ff b822 	b.w	d4f8c <network_connecting>

000d5f48 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f48:	6840      	ldr	r0, [r0, #4]
   d5f4a:	2200      	movs	r2, #0
   d5f4c:	2102      	movs	r1, #2
   d5f4e:	f7ff b825 	b.w	d4f9c <network_disconnect>

000d5f52 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5f52:	2300      	movs	r3, #0
   d5f54:	6840      	ldr	r0, [r0, #4]
   d5f56:	461a      	mov	r2, r3
   d5f58:	f7ff b810 	b.w	d4f7c <network_connect>

000d5f5c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5f5c:	4b08      	ldr	r3, [pc, #32]	; (d5f80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5f5e:	b510      	push	{r4, lr}
   d5f60:	2428      	movs	r4, #40	; 0x28
   d5f62:	4622      	mov	r2, r4
   d5f64:	4618      	mov	r0, r3
   d5f66:	2100      	movs	r1, #0
   d5f68:	f000 ffb4 	bl	d6ed4 <memset>
   d5f6c:	4b05      	ldr	r3, [pc, #20]	; (d5f84 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d5f6e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d5f70:	f04f 32ff 	mov.w	r2, #4294967295
   d5f74:	6042      	str	r2, [r0, #4]
   d5f76:	2204      	movs	r2, #4
   d5f78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5f7a:	4a03      	ldr	r2, [pc, #12]	; (d5f88 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5f7c:	601a      	str	r2, [r3, #0]
   d5f7e:	bd10      	pop	{r4, pc}
   d5f80:	2003e678 	.word	0x2003e678
   d5f84:	2003e670 	.word	0x2003e670
   d5f88:	000d72f0 	.word	0x000d72f0

000d5f8c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5f8c:	4770      	bx	lr

000d5f8e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f8e:	7441      	strb	r1, [r0, #17]
}
   d5f90:	4770      	bx	lr

000d5f92 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5f92:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5f94:	7c00      	ldrb	r0, [r0, #16]
   d5f96:	f7fe ff0d 	bl	d4db4 <hal_usart_available_data_for_write>
}
   d5f9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f9e:	bd08      	pop	{r3, pc}

000d5fa0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5fa0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5fa2:	7c00      	ldrb	r0, [r0, #16]
   d5fa4:	f7fe fede 	bl	d4d64 <hal_usart_available>
}
   d5fa8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fac:	bd08      	pop	{r3, pc}

000d5fae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5fae:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5fb0:	7c00      	ldrb	r0, [r0, #16]
   d5fb2:	f7fe fee7 	bl	d4d84 <hal_usart_peek>
}
   d5fb6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5fba:	bd08      	pop	{r3, pc}

000d5fbc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5fbc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5fbe:	7c00      	ldrb	r0, [r0, #16]
   d5fc0:	f7fe fed8 	bl	d4d74 <hal_usart_read>
}
   d5fc4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5fc8:	bd08      	pop	{r3, pc}

000d5fca <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5fca:	7c00      	ldrb	r0, [r0, #16]
   d5fcc:	f7fe bee2 	b.w	d4d94 <hal_usart_flush>

000d5fd0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5fd2:	7c45      	ldrb	r5, [r0, #17]
{
   d5fd4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5fd6:	b12d      	cbz	r5, d5fe4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5fd8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5fda:	b003      	add	sp, #12
   d5fdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5fe0:	f7fe beb8 	b.w	d4d54 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5fe4:	7c00      	ldrb	r0, [r0, #16]
   d5fe6:	9101      	str	r1, [sp, #4]
   d5fe8:	f7fe fee4 	bl	d4db4 <hal_usart_available_data_for_write>
   d5fec:	2800      	cmp	r0, #0
   d5fee:	9901      	ldr	r1, [sp, #4]
   d5ff0:	dcf2      	bgt.n	d5fd8 <_ZN11USARTSerial5writeEh+0x8>
}
   d5ff2:	4628      	mov	r0, r5
   d5ff4:	b003      	add	sp, #12
   d5ff6:	bd30      	pop	{r4, r5, pc}

000d5ff8 <_ZN11USARTSerialD0Ev>:
   d5ff8:	b510      	push	{r4, lr}
   d5ffa:	2114      	movs	r1, #20
   d5ffc:	4604      	mov	r4, r0
   d5ffe:	f000 fa3e 	bl	d647e <_ZdlPvj>
   d6002:	4620      	mov	r0, r4
   d6004:	bd10      	pop	{r4, pc}
	...

000d6008 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6008:	b510      	push	{r4, lr}
   d600a:	f04f 0c00 	mov.w	ip, #0
   d600e:	4604      	mov	r4, r0
   d6010:	4608      	mov	r0, r1
   d6012:	4611      	mov	r1, r2
   d6014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6018:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d601c:	4a04      	ldr	r2, [pc, #16]	; (d6030 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d601e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6020:	2201      	movs	r2, #1
  _serial = serial;
   d6022:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6024:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6026:	461a      	mov	r2, r3
   d6028:	f7fe fe8c 	bl	d4d44 <hal_usart_init>
}
   d602c:	4620      	mov	r0, r4
   d602e:	bd10      	pop	{r4, pc}
   d6030:	000d732c 	.word	0x000d732c

000d6034 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d6034:	7c00      	ldrb	r0, [r0, #16]
   d6036:	2300      	movs	r3, #0
   d6038:	f7fe bec4 	b.w	d4dc4 <hal_usart_begin_config>

000d603c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d603c:	2200      	movs	r2, #0
   d603e:	f7ff bff9 	b.w	d6034 <_ZN11USARTSerial5beginEmm>
	...

000d6044 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6044:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6046:	4c0e      	ldr	r4, [pc, #56]	; (d6080 <_Z22__fetch_global_Serial1v+0x3c>)
   d6048:	7821      	ldrb	r1, [r4, #0]
   d604a:	f3bf 8f5b 	dmb	ish
   d604e:	f011 0101 	ands.w	r1, r1, #1
   d6052:	d112      	bne.n	d607a <_Z22__fetch_global_Serial1v+0x36>
   d6054:	4620      	mov	r0, r4
   d6056:	9101      	str	r1, [sp, #4]
   d6058:	f7fe f823 	bl	d40a2 <__cxa_guard_acquire>
   d605c:	9901      	ldr	r1, [sp, #4]
   d605e:	b160      	cbz	r0, d607a <_Z22__fetch_global_Serial1v+0x36>
   d6060:	4a08      	ldr	r2, [pc, #32]	; (d6084 <_Z22__fetch_global_Serial1v+0x40>)
   d6062:	4b09      	ldr	r3, [pc, #36]	; (d6088 <_Z22__fetch_global_Serial1v+0x44>)
   d6064:	4809      	ldr	r0, [pc, #36]	; (d608c <_Z22__fetch_global_Serial1v+0x48>)
   d6066:	f7ff ffcf 	bl	d6008 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d606a:	4620      	mov	r0, r4
   d606c:	f7fe f81e 	bl	d40ac <__cxa_guard_release>
   d6070:	4a07      	ldr	r2, [pc, #28]	; (d6090 <_Z22__fetch_global_Serial1v+0x4c>)
   d6072:	4908      	ldr	r1, [pc, #32]	; (d6094 <_Z22__fetch_global_Serial1v+0x50>)
   d6074:	4805      	ldr	r0, [pc, #20]	; (d608c <_Z22__fetch_global_Serial1v+0x48>)
   d6076:	f000 f9fd 	bl	d6474 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d607a:	4804      	ldr	r0, [pc, #16]	; (d608c <_Z22__fetch_global_Serial1v+0x48>)
   d607c:	b002      	add	sp, #8
   d607e:	bd10      	pop	{r4, pc}
   d6080:	2003e6a0 	.word	0x2003e6a0
   d6084:	2003e6a4 	.word	0x2003e6a4
   d6088:	2003e728 	.word	0x2003e728
   d608c:	2003e7ac 	.word	0x2003e7ac
   d6090:	2003e504 	.word	0x2003e504
   d6094:	000d5f8d 	.word	0x000d5f8d

000d6098 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6098:	b510      	push	{r4, lr}
      if (_M_empty())
   d609a:	6883      	ldr	r3, [r0, #8]
   d609c:	4604      	mov	r4, r0
   d609e:	b90b      	cbnz	r3, d60a4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d60a0:	f000 f9f1 	bl	d6486 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d60a4:	68c3      	ldr	r3, [r0, #12]
   d60a6:	4798      	blx	r3
      if (_M_manager)
   d60a8:	68a3      	ldr	r3, [r4, #8]
   d60aa:	b11b      	cbz	r3, d60b4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d60ac:	2203      	movs	r2, #3
   d60ae:	4621      	mov	r1, r4
   d60b0:	4620      	mov	r0, r4
   d60b2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d60b4:	4620      	mov	r0, r4
   d60b6:	2110      	movs	r1, #16
}
   d60b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d60bc:	f000 b9df 	b.w	d647e <_ZdlPvj>

000d60c0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d60c0:	4770      	bx	lr

000d60c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d60c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60c4:	4606      	mov	r6, r0
   d60c6:	4615      	mov	r5, r2
   d60c8:	460c      	mov	r4, r1
   d60ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d60cc:	42bc      	cmp	r4, r7
   d60ce:	d006      	beq.n	d60de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d60d0:	6833      	ldr	r3, [r6, #0]
   d60d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d60d6:	689b      	ldr	r3, [r3, #8]
   d60d8:	4630      	mov	r0, r6
   d60da:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d60dc:	e7f6      	b.n	d60cc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d60de:	4628      	mov	r0, r5
   d60e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d60e2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d60e2:	7c00      	ldrb	r0, [r0, #16]
   d60e4:	2200      	movs	r2, #0
   d60e6:	f7fe be8d 	b.w	d4e04 <hal_i2c_write>

000d60ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d60ea:	7c00      	ldrb	r0, [r0, #16]
   d60ec:	2100      	movs	r1, #0
   d60ee:	f7fe be91 	b.w	d4e14 <hal_i2c_available>

000d60f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d60f2:	7c00      	ldrb	r0, [r0, #16]
   d60f4:	2100      	movs	r1, #0
   d60f6:	f7fe be95 	b.w	d4e24 <hal_i2c_read>

000d60fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d60fa:	7c00      	ldrb	r0, [r0, #16]
   d60fc:	2100      	movs	r1, #0
   d60fe:	f7fe be99 	b.w	d4e34 <hal_i2c_peek>

000d6102 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6102:	7c00      	ldrb	r0, [r0, #16]
   d6104:	2100      	movs	r1, #0
   d6106:	f7fe be9d 	b.w	d4e44 <hal_i2c_flush>

000d610a <_ZN7TwoWireD0Ev>:
   d610a:	b510      	push	{r4, lr}
   d610c:	2114      	movs	r1, #20
   d610e:	4604      	mov	r4, r0
   d6110:	f000 f9b5 	bl	d647e <_ZdlPvj>
   d6114:	4620      	mov	r0, r4
   d6116:	bd10      	pop	{r4, pc}

000d6118 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6118:	b510      	push	{r4, lr}
   d611a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d611e:	4604      	mov	r4, r0
   d6120:	4608      	mov	r0, r1
   d6122:	2100      	movs	r1, #0
   d6124:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6128:	4b03      	ldr	r3, [pc, #12]	; (d6138 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d612a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d612c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d612e:	4611      	mov	r1, r2
   d6130:	f7fe fe98 	bl	d4e64 <hal_i2c_init>
}
   d6134:	4620      	mov	r0, r4
   d6136:	bd10      	pop	{r4, pc}
   d6138:	000d735c 	.word	0x000d735c

000d613c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d613c:	2300      	movs	r3, #0
   d613e:	7c00      	ldrb	r0, [r0, #16]
   d6140:	461a      	mov	r2, r3
   d6142:	4619      	mov	r1, r3
   d6144:	f7fe be46 	b.w	d4dd4 <hal_i2c_begin>

000d6148 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6148:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d614a:	2200      	movs	r2, #0
   d614c:	2314      	movs	r3, #20
   d614e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d6152:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6156:	780b      	ldrb	r3, [r1, #0]
   d6158:	f88d 3008 	strb.w	r3, [sp, #8]
   d615c:	684b      	ldr	r3, [r1, #4]
   d615e:	9303      	str	r3, [sp, #12]
   d6160:	68cb      	ldr	r3, [r1, #12]
   d6162:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6164:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6166:	7a0b      	ldrb	r3, [r1, #8]
   d6168:	9305      	str	r3, [sp, #20]
   d616a:	a901      	add	r1, sp, #4
   d616c:	f7fe fe82 	bl	d4e74 <hal_i2c_request_ex>
}
   d6170:	b007      	add	sp, #28
   d6172:	f85d fb04 	ldr.w	pc, [sp], #4

000d6176 <_ZN7TwoWire11requestFromEhjh>:
{
   d6176:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6178:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d617a:	f88d 1000 	strb.w	r1, [sp]
   d617e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6182:	9103      	str	r1, [sp, #12]
   d6184:	bf18      	it	ne
   d6186:	2301      	movne	r3, #1
   d6188:	4669      	mov	r1, sp
    size_ = size;
   d618a:	9201      	str	r2, [sp, #4]
   d618c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6190:	f7ff ffda 	bl	d6148 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6194:	b005      	add	sp, #20
   d6196:	f85d fb04 	ldr.w	pc, [sp], #4

000d619a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d619a:	2301      	movs	r3, #1
   d619c:	f7ff bfeb 	b.w	d6176 <_ZN7TwoWire11requestFromEhjh>

000d61a0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d61a0:	7c00      	ldrb	r0, [r0, #16]
   d61a2:	2200      	movs	r2, #0
   d61a4:	f7fe be1e 	b.w	d4de4 <hal_i2c_begin_transmission>

000d61a8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d61a8:	7c00      	ldrb	r0, [r0, #16]
   d61aa:	2200      	movs	r2, #0
   d61ac:	f7fe be22 	b.w	d4df4 <hal_i2c_end_transmission>

000d61b0 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d61b0:	2101      	movs	r1, #1
   d61b2:	f7ff bff9 	b.w	d61a8 <_ZN7TwoWire15endTransmissionEh>

000d61b6 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d61b6:	2300      	movs	r3, #0
   d61b8:	6840      	ldr	r0, [r0, #4]
   d61ba:	461a      	mov	r2, r3
   d61bc:	f7fe bede 	b.w	d4f7c <network_connect>

000d61c0 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d61c0:	6840      	ldr	r0, [r0, #4]
   d61c2:	2200      	movs	r2, #0
   d61c4:	2102      	movs	r1, #2
   d61c6:	f7fe bee9 	b.w	d4f9c <network_disconnect>

000d61ca <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d61ca:	2200      	movs	r2, #0
   d61cc:	6840      	ldr	r0, [r0, #4]
   d61ce:	4611      	mov	r1, r2
   d61d0:	f7fe bedc 	b.w	d4f8c <network_connecting>

000d61d4 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d61d4:	2200      	movs	r2, #0
   d61d6:	6840      	ldr	r0, [r0, #4]
   d61d8:	4611      	mov	r1, r2
   d61da:	f7fe bee7 	b.w	d4fac <network_ready>

000d61de <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d61de:	2300      	movs	r3, #0
   d61e0:	6840      	ldr	r0, [r0, #4]
   d61e2:	461a      	mov	r2, r3
   d61e4:	4619      	mov	r1, r3
   d61e6:	f7fe bee9 	b.w	d4fbc <network_on>

000d61ea <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d61ea:	2300      	movs	r3, #0
   d61ec:	6840      	ldr	r0, [r0, #4]
   d61ee:	461a      	mov	r2, r3
   d61f0:	4619      	mov	r1, r3
   d61f2:	f7fe beeb 	b.w	d4fcc <network_off>

000d61f6 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d61f6:	6840      	ldr	r0, [r0, #4]
   d61f8:	2100      	movs	r1, #0
   d61fa:	f7fe bf0f 	b.w	d501c <network_is_on>

000d61fe <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d61fe:	6840      	ldr	r0, [r0, #4]
   d6200:	2100      	movs	r1, #0
   d6202:	f7fe bf13 	b.w	d502c <network_is_off>

000d6206 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6206:	6840      	ldr	r0, [r0, #4]
   d6208:	2200      	movs	r2, #0
   d620a:	f081 0101 	eor.w	r1, r1, #1
   d620e:	f7fe bee5 	b.w	d4fdc <network_listen>

000d6212 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6212:	6840      	ldr	r0, [r0, #4]
   d6214:	2200      	movs	r2, #0
   d6216:	f7fe bef1 	b.w	d4ffc <network_set_listen_timeout>

000d621a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d621a:	2200      	movs	r2, #0
   d621c:	6840      	ldr	r0, [r0, #4]
   d621e:	4611      	mov	r1, r2
   d6220:	f7fe bef4 	b.w	d500c <network_get_listen_timeout>

000d6224 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6224:	2200      	movs	r2, #0
   d6226:	6840      	ldr	r0, [r0, #4]
   d6228:	4611      	mov	r1, r2
   d622a:	f7fe bedf 	b.w	d4fec <network_listening>

000d622e <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d622e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6232:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6234:	b095      	sub	sp, #84	; 0x54
   d6236:	4616      	mov	r6, r2
   d6238:	460d      	mov	r5, r1
   d623a:	4607      	mov	r7, r0
    IPAddress addr;
   d623c:	f7ff fd96 	bl	d5d6c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6240:	4621      	mov	r1, r4
   d6242:	2218      	movs	r2, #24
   d6244:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6246:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6248:	f000 fe44 	bl	d6ed4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d624c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d624e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6252:	4621      	mov	r1, r4
   d6254:	466b      	mov	r3, sp
   d6256:	aa0c      	add	r2, sp, #48	; 0x30
   d6258:	4630      	mov	r0, r6
   d625a:	f7fe fd1b 	bl	d4c94 <netdb_getaddrinfo>
    if (!r) {
   d625e:	4604      	mov	r4, r0
   d6260:	2800      	cmp	r0, #0
   d6262:	d14c      	bne.n	d62fe <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6264:	4602      	mov	r2, r0
   d6266:	2101      	movs	r1, #1
   d6268:	6868      	ldr	r0, [r5, #4]
   d626a:	f7fe fe9f 	bl	d4fac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d626e:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6270:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6272:	4622      	mov	r2, r4
   d6274:	6868      	ldr	r0, [r5, #4]
   d6276:	f7fe fe99 	bl	d4fac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d627a:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d627c:	4681      	mov	r9, r0
        bool ok = false;
   d627e:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6280:	2e00      	cmp	r6, #0
   d6282:	d03c      	beq.n	d62fe <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6284:	2900      	cmp	r1, #0
   d6286:	d13a      	bne.n	d62fe <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6288:	6873      	ldr	r3, [r6, #4]
   d628a:	2b02      	cmp	r3, #2
   d628c:	d003      	beq.n	d6296 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d628e:	2b0a      	cmp	r3, #10
   d6290:	d011      	beq.n	d62b6 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6292:	69f6      	ldr	r6, [r6, #28]
   d6294:	e7f4      	b.n	d6280 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6296:	f1b8 0f00 	cmp.w	r8, #0
   d629a:	d00a      	beq.n	d62b2 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d629c:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d629e:	a806      	add	r0, sp, #24
   d62a0:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d62a2:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d62a4:	f7ff fd90 	bl	d5dc8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d62a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62aa:	1d3c      	adds	r4, r7, #4
   d62ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62ae:	682b      	ldr	r3, [r5, #0]
   d62b0:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d62b2:	4641      	mov	r1, r8
   d62b4:	e7ed      	b.n	d6292 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d62b6:	f1b9 0f00 	cmp.w	r9, #0
   d62ba:	d101      	bne.n	d62c0 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d62bc:	4649      	mov	r1, r9
   d62be:	e7e8      	b.n	d6292 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d62c0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d62c2:	2210      	movs	r2, #16
   d62c4:	a801      	add	r0, sp, #4
   d62c6:	f000 fe05 	bl	d6ed4 <memset>
                    a.v = 6;
   d62ca:	2306      	movs	r3, #6
   d62cc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d62d0:	ad01      	add	r5, sp, #4
   d62d2:	f104 0308 	add.w	r3, r4, #8
   d62d6:	3418      	adds	r4, #24
   d62d8:	6818      	ldr	r0, [r3, #0]
   d62da:	6859      	ldr	r1, [r3, #4]
   d62dc:	462a      	mov	r2, r5
   d62de:	c203      	stmia	r2!, {r0, r1}
   d62e0:	3308      	adds	r3, #8
   d62e2:	42a3      	cmp	r3, r4
   d62e4:	4615      	mov	r5, r2
   d62e6:	d1f7      	bne.n	d62d8 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d62e8:	a901      	add	r1, sp, #4
   d62ea:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d62ec:	ad07      	add	r5, sp, #28
   d62ee:	f7ff fd4b 	bl	d5d88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d62f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62f4:	1d3c      	adds	r4, r7, #4
   d62f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62f8:	682b      	ldr	r3, [r5, #0]
   d62fa:	7023      	strb	r3, [r4, #0]
   d62fc:	e7de      	b.n	d62bc <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d62fe:	9800      	ldr	r0, [sp, #0]
   d6300:	f7fe fcc0 	bl	d4c84 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6304:	4638      	mov	r0, r7
   d6306:	b015      	add	sp, #84	; 0x54
   d6308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d630c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d630c:	4b02      	ldr	r3, [pc, #8]	; (d6318 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d630e:	4a03      	ldr	r2, [pc, #12]	; (d631c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6310:	601a      	str	r2, [r3, #0]
   d6312:	2200      	movs	r2, #0
   d6314:	605a      	str	r2, [r3, #4]

} // spark
   d6316:	4770      	bx	lr
   d6318:	2003e7c0 	.word	0x2003e7c0
   d631c:	000d7384 	.word	0x000d7384

000d6320 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6320:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6322:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6324:	d902      	bls.n	d632c <pinAvailable+0xc>
    return false;
   d6326:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6328:	b002      	add	sp, #8
   d632a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d632c:	f1a0 030b 	sub.w	r3, r0, #11
   d6330:	2b02      	cmp	r3, #2
   d6332:	d81a      	bhi.n	d636a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6334:	4c17      	ldr	r4, [pc, #92]	; (d6394 <pinAvailable+0x74>)
   d6336:	7821      	ldrb	r1, [r4, #0]
   d6338:	f3bf 8f5b 	dmb	ish
   d633c:	f011 0101 	ands.w	r1, r1, #1
   d6340:	d10b      	bne.n	d635a <pinAvailable+0x3a>
   d6342:	4620      	mov	r0, r4
   d6344:	9101      	str	r1, [sp, #4]
   d6346:	f7fd feac 	bl	d40a2 <__cxa_guard_acquire>
   d634a:	9901      	ldr	r1, [sp, #4]
   d634c:	b128      	cbz	r0, d635a <pinAvailable+0x3a>
   d634e:	4812      	ldr	r0, [pc, #72]	; (d6398 <pinAvailable+0x78>)
   d6350:	f7fe ff0a 	bl	d5168 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6354:	4620      	mov	r0, r4
   d6356:	f7fd fea9 	bl	d40ac <__cxa_guard_release>
   d635a:	4b0f      	ldr	r3, [pc, #60]	; (d6398 <pinAvailable+0x78>)
   d635c:	7818      	ldrb	r0, [r3, #0]
   d635e:	f7fe fd99 	bl	d4e94 <hal_spi_is_enabled>
   d6362:	2800      	cmp	r0, #0
   d6364:	d1df      	bne.n	d6326 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6366:	2001      	movs	r0, #1
   d6368:	e7de      	b.n	d6328 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d636a:	2801      	cmp	r0, #1
   d636c:	d809      	bhi.n	d6382 <pinAvailable+0x62>
   d636e:	f000 f859 	bl	d6424 <_Z19__fetch_global_Wirev>
   d6372:	2100      	movs	r1, #0
   d6374:	7c00      	ldrb	r0, [r0, #16]
   d6376:	f7fe fd6d 	bl	d4e54 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d637a:	f080 0001 	eor.w	r0, r0, #1
   d637e:	b2c0      	uxtb	r0, r0
   d6380:	e7d2      	b.n	d6328 <pinAvailable+0x8>
   d6382:	3809      	subs	r0, #9
   d6384:	2801      	cmp	r0, #1
   d6386:	d8ee      	bhi.n	d6366 <pinAvailable+0x46>
   d6388:	f7ff fe5c 	bl	d6044 <_Z22__fetch_global_Serial1v>
   d638c:	7c00      	ldrb	r0, [r0, #16]
   d638e:	f7fe fd09 	bl	d4da4 <hal_usart_is_enabled>
   d6392:	e7f2      	b.n	d637a <pinAvailable+0x5a>
   d6394:	2003e7c8 	.word	0x2003e7c8
   d6398:	2003e7cc 	.word	0x2003e7cc

000d639c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d639c:	2823      	cmp	r0, #35	; 0x23
{
   d639e:	b538      	push	{r3, r4, r5, lr}
   d63a0:	4604      	mov	r4, r0
   d63a2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d63a4:	d80a      	bhi.n	d63bc <pinMode+0x20>
   d63a6:	29ff      	cmp	r1, #255	; 0xff
   d63a8:	d008      	beq.n	d63bc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d63aa:	f7ff ffb9 	bl	d6320 <pinAvailable>
   d63ae:	b128      	cbz	r0, d63bc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d63b0:	4629      	mov	r1, r5
   d63b2:	4620      	mov	r0, r4
}
   d63b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d63b8:	f7fe bc74 	b.w	d4ca4 <HAL_Pin_Mode>
}
   d63bc:	bd38      	pop	{r3, r4, r5, pc}

000d63be <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d63be:	b538      	push	{r3, r4, r5, lr}
   d63c0:	4604      	mov	r4, r0
   d63c2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d63c4:	f7fe fc76 	bl	d4cb4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d63c8:	28ff      	cmp	r0, #255	; 0xff
   d63ca:	d010      	beq.n	d63ee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d63cc:	2806      	cmp	r0, #6
   d63ce:	d804      	bhi.n	d63da <digitalWrite+0x1c>
   d63d0:	234d      	movs	r3, #77	; 0x4d
   d63d2:	fa23 f000 	lsr.w	r0, r3, r0
   d63d6:	07c3      	lsls	r3, r0, #31
   d63d8:	d409      	bmi.n	d63ee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d63da:	4620      	mov	r0, r4
   d63dc:	f7ff ffa0 	bl	d6320 <pinAvailable>
   d63e0:	b128      	cbz	r0, d63ee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d63e2:	4629      	mov	r1, r5
   d63e4:	4620      	mov	r0, r4
}
   d63e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d63ea:	f7fe bc6b 	b.w	d4cc4 <HAL_GPIO_Write>
}
   d63ee:	bd38      	pop	{r3, r4, r5, pc}

000d63f0 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d63f0:	f7fe bc70 	b.w	d4cd4 <HAL_Pulse_In>

000d63f4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d63f4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d63f6:	2300      	movs	r3, #0
   d63f8:	2520      	movs	r5, #32
   d63fa:	8043      	strh	r3, [r0, #2]
   d63fc:	2314      	movs	r3, #20
{
   d63fe:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6400:	8003      	strh	r3, [r0, #0]
   d6402:	6085      	str	r5, [r0, #8]
   d6404:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6406:	4906      	ldr	r1, [pc, #24]	; (d6420 <_Z17acquireWireBufferv+0x2c>)
   d6408:	4628      	mov	r0, r5
   d640a:	f000 f83a 	bl	d6482 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d640e:	4904      	ldr	r1, [pc, #16]	; (d6420 <_Z17acquireWireBufferv+0x2c>)
	};
   d6410:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6412:	4628      	mov	r0, r5
   d6414:	f000 f835 	bl	d6482 <_ZnajRKSt9nothrow_t>
	};
   d6418:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d641a:	4620      	mov	r0, r4
   d641c:	bd38      	pop	{r3, r4, r5, pc}
   d641e:	bf00      	nop
   d6420:	000d73b8 	.word	0x000d73b8

000d6424 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6424:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6426:	4d0f      	ldr	r5, [pc, #60]	; (d6464 <_Z19__fetch_global_Wirev+0x40>)
   d6428:	7829      	ldrb	r1, [r5, #0]
   d642a:	f3bf 8f5b 	dmb	ish
   d642e:	f011 0401 	ands.w	r4, r1, #1
{
   d6432:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6434:	d113      	bne.n	d645e <_Z19__fetch_global_Wirev+0x3a>
   d6436:	4628      	mov	r0, r5
   d6438:	f7fd fe33 	bl	d40a2 <__cxa_guard_acquire>
   d643c:	b178      	cbz	r0, d645e <_Z19__fetch_global_Wirev+0x3a>
   d643e:	a801      	add	r0, sp, #4
   d6440:	f7ff ffd8 	bl	d63f4 <_Z17acquireWireBufferv>
   d6444:	aa01      	add	r2, sp, #4
   d6446:	4621      	mov	r1, r4
   d6448:	4807      	ldr	r0, [pc, #28]	; (d6468 <_Z19__fetch_global_Wirev+0x44>)
   d644a:	f7ff fe65 	bl	d6118 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d644e:	4628      	mov	r0, r5
   d6450:	f7fd fe2c 	bl	d40ac <__cxa_guard_release>
   d6454:	4a05      	ldr	r2, [pc, #20]	; (d646c <_Z19__fetch_global_Wirev+0x48>)
   d6456:	4906      	ldr	r1, [pc, #24]	; (d6470 <_Z19__fetch_global_Wirev+0x4c>)
   d6458:	4803      	ldr	r0, [pc, #12]	; (d6468 <_Z19__fetch_global_Wirev+0x44>)
   d645a:	f000 f80b 	bl	d6474 <__aeabi_atexit>
	return wire;
}
   d645e:	4802      	ldr	r0, [pc, #8]	; (d6468 <_Z19__fetch_global_Wirev+0x44>)
   d6460:	b007      	add	sp, #28
   d6462:	bd30      	pop	{r4, r5, pc}
   d6464:	2003e7d8 	.word	0x2003e7d8
   d6468:	2003e7dc 	.word	0x2003e7dc
   d646c:	2003e504 	.word	0x2003e504
   d6470:	000d60c1 	.word	0x000d60c1

000d6474 <__aeabi_atexit>:
   d6474:	460b      	mov	r3, r1
   d6476:	4601      	mov	r1, r0
   d6478:	4618      	mov	r0, r3
   d647a:	f000 bd0f 	b.w	d6e9c <__cxa_atexit>

000d647e <_ZdlPvj>:
   d647e:	f7fd be0e 	b.w	d409e <_ZdlPv>

000d6482 <_ZnajRKSt9nothrow_t>:
   d6482:	f7fd be0a 	b.w	d409a <_Znaj>

000d6486 <_ZSt25__throw_bad_function_callv>:
   d6486:	b508      	push	{r3, lr}
   d6488:	f7fe fe18 	bl	d50bc <abort>

000d648c <__aeabi_drsub>:
   d648c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6490:	e002      	b.n	d6498 <__adddf3>
   d6492:	bf00      	nop

000d6494 <__aeabi_dsub>:
   d6494:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6498 <__adddf3>:
   d6498:	b530      	push	{r4, r5, lr}
   d649a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d649e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d64a2:	ea94 0f05 	teq	r4, r5
   d64a6:	bf08      	it	eq
   d64a8:	ea90 0f02 	teqeq	r0, r2
   d64ac:	bf1f      	itttt	ne
   d64ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   d64b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d64b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d64ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d64be:	f000 80e2 	beq.w	d6686 <__adddf3+0x1ee>
   d64c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d64c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d64ca:	bfb8      	it	lt
   d64cc:	426d      	neglt	r5, r5
   d64ce:	dd0c      	ble.n	d64ea <__adddf3+0x52>
   d64d0:	442c      	add	r4, r5
   d64d2:	ea80 0202 	eor.w	r2, r0, r2
   d64d6:	ea81 0303 	eor.w	r3, r1, r3
   d64da:	ea82 0000 	eor.w	r0, r2, r0
   d64de:	ea83 0101 	eor.w	r1, r3, r1
   d64e2:	ea80 0202 	eor.w	r2, r0, r2
   d64e6:	ea81 0303 	eor.w	r3, r1, r3
   d64ea:	2d36      	cmp	r5, #54	; 0x36
   d64ec:	bf88      	it	hi
   d64ee:	bd30      	pophi	{r4, r5, pc}
   d64f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d64f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d64f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d64fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6500:	d002      	beq.n	d6508 <__adddf3+0x70>
   d6502:	4240      	negs	r0, r0
   d6504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6508:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d650c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6514:	d002      	beq.n	d651c <__adddf3+0x84>
   d6516:	4252      	negs	r2, r2
   d6518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d651c:	ea94 0f05 	teq	r4, r5
   d6520:	f000 80a7 	beq.w	d6672 <__adddf3+0x1da>
   d6524:	f1a4 0401 	sub.w	r4, r4, #1
   d6528:	f1d5 0e20 	rsbs	lr, r5, #32
   d652c:	db0d      	blt.n	d654a <__adddf3+0xb2>
   d652e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6532:	fa22 f205 	lsr.w	r2, r2, r5
   d6536:	1880      	adds	r0, r0, r2
   d6538:	f141 0100 	adc.w	r1, r1, #0
   d653c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6540:	1880      	adds	r0, r0, r2
   d6542:	fa43 f305 	asr.w	r3, r3, r5
   d6546:	4159      	adcs	r1, r3
   d6548:	e00e      	b.n	d6568 <__adddf3+0xd0>
   d654a:	f1a5 0520 	sub.w	r5, r5, #32
   d654e:	f10e 0e20 	add.w	lr, lr, #32
   d6552:	2a01      	cmp	r2, #1
   d6554:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6558:	bf28      	it	cs
   d655a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d655e:	fa43 f305 	asr.w	r3, r3, r5
   d6562:	18c0      	adds	r0, r0, r3
   d6564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d656c:	d507      	bpl.n	d657e <__adddf3+0xe6>
   d656e:	f04f 0e00 	mov.w	lr, #0
   d6572:	f1dc 0c00 	rsbs	ip, ip, #0
   d6576:	eb7e 0000 	sbcs.w	r0, lr, r0
   d657a:	eb6e 0101 	sbc.w	r1, lr, r1
   d657e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6582:	d31b      	bcc.n	d65bc <__adddf3+0x124>
   d6584:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6588:	d30c      	bcc.n	d65a4 <__adddf3+0x10c>
   d658a:	0849      	lsrs	r1, r1, #1
   d658c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6590:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6594:	f104 0401 	add.w	r4, r4, #1
   d6598:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d659c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d65a0:	f080 809a 	bcs.w	d66d8 <__adddf3+0x240>
   d65a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d65a8:	bf08      	it	eq
   d65aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d65ae:	f150 0000 	adcs.w	r0, r0, #0
   d65b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d65b6:	ea41 0105 	orr.w	r1, r1, r5
   d65ba:	bd30      	pop	{r4, r5, pc}
   d65bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d65c0:	4140      	adcs	r0, r0
   d65c2:	eb41 0101 	adc.w	r1, r1, r1
   d65c6:	3c01      	subs	r4, #1
   d65c8:	bf28      	it	cs
   d65ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d65ce:	d2e9      	bcs.n	d65a4 <__adddf3+0x10c>
   d65d0:	f091 0f00 	teq	r1, #0
   d65d4:	bf04      	itt	eq
   d65d6:	4601      	moveq	r1, r0
   d65d8:	2000      	moveq	r0, #0
   d65da:	fab1 f381 	clz	r3, r1
   d65de:	bf08      	it	eq
   d65e0:	3320      	addeq	r3, #32
   d65e2:	f1a3 030b 	sub.w	r3, r3, #11
   d65e6:	f1b3 0220 	subs.w	r2, r3, #32
   d65ea:	da0c      	bge.n	d6606 <__adddf3+0x16e>
   d65ec:	320c      	adds	r2, #12
   d65ee:	dd08      	ble.n	d6602 <__adddf3+0x16a>
   d65f0:	f102 0c14 	add.w	ip, r2, #20
   d65f4:	f1c2 020c 	rsb	r2, r2, #12
   d65f8:	fa01 f00c 	lsl.w	r0, r1, ip
   d65fc:	fa21 f102 	lsr.w	r1, r1, r2
   d6600:	e00c      	b.n	d661c <__adddf3+0x184>
   d6602:	f102 0214 	add.w	r2, r2, #20
   d6606:	bfd8      	it	le
   d6608:	f1c2 0c20 	rsble	ip, r2, #32
   d660c:	fa01 f102 	lsl.w	r1, r1, r2
   d6610:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6614:	bfdc      	itt	le
   d6616:	ea41 010c 	orrle.w	r1, r1, ip
   d661a:	4090      	lslle	r0, r2
   d661c:	1ae4      	subs	r4, r4, r3
   d661e:	bfa2      	ittt	ge
   d6620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6624:	4329      	orrge	r1, r5
   d6626:	bd30      	popge	{r4, r5, pc}
   d6628:	ea6f 0404 	mvn.w	r4, r4
   d662c:	3c1f      	subs	r4, #31
   d662e:	da1c      	bge.n	d666a <__adddf3+0x1d2>
   d6630:	340c      	adds	r4, #12
   d6632:	dc0e      	bgt.n	d6652 <__adddf3+0x1ba>
   d6634:	f104 0414 	add.w	r4, r4, #20
   d6638:	f1c4 0220 	rsb	r2, r4, #32
   d663c:	fa20 f004 	lsr.w	r0, r0, r4
   d6640:	fa01 f302 	lsl.w	r3, r1, r2
   d6644:	ea40 0003 	orr.w	r0, r0, r3
   d6648:	fa21 f304 	lsr.w	r3, r1, r4
   d664c:	ea45 0103 	orr.w	r1, r5, r3
   d6650:	bd30      	pop	{r4, r5, pc}
   d6652:	f1c4 040c 	rsb	r4, r4, #12
   d6656:	f1c4 0220 	rsb	r2, r4, #32
   d665a:	fa20 f002 	lsr.w	r0, r0, r2
   d665e:	fa01 f304 	lsl.w	r3, r1, r4
   d6662:	ea40 0003 	orr.w	r0, r0, r3
   d6666:	4629      	mov	r1, r5
   d6668:	bd30      	pop	{r4, r5, pc}
   d666a:	fa21 f004 	lsr.w	r0, r1, r4
   d666e:	4629      	mov	r1, r5
   d6670:	bd30      	pop	{r4, r5, pc}
   d6672:	f094 0f00 	teq	r4, #0
   d6676:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d667a:	bf06      	itte	eq
   d667c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6680:	3401      	addeq	r4, #1
   d6682:	3d01      	subne	r5, #1
   d6684:	e74e      	b.n	d6524 <__adddf3+0x8c>
   d6686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d668a:	bf18      	it	ne
   d668c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6690:	d029      	beq.n	d66e6 <__adddf3+0x24e>
   d6692:	ea94 0f05 	teq	r4, r5
   d6696:	bf08      	it	eq
   d6698:	ea90 0f02 	teqeq	r0, r2
   d669c:	d005      	beq.n	d66aa <__adddf3+0x212>
   d669e:	ea54 0c00 	orrs.w	ip, r4, r0
   d66a2:	bf04      	itt	eq
   d66a4:	4619      	moveq	r1, r3
   d66a6:	4610      	moveq	r0, r2
   d66a8:	bd30      	pop	{r4, r5, pc}
   d66aa:	ea91 0f03 	teq	r1, r3
   d66ae:	bf1e      	ittt	ne
   d66b0:	2100      	movne	r1, #0
   d66b2:	2000      	movne	r0, #0
   d66b4:	bd30      	popne	{r4, r5, pc}
   d66b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d66ba:	d105      	bne.n	d66c8 <__adddf3+0x230>
   d66bc:	0040      	lsls	r0, r0, #1
   d66be:	4149      	adcs	r1, r1
   d66c0:	bf28      	it	cs
   d66c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d66c6:	bd30      	pop	{r4, r5, pc}
   d66c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d66cc:	bf3c      	itt	cc
   d66ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d66d2:	bd30      	popcc	{r4, r5, pc}
   d66d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d66d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d66dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d66e0:	f04f 0000 	mov.w	r0, #0
   d66e4:	bd30      	pop	{r4, r5, pc}
   d66e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d66ea:	bf1a      	itte	ne
   d66ec:	4619      	movne	r1, r3
   d66ee:	4610      	movne	r0, r2
   d66f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d66f4:	bf1c      	itt	ne
   d66f6:	460b      	movne	r3, r1
   d66f8:	4602      	movne	r2, r0
   d66fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d66fe:	bf06      	itte	eq
   d6700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6704:	ea91 0f03 	teqeq	r1, r3
   d6708:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d670c:	bd30      	pop	{r4, r5, pc}
   d670e:	bf00      	nop

000d6710 <__aeabi_ui2d>:
   d6710:	f090 0f00 	teq	r0, #0
   d6714:	bf04      	itt	eq
   d6716:	2100      	moveq	r1, #0
   d6718:	4770      	bxeq	lr
   d671a:	b530      	push	{r4, r5, lr}
   d671c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6720:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6724:	f04f 0500 	mov.w	r5, #0
   d6728:	f04f 0100 	mov.w	r1, #0
   d672c:	e750      	b.n	d65d0 <__adddf3+0x138>
   d672e:	bf00      	nop

000d6730 <__aeabi_i2d>:
   d6730:	f090 0f00 	teq	r0, #0
   d6734:	bf04      	itt	eq
   d6736:	2100      	moveq	r1, #0
   d6738:	4770      	bxeq	lr
   d673a:	b530      	push	{r4, r5, lr}
   d673c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6740:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6744:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6748:	bf48      	it	mi
   d674a:	4240      	negmi	r0, r0
   d674c:	f04f 0100 	mov.w	r1, #0
   d6750:	e73e      	b.n	d65d0 <__adddf3+0x138>
   d6752:	bf00      	nop

000d6754 <__aeabi_f2d>:
   d6754:	0042      	lsls	r2, r0, #1
   d6756:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d675a:	ea4f 0131 	mov.w	r1, r1, rrx
   d675e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6762:	bf1f      	itttt	ne
   d6764:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6768:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d676c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6770:	4770      	bxne	lr
   d6772:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6776:	bf08      	it	eq
   d6778:	4770      	bxeq	lr
   d677a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d677e:	bf04      	itt	eq
   d6780:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6784:	4770      	bxeq	lr
   d6786:	b530      	push	{r4, r5, lr}
   d6788:	f44f 7460 	mov.w	r4, #896	; 0x380
   d678c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6794:	e71c      	b.n	d65d0 <__adddf3+0x138>
   d6796:	bf00      	nop

000d6798 <__aeabi_ul2d>:
   d6798:	ea50 0201 	orrs.w	r2, r0, r1
   d679c:	bf08      	it	eq
   d679e:	4770      	bxeq	lr
   d67a0:	b530      	push	{r4, r5, lr}
   d67a2:	f04f 0500 	mov.w	r5, #0
   d67a6:	e00a      	b.n	d67be <__aeabi_l2d+0x16>

000d67a8 <__aeabi_l2d>:
   d67a8:	ea50 0201 	orrs.w	r2, r0, r1
   d67ac:	bf08      	it	eq
   d67ae:	4770      	bxeq	lr
   d67b0:	b530      	push	{r4, r5, lr}
   d67b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d67b6:	d502      	bpl.n	d67be <__aeabi_l2d+0x16>
   d67b8:	4240      	negs	r0, r0
   d67ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d67be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d67ca:	f43f aed8 	beq.w	d657e <__adddf3+0xe6>
   d67ce:	f04f 0203 	mov.w	r2, #3
   d67d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d67d6:	bf18      	it	ne
   d67d8:	3203      	addne	r2, #3
   d67da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d67de:	bf18      	it	ne
   d67e0:	3203      	addne	r2, #3
   d67e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d67e6:	f1c2 0320 	rsb	r3, r2, #32
   d67ea:	fa00 fc03 	lsl.w	ip, r0, r3
   d67ee:	fa20 f002 	lsr.w	r0, r0, r2
   d67f2:	fa01 fe03 	lsl.w	lr, r1, r3
   d67f6:	ea40 000e 	orr.w	r0, r0, lr
   d67fa:	fa21 f102 	lsr.w	r1, r1, r2
   d67fe:	4414      	add	r4, r2
   d6800:	e6bd      	b.n	d657e <__adddf3+0xe6>
   d6802:	bf00      	nop

000d6804 <__aeabi_dmul>:
   d6804:	b570      	push	{r4, r5, r6, lr}
   d6806:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d680a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d680e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6812:	bf1d      	ittte	ne
   d6814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6818:	ea94 0f0c 	teqne	r4, ip
   d681c:	ea95 0f0c 	teqne	r5, ip
   d6820:	f000 f8de 	bleq	d69e0 <__aeabi_dmul+0x1dc>
   d6824:	442c      	add	r4, r5
   d6826:	ea81 0603 	eor.w	r6, r1, r3
   d682a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d682e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6832:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6836:	bf18      	it	ne
   d6838:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d683c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6844:	d038      	beq.n	d68b8 <__aeabi_dmul+0xb4>
   d6846:	fba0 ce02 	umull	ip, lr, r0, r2
   d684a:	f04f 0500 	mov.w	r5, #0
   d684e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6852:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6856:	fbe0 e503 	umlal	lr, r5, r0, r3
   d685a:	f04f 0600 	mov.w	r6, #0
   d685e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6862:	f09c 0f00 	teq	ip, #0
   d6866:	bf18      	it	ne
   d6868:	f04e 0e01 	orrne.w	lr, lr, #1
   d686c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6870:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6874:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6878:	d204      	bcs.n	d6884 <__aeabi_dmul+0x80>
   d687a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d687e:	416d      	adcs	r5, r5
   d6880:	eb46 0606 	adc.w	r6, r6, r6
   d6884:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6888:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d688c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6890:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6894:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6898:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d689c:	bf88      	it	hi
   d689e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d68a2:	d81e      	bhi.n	d68e2 <__aeabi_dmul+0xde>
   d68a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d68a8:	bf08      	it	eq
   d68aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d68ae:	f150 0000 	adcs.w	r0, r0, #0
   d68b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d68b6:	bd70      	pop	{r4, r5, r6, pc}
   d68b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d68bc:	ea46 0101 	orr.w	r1, r6, r1
   d68c0:	ea40 0002 	orr.w	r0, r0, r2
   d68c4:	ea81 0103 	eor.w	r1, r1, r3
   d68c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d68cc:	bfc2      	ittt	gt
   d68ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   d68d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d68d6:	bd70      	popgt	{r4, r5, r6, pc}
   d68d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d68dc:	f04f 0e00 	mov.w	lr, #0
   d68e0:	3c01      	subs	r4, #1
   d68e2:	f300 80ab 	bgt.w	d6a3c <__aeabi_dmul+0x238>
   d68e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d68ea:	bfde      	ittt	le
   d68ec:	2000      	movle	r0, #0
   d68ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d68f2:	bd70      	pople	{r4, r5, r6, pc}
   d68f4:	f1c4 0400 	rsb	r4, r4, #0
   d68f8:	3c20      	subs	r4, #32
   d68fa:	da35      	bge.n	d6968 <__aeabi_dmul+0x164>
   d68fc:	340c      	adds	r4, #12
   d68fe:	dc1b      	bgt.n	d6938 <__aeabi_dmul+0x134>
   d6900:	f104 0414 	add.w	r4, r4, #20
   d6904:	f1c4 0520 	rsb	r5, r4, #32
   d6908:	fa00 f305 	lsl.w	r3, r0, r5
   d690c:	fa20 f004 	lsr.w	r0, r0, r4
   d6910:	fa01 f205 	lsl.w	r2, r1, r5
   d6914:	ea40 0002 	orr.w	r0, r0, r2
   d6918:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d691c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6920:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6924:	fa21 f604 	lsr.w	r6, r1, r4
   d6928:	eb42 0106 	adc.w	r1, r2, r6
   d692c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6930:	bf08      	it	eq
   d6932:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6936:	bd70      	pop	{r4, r5, r6, pc}
   d6938:	f1c4 040c 	rsb	r4, r4, #12
   d693c:	f1c4 0520 	rsb	r5, r4, #32
   d6940:	fa00 f304 	lsl.w	r3, r0, r4
   d6944:	fa20 f005 	lsr.w	r0, r0, r5
   d6948:	fa01 f204 	lsl.w	r2, r1, r4
   d694c:	ea40 0002 	orr.w	r0, r0, r2
   d6950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6954:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6958:	f141 0100 	adc.w	r1, r1, #0
   d695c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6960:	bf08      	it	eq
   d6962:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6966:	bd70      	pop	{r4, r5, r6, pc}
   d6968:	f1c4 0520 	rsb	r5, r4, #32
   d696c:	fa00 f205 	lsl.w	r2, r0, r5
   d6970:	ea4e 0e02 	orr.w	lr, lr, r2
   d6974:	fa20 f304 	lsr.w	r3, r0, r4
   d6978:	fa01 f205 	lsl.w	r2, r1, r5
   d697c:	ea43 0302 	orr.w	r3, r3, r2
   d6980:	fa21 f004 	lsr.w	r0, r1, r4
   d6984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6988:	fa21 f204 	lsr.w	r2, r1, r4
   d698c:	ea20 0002 	bic.w	r0, r0, r2
   d6990:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6994:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6998:	bf08      	it	eq
   d699a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d699e:	bd70      	pop	{r4, r5, r6, pc}
   d69a0:	f094 0f00 	teq	r4, #0
   d69a4:	d10f      	bne.n	d69c6 <__aeabi_dmul+0x1c2>
   d69a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d69aa:	0040      	lsls	r0, r0, #1
   d69ac:	eb41 0101 	adc.w	r1, r1, r1
   d69b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d69b4:	bf08      	it	eq
   d69b6:	3c01      	subeq	r4, #1
   d69b8:	d0f7      	beq.n	d69aa <__aeabi_dmul+0x1a6>
   d69ba:	ea41 0106 	orr.w	r1, r1, r6
   d69be:	f095 0f00 	teq	r5, #0
   d69c2:	bf18      	it	ne
   d69c4:	4770      	bxne	lr
   d69c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d69ca:	0052      	lsls	r2, r2, #1
   d69cc:	eb43 0303 	adc.w	r3, r3, r3
   d69d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d69d4:	bf08      	it	eq
   d69d6:	3d01      	subeq	r5, #1
   d69d8:	d0f7      	beq.n	d69ca <__aeabi_dmul+0x1c6>
   d69da:	ea43 0306 	orr.w	r3, r3, r6
   d69de:	4770      	bx	lr
   d69e0:	ea94 0f0c 	teq	r4, ip
   d69e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d69e8:	bf18      	it	ne
   d69ea:	ea95 0f0c 	teqne	r5, ip
   d69ee:	d00c      	beq.n	d6a0a <__aeabi_dmul+0x206>
   d69f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d69f4:	bf18      	it	ne
   d69f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d69fa:	d1d1      	bne.n	d69a0 <__aeabi_dmul+0x19c>
   d69fc:	ea81 0103 	eor.w	r1, r1, r3
   d6a00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a04:	f04f 0000 	mov.w	r0, #0
   d6a08:	bd70      	pop	{r4, r5, r6, pc}
   d6a0a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a0e:	bf06      	itte	eq
   d6a10:	4610      	moveq	r0, r2
   d6a12:	4619      	moveq	r1, r3
   d6a14:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a18:	d019      	beq.n	d6a4e <__aeabi_dmul+0x24a>
   d6a1a:	ea94 0f0c 	teq	r4, ip
   d6a1e:	d102      	bne.n	d6a26 <__aeabi_dmul+0x222>
   d6a20:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6a24:	d113      	bne.n	d6a4e <__aeabi_dmul+0x24a>
   d6a26:	ea95 0f0c 	teq	r5, ip
   d6a2a:	d105      	bne.n	d6a38 <__aeabi_dmul+0x234>
   d6a2c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6a30:	bf1c      	itt	ne
   d6a32:	4610      	movne	r0, r2
   d6a34:	4619      	movne	r1, r3
   d6a36:	d10a      	bne.n	d6a4e <__aeabi_dmul+0x24a>
   d6a38:	ea81 0103 	eor.w	r1, r1, r3
   d6a3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a40:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6a44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6a48:	f04f 0000 	mov.w	r0, #0
   d6a4c:	bd70      	pop	{r4, r5, r6, pc}
   d6a4e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6a52:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6a56:	bd70      	pop	{r4, r5, r6, pc}

000d6a58 <__aeabi_ddiv>:
   d6a58:	b570      	push	{r4, r5, r6, lr}
   d6a5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6a5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6a62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6a66:	bf1d      	ittte	ne
   d6a68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6a6c:	ea94 0f0c 	teqne	r4, ip
   d6a70:	ea95 0f0c 	teqne	r5, ip
   d6a74:	f000 f8a7 	bleq	d6bc6 <__aeabi_ddiv+0x16e>
   d6a78:	eba4 0405 	sub.w	r4, r4, r5
   d6a7c:	ea81 0e03 	eor.w	lr, r1, r3
   d6a80:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6a84:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6a88:	f000 8088 	beq.w	d6b9c <__aeabi_ddiv+0x144>
   d6a8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6a90:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6a94:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6a98:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6a9c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6aa0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6aa4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6aa8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6aac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6ab0:	429d      	cmp	r5, r3
   d6ab2:	bf08      	it	eq
   d6ab4:	4296      	cmpeq	r6, r2
   d6ab6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6aba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6abe:	d202      	bcs.n	d6ac6 <__aeabi_ddiv+0x6e>
   d6ac0:	085b      	lsrs	r3, r3, #1
   d6ac2:	ea4f 0232 	mov.w	r2, r2, rrx
   d6ac6:	1ab6      	subs	r6, r6, r2
   d6ac8:	eb65 0503 	sbc.w	r5, r5, r3
   d6acc:	085b      	lsrs	r3, r3, #1
   d6ace:	ea4f 0232 	mov.w	r2, r2, rrx
   d6ad2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6ad6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6ada:	ebb6 0e02 	subs.w	lr, r6, r2
   d6ade:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6ae2:	bf22      	ittt	cs
   d6ae4:	1ab6      	subcs	r6, r6, r2
   d6ae6:	4675      	movcs	r5, lr
   d6ae8:	ea40 000c 	orrcs.w	r0, r0, ip
   d6aec:	085b      	lsrs	r3, r3, #1
   d6aee:	ea4f 0232 	mov.w	r2, r2, rrx
   d6af2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6af6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6afa:	bf22      	ittt	cs
   d6afc:	1ab6      	subcs	r6, r6, r2
   d6afe:	4675      	movcs	r5, lr
   d6b00:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6b04:	085b      	lsrs	r3, r3, #1
   d6b06:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b0a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b12:	bf22      	ittt	cs
   d6b14:	1ab6      	subcs	r6, r6, r2
   d6b16:	4675      	movcs	r5, lr
   d6b18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6b1c:	085b      	lsrs	r3, r3, #1
   d6b1e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b22:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b26:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b2a:	bf22      	ittt	cs
   d6b2c:	1ab6      	subcs	r6, r6, r2
   d6b2e:	4675      	movcs	r5, lr
   d6b30:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6b34:	ea55 0e06 	orrs.w	lr, r5, r6
   d6b38:	d018      	beq.n	d6b6c <__aeabi_ddiv+0x114>
   d6b3a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6b3e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6b42:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6b46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6b4a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6b4e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6b52:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6b56:	d1c0      	bne.n	d6ada <__aeabi_ddiv+0x82>
   d6b58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6b5c:	d10b      	bne.n	d6b76 <__aeabi_ddiv+0x11e>
   d6b5e:	ea41 0100 	orr.w	r1, r1, r0
   d6b62:	f04f 0000 	mov.w	r0, #0
   d6b66:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6b6a:	e7b6      	b.n	d6ada <__aeabi_ddiv+0x82>
   d6b6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6b70:	bf04      	itt	eq
   d6b72:	4301      	orreq	r1, r0
   d6b74:	2000      	moveq	r0, #0
   d6b76:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6b7a:	bf88      	it	hi
   d6b7c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6b80:	f63f aeaf 	bhi.w	d68e2 <__aeabi_dmul+0xde>
   d6b84:	ebb5 0c03 	subs.w	ip, r5, r3
   d6b88:	bf04      	itt	eq
   d6b8a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6b8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6b92:	f150 0000 	adcs.w	r0, r0, #0
   d6b96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6b9a:	bd70      	pop	{r4, r5, r6, pc}
   d6b9c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6ba0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6ba4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6ba8:	bfc2      	ittt	gt
   d6baa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6bae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6bb2:	bd70      	popgt	{r4, r5, r6, pc}
   d6bb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6bb8:	f04f 0e00 	mov.w	lr, #0
   d6bbc:	3c01      	subs	r4, #1
   d6bbe:	e690      	b.n	d68e2 <__aeabi_dmul+0xde>
   d6bc0:	ea45 0e06 	orr.w	lr, r5, r6
   d6bc4:	e68d      	b.n	d68e2 <__aeabi_dmul+0xde>
   d6bc6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6bca:	ea94 0f0c 	teq	r4, ip
   d6bce:	bf08      	it	eq
   d6bd0:	ea95 0f0c 	teqeq	r5, ip
   d6bd4:	f43f af3b 	beq.w	d6a4e <__aeabi_dmul+0x24a>
   d6bd8:	ea94 0f0c 	teq	r4, ip
   d6bdc:	d10a      	bne.n	d6bf4 <__aeabi_ddiv+0x19c>
   d6bde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6be2:	f47f af34 	bne.w	d6a4e <__aeabi_dmul+0x24a>
   d6be6:	ea95 0f0c 	teq	r5, ip
   d6bea:	f47f af25 	bne.w	d6a38 <__aeabi_dmul+0x234>
   d6bee:	4610      	mov	r0, r2
   d6bf0:	4619      	mov	r1, r3
   d6bf2:	e72c      	b.n	d6a4e <__aeabi_dmul+0x24a>
   d6bf4:	ea95 0f0c 	teq	r5, ip
   d6bf8:	d106      	bne.n	d6c08 <__aeabi_ddiv+0x1b0>
   d6bfa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6bfe:	f43f aefd 	beq.w	d69fc <__aeabi_dmul+0x1f8>
   d6c02:	4610      	mov	r0, r2
   d6c04:	4619      	mov	r1, r3
   d6c06:	e722      	b.n	d6a4e <__aeabi_dmul+0x24a>
   d6c08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6c0c:	bf18      	it	ne
   d6c0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6c12:	f47f aec5 	bne.w	d69a0 <__aeabi_dmul+0x19c>
   d6c16:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6c1a:	f47f af0d 	bne.w	d6a38 <__aeabi_dmul+0x234>
   d6c1e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6c22:	f47f aeeb 	bne.w	d69fc <__aeabi_dmul+0x1f8>
   d6c26:	e712      	b.n	d6a4e <__aeabi_dmul+0x24a>

000d6c28 <__gedf2>:
   d6c28:	f04f 3cff 	mov.w	ip, #4294967295
   d6c2c:	e006      	b.n	d6c3c <__cmpdf2+0x4>
   d6c2e:	bf00      	nop

000d6c30 <__ledf2>:
   d6c30:	f04f 0c01 	mov.w	ip, #1
   d6c34:	e002      	b.n	d6c3c <__cmpdf2+0x4>
   d6c36:	bf00      	nop

000d6c38 <__cmpdf2>:
   d6c38:	f04f 0c01 	mov.w	ip, #1
   d6c3c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6c40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6c44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6c48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6c4c:	bf18      	it	ne
   d6c4e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6c52:	d01b      	beq.n	d6c8c <__cmpdf2+0x54>
   d6c54:	b001      	add	sp, #4
   d6c56:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6c5a:	bf0c      	ite	eq
   d6c5c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6c60:	ea91 0f03 	teqne	r1, r3
   d6c64:	bf02      	ittt	eq
   d6c66:	ea90 0f02 	teqeq	r0, r2
   d6c6a:	2000      	moveq	r0, #0
   d6c6c:	4770      	bxeq	lr
   d6c6e:	f110 0f00 	cmn.w	r0, #0
   d6c72:	ea91 0f03 	teq	r1, r3
   d6c76:	bf58      	it	pl
   d6c78:	4299      	cmppl	r1, r3
   d6c7a:	bf08      	it	eq
   d6c7c:	4290      	cmpeq	r0, r2
   d6c7e:	bf2c      	ite	cs
   d6c80:	17d8      	asrcs	r0, r3, #31
   d6c82:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6c86:	f040 0001 	orr.w	r0, r0, #1
   d6c8a:	4770      	bx	lr
   d6c8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6c90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6c94:	d102      	bne.n	d6c9c <__cmpdf2+0x64>
   d6c96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6c9a:	d107      	bne.n	d6cac <__cmpdf2+0x74>
   d6c9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6ca0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ca4:	d1d6      	bne.n	d6c54 <__cmpdf2+0x1c>
   d6ca6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6caa:	d0d3      	beq.n	d6c54 <__cmpdf2+0x1c>
   d6cac:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6cb0:	4770      	bx	lr
   d6cb2:	bf00      	nop

000d6cb4 <__aeabi_cdrcmple>:
   d6cb4:	4684      	mov	ip, r0
   d6cb6:	4610      	mov	r0, r2
   d6cb8:	4662      	mov	r2, ip
   d6cba:	468c      	mov	ip, r1
   d6cbc:	4619      	mov	r1, r3
   d6cbe:	4663      	mov	r3, ip
   d6cc0:	e000      	b.n	d6cc4 <__aeabi_cdcmpeq>
   d6cc2:	bf00      	nop

000d6cc4 <__aeabi_cdcmpeq>:
   d6cc4:	b501      	push	{r0, lr}
   d6cc6:	f7ff ffb7 	bl	d6c38 <__cmpdf2>
   d6cca:	2800      	cmp	r0, #0
   d6ccc:	bf48      	it	mi
   d6cce:	f110 0f00 	cmnmi.w	r0, #0
   d6cd2:	bd01      	pop	{r0, pc}

000d6cd4 <__aeabi_dcmpeq>:
   d6cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6cd8:	f7ff fff4 	bl	d6cc4 <__aeabi_cdcmpeq>
   d6cdc:	bf0c      	ite	eq
   d6cde:	2001      	moveq	r0, #1
   d6ce0:	2000      	movne	r0, #0
   d6ce2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ce6:	bf00      	nop

000d6ce8 <__aeabi_dcmplt>:
   d6ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6cec:	f7ff ffea 	bl	d6cc4 <__aeabi_cdcmpeq>
   d6cf0:	bf34      	ite	cc
   d6cf2:	2001      	movcc	r0, #1
   d6cf4:	2000      	movcs	r0, #0
   d6cf6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6cfa:	bf00      	nop

000d6cfc <__aeabi_dcmple>:
   d6cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d00:	f7ff ffe0 	bl	d6cc4 <__aeabi_cdcmpeq>
   d6d04:	bf94      	ite	ls
   d6d06:	2001      	movls	r0, #1
   d6d08:	2000      	movhi	r0, #0
   d6d0a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d0e:	bf00      	nop

000d6d10 <__aeabi_dcmpge>:
   d6d10:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d14:	f7ff ffce 	bl	d6cb4 <__aeabi_cdrcmple>
   d6d18:	bf94      	ite	ls
   d6d1a:	2001      	movls	r0, #1
   d6d1c:	2000      	movhi	r0, #0
   d6d1e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d22:	bf00      	nop

000d6d24 <__aeabi_dcmpgt>:
   d6d24:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d28:	f7ff ffc4 	bl	d6cb4 <__aeabi_cdrcmple>
   d6d2c:	bf34      	ite	cc
   d6d2e:	2001      	movcc	r0, #1
   d6d30:	2000      	movcs	r0, #0
   d6d32:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d36:	bf00      	nop

000d6d38 <__aeabi_dcmpun>:
   d6d38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6d3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d40:	d102      	bne.n	d6d48 <__aeabi_dcmpun+0x10>
   d6d42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6d46:	d10a      	bne.n	d6d5e <__aeabi_dcmpun+0x26>
   d6d48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6d4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d50:	d102      	bne.n	d6d58 <__aeabi_dcmpun+0x20>
   d6d52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6d56:	d102      	bne.n	d6d5e <__aeabi_dcmpun+0x26>
   d6d58:	f04f 0000 	mov.w	r0, #0
   d6d5c:	4770      	bx	lr
   d6d5e:	f04f 0001 	mov.w	r0, #1
   d6d62:	4770      	bx	lr

000d6d64 <__aeabi_d2iz>:
   d6d64:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6d68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6d6c:	d215      	bcs.n	d6d9a <__aeabi_d2iz+0x36>
   d6d6e:	d511      	bpl.n	d6d94 <__aeabi_d2iz+0x30>
   d6d70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6d74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6d78:	d912      	bls.n	d6da0 <__aeabi_d2iz+0x3c>
   d6d7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6d7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6d82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6d86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6d8a:	fa23 f002 	lsr.w	r0, r3, r2
   d6d8e:	bf18      	it	ne
   d6d90:	4240      	negne	r0, r0
   d6d92:	4770      	bx	lr
   d6d94:	f04f 0000 	mov.w	r0, #0
   d6d98:	4770      	bx	lr
   d6d9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6d9e:	d105      	bne.n	d6dac <__aeabi_d2iz+0x48>
   d6da0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6da4:	bf08      	it	eq
   d6da6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6daa:	4770      	bx	lr
   d6dac:	f04f 0000 	mov.w	r0, #0
   d6db0:	4770      	bx	lr
   d6db2:	bf00      	nop

000d6db4 <__aeabi_d2uiz>:
   d6db4:	004a      	lsls	r2, r1, #1
   d6db6:	d211      	bcs.n	d6ddc <__aeabi_d2uiz+0x28>
   d6db8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6dbc:	d211      	bcs.n	d6de2 <__aeabi_d2uiz+0x2e>
   d6dbe:	d50d      	bpl.n	d6ddc <__aeabi_d2uiz+0x28>
   d6dc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6dc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6dc8:	d40e      	bmi.n	d6de8 <__aeabi_d2uiz+0x34>
   d6dca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6dce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6dd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6dd6:	fa23 f002 	lsr.w	r0, r3, r2
   d6dda:	4770      	bx	lr
   d6ddc:	f04f 0000 	mov.w	r0, #0
   d6de0:	4770      	bx	lr
   d6de2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6de6:	d102      	bne.n	d6dee <__aeabi_d2uiz+0x3a>
   d6de8:	f04f 30ff 	mov.w	r0, #4294967295
   d6dec:	4770      	bx	lr
   d6dee:	f04f 0000 	mov.w	r0, #0
   d6df2:	4770      	bx	lr

000d6df4 <__aeabi_d2f>:
   d6df4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6df8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6dfc:	bf24      	itt	cs
   d6dfe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6e02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6e06:	d90d      	bls.n	d6e24 <__aeabi_d2f+0x30>
   d6e08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6e0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6e10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6e14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6e18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6e1c:	bf08      	it	eq
   d6e1e:	f020 0001 	biceq.w	r0, r0, #1
   d6e22:	4770      	bx	lr
   d6e24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6e28:	d121      	bne.n	d6e6e <__aeabi_d2f+0x7a>
   d6e2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6e2e:	bfbc      	itt	lt
   d6e30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6e34:	4770      	bxlt	lr
   d6e36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6e3e:	f1c2 0218 	rsb	r2, r2, #24
   d6e42:	f1c2 0c20 	rsb	ip, r2, #32
   d6e46:	fa10 f30c 	lsls.w	r3, r0, ip
   d6e4a:	fa20 f002 	lsr.w	r0, r0, r2
   d6e4e:	bf18      	it	ne
   d6e50:	f040 0001 	orrne.w	r0, r0, #1
   d6e54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6e58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6e5c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6e60:	ea40 000c 	orr.w	r0, r0, ip
   d6e64:	fa23 f302 	lsr.w	r3, r3, r2
   d6e68:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6e6c:	e7cc      	b.n	d6e08 <__aeabi_d2f+0x14>
   d6e6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6e72:	d107      	bne.n	d6e84 <__aeabi_d2f+0x90>
   d6e74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6e78:	bf1e      	ittt	ne
   d6e7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6e7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6e82:	4770      	bxne	lr
   d6e84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6e90:	4770      	bx	lr
   d6e92:	bf00      	nop

000d6e94 <atol>:
   d6e94:	220a      	movs	r2, #10
   d6e96:	2100      	movs	r1, #0
   d6e98:	f000 b90c 	b.w	d70b4 <strtol>

000d6e9c <__cxa_atexit>:
   d6e9c:	b510      	push	{r4, lr}
   d6e9e:	4c05      	ldr	r4, [pc, #20]	; (d6eb4 <__cxa_atexit+0x18>)
   d6ea0:	4613      	mov	r3, r2
   d6ea2:	b12c      	cbz	r4, d6eb0 <__cxa_atexit+0x14>
   d6ea4:	460a      	mov	r2, r1
   d6ea6:	4601      	mov	r1, r0
   d6ea8:	2002      	movs	r0, #2
   d6eaa:	f3af 8000 	nop.w
   d6eae:	bd10      	pop	{r4, pc}
   d6eb0:	4620      	mov	r0, r4
   d6eb2:	e7fc      	b.n	d6eae <__cxa_atexit+0x12>
   d6eb4:	00000000 	.word	0x00000000

000d6eb8 <memcpy>:
   d6eb8:	440a      	add	r2, r1
   d6eba:	4291      	cmp	r1, r2
   d6ebc:	f100 33ff 	add.w	r3, r0, #4294967295
   d6ec0:	d100      	bne.n	d6ec4 <memcpy+0xc>
   d6ec2:	4770      	bx	lr
   d6ec4:	b510      	push	{r4, lr}
   d6ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6eca:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6ece:	4291      	cmp	r1, r2
   d6ed0:	d1f9      	bne.n	d6ec6 <memcpy+0xe>
   d6ed2:	bd10      	pop	{r4, pc}

000d6ed4 <memset>:
   d6ed4:	4402      	add	r2, r0
   d6ed6:	4603      	mov	r3, r0
   d6ed8:	4293      	cmp	r3, r2
   d6eda:	d100      	bne.n	d6ede <memset+0xa>
   d6edc:	4770      	bx	lr
   d6ede:	f803 1b01 	strb.w	r1, [r3], #1
   d6ee2:	e7f9      	b.n	d6ed8 <memset+0x4>

000d6ee4 <srand>:
   d6ee4:	b538      	push	{r3, r4, r5, lr}
   d6ee6:	4b0d      	ldr	r3, [pc, #52]	; (d6f1c <srand+0x38>)
   d6ee8:	681d      	ldr	r5, [r3, #0]
   d6eea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6eec:	4604      	mov	r4, r0
   d6eee:	b97b      	cbnz	r3, d6f10 <srand+0x2c>
   d6ef0:	2018      	movs	r0, #24
   d6ef2:	f7fe f8c3 	bl	d507c <malloc>
   d6ef6:	4a0a      	ldr	r2, [pc, #40]	; (d6f20 <srand+0x3c>)
   d6ef8:	4b0a      	ldr	r3, [pc, #40]	; (d6f24 <srand+0x40>)
   d6efa:	63a8      	str	r0, [r5, #56]	; 0x38
   d6efc:	e9c0 2300 	strd	r2, r3, [r0]
   d6f00:	4b09      	ldr	r3, [pc, #36]	; (d6f28 <srand+0x44>)
   d6f02:	6083      	str	r3, [r0, #8]
   d6f04:	230b      	movs	r3, #11
   d6f06:	8183      	strh	r3, [r0, #12]
   d6f08:	2201      	movs	r2, #1
   d6f0a:	2300      	movs	r3, #0
   d6f0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6f10:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6f12:	2200      	movs	r2, #0
   d6f14:	611c      	str	r4, [r3, #16]
   d6f16:	615a      	str	r2, [r3, #20]
   d6f18:	bd38      	pop	{r3, r4, r5, pc}
   d6f1a:	bf00      	nop
   d6f1c:	2003e4a0 	.word	0x2003e4a0
   d6f20:	abcd330e 	.word	0xabcd330e
   d6f24:	e66d1234 	.word	0xe66d1234
   d6f28:	0005deec 	.word	0x0005deec

000d6f2c <strcmp>:
   d6f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6f30:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6f34:	2a01      	cmp	r2, #1
   d6f36:	bf28      	it	cs
   d6f38:	429a      	cmpcs	r2, r3
   d6f3a:	d0f7      	beq.n	d6f2c <strcmp>
   d6f3c:	1ad0      	subs	r0, r2, r3
   d6f3e:	4770      	bx	lr

000d6f40 <strcpy>:
   d6f40:	4603      	mov	r3, r0
   d6f42:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6f46:	f803 2b01 	strb.w	r2, [r3], #1
   d6f4a:	2a00      	cmp	r2, #0
   d6f4c:	d1f9      	bne.n	d6f42 <strcpy+0x2>
   d6f4e:	4770      	bx	lr

000d6f50 <strdup>:
   d6f50:	4b02      	ldr	r3, [pc, #8]	; (d6f5c <strdup+0xc>)
   d6f52:	4601      	mov	r1, r0
   d6f54:	6818      	ldr	r0, [r3, #0]
   d6f56:	f000 b803 	b.w	d6f60 <_strdup_r>
   d6f5a:	bf00      	nop
   d6f5c:	2003e4a0 	.word	0x2003e4a0

000d6f60 <_strdup_r>:
   d6f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6f62:	4604      	mov	r4, r0
   d6f64:	4608      	mov	r0, r1
   d6f66:	460d      	mov	r5, r1
   d6f68:	f000 f80f 	bl	d6f8a <strlen>
   d6f6c:	1c42      	adds	r2, r0, #1
   d6f6e:	4611      	mov	r1, r2
   d6f70:	4620      	mov	r0, r4
   d6f72:	9201      	str	r2, [sp, #4]
   d6f74:	f7fe f8aa 	bl	d50cc <_malloc_r>
   d6f78:	4604      	mov	r4, r0
   d6f7a:	b118      	cbz	r0, d6f84 <_strdup_r+0x24>
   d6f7c:	9a01      	ldr	r2, [sp, #4]
   d6f7e:	4629      	mov	r1, r5
   d6f80:	f7ff ff9a 	bl	d6eb8 <memcpy>
   d6f84:	4620      	mov	r0, r4
   d6f86:	b003      	add	sp, #12
   d6f88:	bd30      	pop	{r4, r5, pc}

000d6f8a <strlen>:
   d6f8a:	4603      	mov	r3, r0
   d6f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6f90:	2a00      	cmp	r2, #0
   d6f92:	d1fb      	bne.n	d6f8c <strlen+0x2>
   d6f94:	1a18      	subs	r0, r3, r0
   d6f96:	3801      	subs	r0, #1
   d6f98:	4770      	bx	lr

000d6f9a <strncpy>:
   d6f9a:	b510      	push	{r4, lr}
   d6f9c:	3901      	subs	r1, #1
   d6f9e:	4603      	mov	r3, r0
   d6fa0:	b132      	cbz	r2, d6fb0 <strncpy+0x16>
   d6fa2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6fa6:	f803 4b01 	strb.w	r4, [r3], #1
   d6faa:	3a01      	subs	r2, #1
   d6fac:	2c00      	cmp	r4, #0
   d6fae:	d1f7      	bne.n	d6fa0 <strncpy+0x6>
   d6fb0:	441a      	add	r2, r3
   d6fb2:	2100      	movs	r1, #0
   d6fb4:	4293      	cmp	r3, r2
   d6fb6:	d100      	bne.n	d6fba <strncpy+0x20>
   d6fb8:	bd10      	pop	{r4, pc}
   d6fba:	f803 1b01 	strb.w	r1, [r3], #1
   d6fbe:	e7f9      	b.n	d6fb4 <strncpy+0x1a>

000d6fc0 <_strtol_l.isra.0>:
   d6fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6fc4:	4e3a      	ldr	r6, [pc, #232]	; (d70b0 <_strtol_l.isra.0+0xf0>)
   d6fc6:	4686      	mov	lr, r0
   d6fc8:	468c      	mov	ip, r1
   d6fca:	4660      	mov	r0, ip
   d6fcc:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6fd0:	5da5      	ldrb	r5, [r4, r6]
   d6fd2:	f015 0508 	ands.w	r5, r5, #8
   d6fd6:	d1f8      	bne.n	d6fca <_strtol_l.isra.0+0xa>
   d6fd8:	2c2d      	cmp	r4, #45	; 0x2d
   d6fda:	d133      	bne.n	d7044 <_strtol_l.isra.0+0x84>
   d6fdc:	f89c 4000 	ldrb.w	r4, [ip]
   d6fe0:	f04f 0801 	mov.w	r8, #1
   d6fe4:	f100 0c02 	add.w	ip, r0, #2
   d6fe8:	2b00      	cmp	r3, #0
   d6fea:	d05c      	beq.n	d70a6 <_strtol_l.isra.0+0xe6>
   d6fec:	2b10      	cmp	r3, #16
   d6fee:	d10c      	bne.n	d700a <_strtol_l.isra.0+0x4a>
   d6ff0:	2c30      	cmp	r4, #48	; 0x30
   d6ff2:	d10a      	bne.n	d700a <_strtol_l.isra.0+0x4a>
   d6ff4:	f89c 0000 	ldrb.w	r0, [ip]
   d6ff8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6ffc:	2858      	cmp	r0, #88	; 0x58
   d6ffe:	d14d      	bne.n	d709c <_strtol_l.isra.0+0xdc>
   d7000:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7004:	2310      	movs	r3, #16
   d7006:	f10c 0c02 	add.w	ip, ip, #2
   d700a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d700e:	3f01      	subs	r7, #1
   d7010:	2600      	movs	r6, #0
   d7012:	fbb7 f9f3 	udiv	r9, r7, r3
   d7016:	4630      	mov	r0, r6
   d7018:	fb03 7a19 	mls	sl, r3, r9, r7
   d701c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7020:	2d09      	cmp	r5, #9
   d7022:	d818      	bhi.n	d7056 <_strtol_l.isra.0+0x96>
   d7024:	462c      	mov	r4, r5
   d7026:	42a3      	cmp	r3, r4
   d7028:	dd24      	ble.n	d7074 <_strtol_l.isra.0+0xb4>
   d702a:	1c75      	adds	r5, r6, #1
   d702c:	d007      	beq.n	d703e <_strtol_l.isra.0+0x7e>
   d702e:	4581      	cmp	r9, r0
   d7030:	d31d      	bcc.n	d706e <_strtol_l.isra.0+0xae>
   d7032:	d101      	bne.n	d7038 <_strtol_l.isra.0+0x78>
   d7034:	45a2      	cmp	sl, r4
   d7036:	db1a      	blt.n	d706e <_strtol_l.isra.0+0xae>
   d7038:	fb00 4003 	mla	r0, r0, r3, r4
   d703c:	2601      	movs	r6, #1
   d703e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7042:	e7eb      	b.n	d701c <_strtol_l.isra.0+0x5c>
   d7044:	2c2b      	cmp	r4, #43	; 0x2b
   d7046:	bf08      	it	eq
   d7048:	f89c 4000 	ldrbeq.w	r4, [ip]
   d704c:	46a8      	mov	r8, r5
   d704e:	bf08      	it	eq
   d7050:	f100 0c02 	addeq.w	ip, r0, #2
   d7054:	e7c8      	b.n	d6fe8 <_strtol_l.isra.0+0x28>
   d7056:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d705a:	2d19      	cmp	r5, #25
   d705c:	d801      	bhi.n	d7062 <_strtol_l.isra.0+0xa2>
   d705e:	3c37      	subs	r4, #55	; 0x37
   d7060:	e7e1      	b.n	d7026 <_strtol_l.isra.0+0x66>
   d7062:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d7066:	2d19      	cmp	r5, #25
   d7068:	d804      	bhi.n	d7074 <_strtol_l.isra.0+0xb4>
   d706a:	3c57      	subs	r4, #87	; 0x57
   d706c:	e7db      	b.n	d7026 <_strtol_l.isra.0+0x66>
   d706e:	f04f 36ff 	mov.w	r6, #4294967295
   d7072:	e7e4      	b.n	d703e <_strtol_l.isra.0+0x7e>
   d7074:	1c73      	adds	r3, r6, #1
   d7076:	d106      	bne.n	d7086 <_strtol_l.isra.0+0xc6>
   d7078:	2322      	movs	r3, #34	; 0x22
   d707a:	f8ce 3000 	str.w	r3, [lr]
   d707e:	4638      	mov	r0, r7
   d7080:	b942      	cbnz	r2, d7094 <_strtol_l.isra.0+0xd4>
   d7082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7086:	f1b8 0f00 	cmp.w	r8, #0
   d708a:	d000      	beq.n	d708e <_strtol_l.isra.0+0xce>
   d708c:	4240      	negs	r0, r0
   d708e:	2a00      	cmp	r2, #0
   d7090:	d0f7      	beq.n	d7082 <_strtol_l.isra.0+0xc2>
   d7092:	b10e      	cbz	r6, d7098 <_strtol_l.isra.0+0xd8>
   d7094:	f10c 31ff 	add.w	r1, ip, #4294967295
   d7098:	6011      	str	r1, [r2, #0]
   d709a:	e7f2      	b.n	d7082 <_strtol_l.isra.0+0xc2>
   d709c:	2430      	movs	r4, #48	; 0x30
   d709e:	2b00      	cmp	r3, #0
   d70a0:	d1b3      	bne.n	d700a <_strtol_l.isra.0+0x4a>
   d70a2:	2308      	movs	r3, #8
   d70a4:	e7b1      	b.n	d700a <_strtol_l.isra.0+0x4a>
   d70a6:	2c30      	cmp	r4, #48	; 0x30
   d70a8:	d0a4      	beq.n	d6ff4 <_strtol_l.isra.0+0x34>
   d70aa:	230a      	movs	r3, #10
   d70ac:	e7ad      	b.n	d700a <_strtol_l.isra.0+0x4a>
   d70ae:	bf00      	nop
   d70b0:	000d73ba 	.word	0x000d73ba

000d70b4 <strtol>:
   d70b4:	4613      	mov	r3, r2
   d70b6:	460a      	mov	r2, r1
   d70b8:	4601      	mov	r1, r0
   d70ba:	4802      	ldr	r0, [pc, #8]	; (d70c4 <strtol+0x10>)
   d70bc:	6800      	ldr	r0, [r0, #0]
   d70be:	f7ff bf7f 	b.w	d6fc0 <_strtol_l.isra.0>
   d70c2:	bf00      	nop
   d70c4:	2003e4a0 	.word	0x2003e4a0

000d70c8 <dynalib_user>:
   d70c8:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d70d8:	00000000 7373654d 20656761 69727261     ....Message arri
   d70e8:	20646576 6f68005b 722d6b6f 6f707365     ved [.hook-respo
   d70f8:	2f65736e 61647075 5d006574 61700020     nse/update.] .pa
   d7108:	616f6c79 626f2064 6e696174 66206465     yload obtained f
   d7118:	206d6f72 76726573 003a7265 65746e45     rom server:.Ente
   d7128:	20646572 5f737067 64656566 6568635f     red gps_feed_che
   d7138:	29286b63 74614c00 64757469 00203a65     ck().Latitude: .
   d7148:	6f4c202c 7469676e 3a656475 227b0020     , Longitude: .{"
   d7158:	6974616c 65647574 64253a22 6f6c222c     latitude":%d,"lo
   d7168:	7469676e 22656475 7d64253a 696e6900     ngitude":%d}.ini
   d7178:	74732074 00657461 75636573 79746972     t state.security
   d7188:	61747320 63006574 6b636568 7370675f      state.check_gps
   d7198:	61747320 73006574 5f646e65 6e676973      state.send_sign
   d71a8:	73206c61 65746174 65687700 73206c65     al state.wheel s
   d71b8:	656c6f74 6962006e 7320656b 656c6f74     tolen.bike stole
   d71c8:	6f73006e 5f646e75 72616c61 7473206d     n.sound_alarm st
   d71d8:	00657461 20656577 206f6f77 72616c61     ate.wee woo alar
   d71e8:	6f62206d 7700706f 6c656568 6f74735f     m boop.wheel_sto
   d71f8:	206e656c 74617473 68570065 206c6565     len state.Wheel 
   d7208:	6c6f7473 47006e65 434d5250 47504700     stolen.GPRMC.GPG
   d7218:	00004147                                GA..

000d721c <_ZTVN5spark13EthernetClassE>:
	...
   d7224:	000d514b 000d5141 000d5137 000d512d     KQ..AQ..7Q..-Q..
   d7234:	000d5121 000d5115 000d61f7 000d61ff     !Q...Q...a...a..
   d7244:	000d5109 000d5101 000d50f7 000d50ed     .Q...Q...P...P..
   d7254:	000d622f 006e616e 00666e69 0066766f     /b..nan.inf.ovf.
   d7264:	7061002e 59250070 2d6d252d 25546425     ..app.%Y-%m-%dT%
   d7274:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   d7284:	00000065                                e...

000d7288 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7290:	000d57c1 000d57c7 000d5805 000d57d5     .W...W...X...W..
   d72a0:	000d57c3                                .W..

000d72a4 <_ZTV9IPAddress>:
	...
   d72ac:	000d5d09 000d5cf9 000d5cfb              .]...\...\..

000d72b8 <_ZTV9USBSerial>:
	...
   d72c0:	000d5de9 000d5e51 000d5e27 000d539d     .]..Q^..'^...S..
   d72d0:	000d5e19 000d5deb 000d5dfb 000d5e4b     .^...]...]..K^..
   d72e0:	000d5e0b 000d5de5                       .^...]..

000d72e8 <_ZTVN5spark13CellularClassE>:
	...
   d72f0:	000d5f53 000d5f49 000d5f3f 000d5ef5     S_..I_..?_...^..
   d7300:	000d5f33 000d5f27 000d61f7 000d61ff     3_..'_...a...a..
   d7310:	000d5f1b 000d5f13 000d5f09 000d5eff     ._..._..._...^..
   d7320:	000d622f                                /b..

000d7324 <_ZTV11USARTSerial>:
	...
   d732c:	000d5f8d 000d5ff9 000d5fd1 000d539d     ._..._..._...S..
   d733c:	000d5fa1 000d5fbd 000d5faf 000d5fcb     ._..._..._..._..
   d734c:	000d5f8f 000d5f93                       ._..._..

000d7354 <_ZTV7TwoWire>:
	...
   d735c:	000d60c1 000d610b 000d60e3 000d60c3     .`...a...`...`..
   d736c:	000d60eb 000d60f3 000d60fb 000d6103     .`...`...`...a..

000d737c <_ZTVN5spark12NetworkClassE>:
	...
   d7384:	000d61b7 000d61c1 000d61cb 000d61d5     .a...a...a...a..
   d7394:	000d61df 000d61eb 000d61f7 000d61ff     .a...a...a...a..
   d73a4:	000d6207 000d6213 000d621b 000d6225     .b...b...b..%b..
   d73b4:	000d622f                                /b..

000d73b8 <_ZSt7nothrow>:
	...

000d73b9 <_ctype_>:
   d73b9:	20202000 20202020 28282020 20282828     .         ((((( 
   d73c9:	20202020 20202020 20202020 20202020                     
   d73d9:	10108820 10101010 10101010 10101010      ...............
   d73e9:	04040410 04040404 10040404 10101010     ................
   d73f9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7409:	01010101 01010101 01010101 10101010     ................
   d7419:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7429:	02020202 02020202 02020202 10101010     ................
   d7439:	00000020 00000000 00000000 00000000      ...............
	...

000d74ba <link_const_variable_data_end>:
	...

000d74bc <link_constructors_location>:
   d74bc:	000d46d5 	.word	0x000d46d5
   d74c0:	000d5155 	.word	0x000d5155
   d74c4:	000d519d 	.word	0x000d519d
   d74c8:	000d5375 	.word	0x000d5375
   d74cc:	000d5649 	.word	0x000d5649
   d74d0:	000d5659 	.word	0x000d5659
   d74d4:	000d5681 	.word	0x000d5681
   d74d8:	000d5f5d 	.word	0x000d5f5d
   d74dc:	000d630d 	.word	0x000d630d
